
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "PerformanceAnalytics"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('PerformanceAnalytics')
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric


Attaching package: ‘PerformanceAnalytics’

The following object is masked from ‘package:graphics’:

    legend

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ActivePremium")
> ### * ActivePremium
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ActiveReturn
> ### Title: Active Premium or Active Return
> ### Aliases: ActiveReturn ActivePremium
> 
> ### ** Examples
> 
> 
>     data(managers)
>     ActivePremium(managers[, "HAM1", drop=FALSE], managers[, "SP500 TR", drop=FALSE])
[1] 0.04078668
>     ActivePremium(managers[,1,drop=FALSE], managers[,8,drop=FALSE])
[1] 0.04078668
>     ActivePremium(managers[,1:6], managers[,8,drop=FALSE])
                               HAM1       HAM2       HAM3       HAM4       HAM5
Active Premium: SP500 TR 0.04078668 0.07759873 0.05446935 0.02473443 0.02182245
                               HAM6
Active Premium: SP500 TR 0.07585993
>     ActivePremium(managers[,1:6], managers[,8:7,drop=FALSE])
                                  HAM1       HAM2       HAM3        HAM4
Active Premium: SP500 TR    0.04078668 0.07759873 0.05446935  0.02473443
Active Premium: EDHEC LS EQ 0.01965368 0.03776329 0.01043540 -0.00462594
                                   HAM5       HAM6
Active Premium: SP500 TR     0.02182245 0.07585993
Active Premium: EDHEC LS EQ -0.03237453 0.05463574
> 
> 
> 
> cleanEx()
> nameEx("AdjustedSharpeRatio")
> ### * AdjustedSharpeRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AdjustedSharpeRatio
> ### Title: Adjusted Sharpe ratio of the return distribution
> ### Aliases: AdjustedSharpeRatio
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> print(AdjustedSharpeRatio(portfolio_bacon[,1])) #expected 0.7591435
                                portfolio.monthly.return....
Annualized Sharpe Ratio (Rf=0%)                    0.7591435
> 
> data(managers)
> print(AdjustedSharpeRatio(managers['1996']))
                                          HAM1    HAM2      HAM3     HAM4 HAM5
Adjusted Sharpe ratio (Risk free = 0) 2.045968 14.5593 0.9322736 1.883368   NA
                                      HAM6 EDHEC LS EQ SP500 TR   US 10Y TR
Adjusted Sharpe ratio (Risk free = 0)   NA          NA 1.986962 0.006312774
                                       US 3m TR
Adjusted Sharpe ratio (Risk free = 0) -576.9696
> 
> 
> 
> cleanEx()
> nameEx("AppraisalRatio")
> ### * AppraisalRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AppraisalRatio
> ### Title: Appraisal ratio of the return distribution
> ### Aliases: AppraisalRatio
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(AppraisalRatio(portfolio_bacon[,1], portfolio_bacon[,2], method="appraisal")) #expected -0.430
[1] -0.4302756
> print(AppraisalRatio(portfolio_bacon[,1], portfolio_bacon[,2], method="modified")) 
[1] -0.01418576
> print(AppraisalRatio(portfolio_bacon[,1], portfolio_bacon[,2], method="alternative"))
[1] -0.1066928
> 
> data(managers)
> print(AppraisalRatio(managers['1996',1], managers['1996',8]))
[1] 1.623025
> print(AppraisalRatio(managers['1996',1:5], managers['1996',8]))
                                    HAM1 HAM2     HAM3      HAM4 HAM5
Appraisal ratio (Risk free = 0) 1.623025   NA 3.527723 0.7070483   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("BernardoLedoitRatio")
> ### * BernardoLedoitRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BernardoLedoitRatio
> ### Title: Bernardo and Ledoit ratio of the return distribution
> ### Aliases: BernardoLedoitRatio
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> print(BernardoLedoitRatio(portfolio_bacon[,1])) #expected 1.78
[1] 1.779783
> 
> data(managers)
> print(BernardoLedoitRatio(managers['1996']))
                              HAM1 HAM2     HAM3     HAM4 HAM5 HAM6 EDHEC LS EQ
Bernardo and Ledoit ratio 4.598338 2375 6.482812 3.615074  NaN  NaN         NaN
                          SP500 TR US 10Y TR US 3m TR
Bernardo and Ledoit ratio 4.340625  1.028277     -Inf
> print(BernardoLedoitRatio(managers['1996',1])) #expected 4.598
[1] 4.598338
> 
> 
> 
> 
> cleanEx()
> nameEx("BetaCoMoments")
> ### * BetaCoMoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BetaCoMoments
> ### Title: Functions to calculate systematic or beta co-moments of return
> ###   series
> ### Aliases: BetaCoMoments BetaCoVariance BetaCoSkewness BetaCoKurtosis
> ###   SystematicSkewness SystematicKurtosis
> 
> ### ** Examples
> 
> 
> data(managers)
> 
> BetaCoVariance(managers[, "HAM2", drop=FALSE], managers[, "SP500 TR", drop=FALSE])
[1] 0.3431621
> BetaCoSkewness(managers[, "HAM2", drop=FALSE], managers[, "SP500 TR", drop=FALSE])
[1] 0.04542927
> BetaCoKurtosis(managers[, "HAM2", drop=FALSE], managers[, "SP500 TR", drop=FALSE])
[1] 0.1988373
> BetaCoKurtosis(managers[,1:6], managers[,8,drop=FALSE])
                               HAM1      HAM2     HAM3      HAM4      HAM5
Beta Cokurtosis: SP500 TR 0.4814681 0.1988373 0.506819 0.8483555 0.2738611
                               HAM6
Beta Cokurtosis: SP500 TR 0.1541281
> BetaCoKurtosis(managers[,1:6], managers[,8:7])
                                  HAM1      HAM2     HAM3      HAM4      HAM5
Beta Cokurtosis: SP500 TR    0.4814681 0.1988373 0.506819 0.8483555 0.2738611
Beta Cokurtosis: EDHEC LS EQ 0.7100547 1.2676023 1.426660 1.4533001 1.2831205
                                  HAM6
Beta Cokurtosis: SP500 TR    0.1541281
Beta Cokurtosis: EDHEC LS EQ 0.8618328
> 
> 
> 
> 
> cleanEx()
> nameEx("BurkeRatio")
> ### * BurkeRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BurkeRatio
> ### Title: Burke ratio of the return distribution
> ### Aliases: BurkeRatio
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> print(BurkeRatio(portfolio_bacon[,1])) #expected 0.74
[1] 0.7447309
> print(BurkeRatio(portfolio_bacon[,1], modified = TRUE)) #expected 3.65
[1] 3.648421
> 
> data(managers)
> print(BurkeRatio(managers['1996']))
                                HAM1 HAM2     HAM3     HAM4 HAM5 HAM6
Burke ratio (Risk free = 0) 4.779747  Inf 6.340485 4.048153   NA   NA
                            EDHEC LS EQ SP500 TR   US 10Y TR US 3m TR
Burke ratio (Risk free = 0)          NA 4.739828 0.006137083      Inf
> print(BurkeRatio(managers['1996',1])) 
[1] 4.779747
> print(BurkeRatio(managers['1996'], modified = TRUE))
                                         HAM1 HAM2     HAM3     HAM4 HAM5 HAM6
Modified Burke ratio (Risk free = 0) 16.55753  Inf 21.96408 14.02321   NA   NA
                                     EDHEC LS EQ SP500 TR  US 10Y TR US 3m TR
Modified Burke ratio (Risk free = 0)          NA 16.41925 0.02125948      Inf
> print(BurkeRatio(managers['1996',1], modified = TRUE)) 
[1] 16.55753
> 
> 
> 
> 
> cleanEx()
> nameEx("CAPM.RiskPremium")
> ### * CAPM.RiskPremium
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CAPM.CML.slope
> ### Title: utility functions for single factor (CAPM) CML, SML, and
> ###   RiskPremium
> ### Aliases: CAPM.CML.slope CAPM.CML CAPM.RiskPremium CAPM.utils
> ###   CAPM.SML.slope SFM.utils SFM.RiskPremium SFM.CML SFM.CML.slope
> ###   SFM.SML.slope
> 
> ### ** Examples
> 
> 
> data(managers)
> CAPM.CML.slope(managers[,"SP500 TR",drop=FALSE], managers[,10,drop=FALSE])
                                     SP500 TR
Capital Market Line Slope: SP500 TR 0.1255829
> CAPM.CML(managers[,"HAM1",drop=FALSE], managers[,"SP500 TR",drop=FALSE], Rf=0)
[1] 0.002225442
> CAPM.RiskPremium(managers[,"SP500 TR",drop=FALSE], Rf=0)
                        SP500 TR
Risk Premium (Rf=0%) 0.008665341
> CAPM.RiskPremium(managers[,"HAM1",drop=FALSE], Rf=0)
                           HAM1
Risk Premium (Rf=0%) 0.01112273
> CAPM.SML.slope(managers[,"SP500 TR",drop=FALSE], Rf=0)
                               SP500 TR
Security Market Line: SP500 TR 115.4023
> # should create plots like in Ruppert 7.1 7.2
> 
> 
> 
> cleanEx()
> nameEx("CAPM.alpha")
> ### * CAPM.alpha
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CAPM.alpha
> ### Title: calculate single factor model (CAPM) alpha
> ### Aliases: CAPM.alpha SFM.alpha
> 
> ### ** Examples
> 
> 
> # First we load the data
>     data(managers)
>     CAPM.alpha(managers[,1,drop=FALSE], 
+ 			managers[,8,drop=FALSE], 
+ 			Rf=.035/12) 
[1] 0.005960609
>     CAPM.alpha(managers[,1,drop=FALSE], 
+ 			managers[,8,drop=FALSE], 
+ 			Rf = managers[,10,drop=FALSE])
[1] 0.005774729
>     CAPM.alpha(managers[,1:6], 
+ 			managers[,8,drop=FALSE], 
+ 			Rf=.035/12)
                       HAM1        HAM2        HAM3        HAM4        HAM5
Alpha: SP500 TR 0.005960609 0.009232784 0.006327417 0.004144392 0.001425414
                       HAM6
Alpha: SP500 TR 0.007244216
>     CAPM.alpha(managers[,1:6], 
+ 			managers[,8,drop=FALSE], 
+ 			Rf = managers[,10,drop=FALSE])
                       HAM1        HAM2        HAM3        HAM4        HAM5
Alpha: SP500 TR 0.005774729 0.009092773 0.006216498 0.004029731 0.001733199
                       HAM6
Alpha: SP500 TR 0.007837454
>     CAPM.alpha(managers[,1:6], 
+ 			managers[,8:7,drop=FALSE], 
+ 			Rf=.035/12) 
                          HAM1        HAM2         HAM3         HAM4
Alpha: SP500 TR    0.005960609 0.009232784  0.006327417  0.004144392
Alpha: EDHEC LS EQ 0.003190734 0.001627709 -0.001716897 -0.003357739
                           HAM5        HAM6
Alpha: SP500 TR     0.001425414 0.007244216
Alpha: EDHEC LS EQ -0.002185688 0.004197041
>     CAPM.alpha(managers[,1:6], 
+ 			managers[,8:7,drop=FALSE], 
+ 			Rf = managers[,10,drop=FALSE])
                          HAM1        HAM2         HAM3         HAM4
Alpha: SP500 TR    0.005774729 0.009092773  0.006216498  0.004029731
Alpha: EDHEC LS EQ 0.003134750 0.001732335 -0.001563904 -0.003406683
                           HAM5        HAM6
Alpha: SP500 TR     0.001733199 0.007837454
Alpha: EDHEC LS EQ -0.002255793 0.004212371
>   		
> 
> 
> 
> cleanEx()
> nameEx("CAPM.beta")
> ### * CAPM.beta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CAPM.beta
> ### Title: calculate single factor model (CAPM) beta
> ### Aliases: CAPM.beta CAPM.beta.bull CAPM.beta.bear TimingRatio SFM.beta
> 
> ### ** Examples
> 
> 
> data(managers)
>     CAPM.alpha(managers[,1,drop=FALSE], 
+ 			managers[,8,drop=FALSE], 
+ 			Rf=.035/12) 
[1] 0.005960609
>     CAPM.alpha(managers[,1,drop=FALSE], 
+ 			managers[,8,drop=FALSE], 
+ 			Rf = managers[,10,drop=FALSE])
[1] 0.005774729
>     CAPM.alpha(managers[,1:6], 
+ 			managers[,8,drop=FALSE], 
+ 			Rf=.035/12)
                       HAM1        HAM2        HAM3        HAM4        HAM5
Alpha: SP500 TR 0.005960609 0.009232784 0.006327417 0.004144392 0.001425414
                       HAM6
Alpha: SP500 TR 0.007244216
>     CAPM.alpha(managers[,1:6], 
+ 			managers[,8,drop=FALSE], 
+ 			Rf = managers[,10,drop=FALSE])
                       HAM1        HAM2        HAM3        HAM4        HAM5
Alpha: SP500 TR 0.005774729 0.009092773 0.006216498 0.004029731 0.001733199
                       HAM6
Alpha: SP500 TR 0.007837454
>     CAPM.alpha(managers[,1:6], 
+ 			managers[,8:7,drop=FALSE], 
+ 			Rf=.035/12) 
                          HAM1        HAM2         HAM3         HAM4
Alpha: SP500 TR    0.005960609 0.009232784  0.006327417  0.004144392
Alpha: EDHEC LS EQ 0.003190734 0.001627709 -0.001716897 -0.003357739
                           HAM5        HAM6
Alpha: SP500 TR     0.001425414 0.007244216
Alpha: EDHEC LS EQ -0.002185688 0.004197041
>     CAPM.alpha(managers[,1:6], 
+ 			managers[,8:7,drop=FALSE], 
+ 			Rf = managers[,10,drop=FALSE])
                          HAM1        HAM2         HAM3         HAM4
Alpha: SP500 TR    0.005774729 0.009092773  0.006216498  0.004029731
Alpha: EDHEC LS EQ 0.003134750 0.001732335 -0.001563904 -0.003406683
                           HAM5        HAM6
Alpha: SP500 TR     0.001733199 0.007837454
Alpha: EDHEC LS EQ -0.002255793 0.004212371
>     CAPM.beta(managers[, "HAM2", drop=FALSE], 
+ 			managers[, "SP500 TR", drop=FALSE], 
+ 			Rf = managers[, "US 3m TR", drop=FALSE])
[1] 0.3383942
>     CAPM.beta.bull(managers[, "HAM2", drop=FALSE], 
+ 			managers[, "SP500 TR", drop=FALSE], 
+ 			Rf = managers[, "US 3m TR", drop=FALSE])
[1] 0.5226596
>     CAPM.beta.bear(managers[, "HAM2", drop=FALSE], 
+ 			managers[, "SP500 TR", drop=FALSE], 
+ 			Rf = managers[, "US 3m TR", drop=FALSE])
[1] 0.0698255
>     TimingRatio(managers[, "HAM2", drop=FALSE], 
+ 			managers[, "SP500 TR", drop=FALSE], 
+ 			Rf = managers[, "US 3m TR", drop=FALSE])
[1] 7.485224
>     chart.Regression(managers[, "HAM2", drop=FALSE], 
+ 			managers[, "SP500 TR", drop=FALSE], 
+ 			Rf = managers[, "US 3m TR", drop=FALSE], 
+ 			fit="conditional", 
+ 			main="Conditional Beta")
>   		
> 
> 
> 
> cleanEx()
> nameEx("CAPM.dynamic")
> ### * CAPM.dynamic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CAPM.dynamic
> ### Title: Time-varying conditional single factor model beta
> ### Aliases: CAPM.dynamic SFM.dynamic
> 
> ### ** Examples
> 
> 
> data(managers)
> CAPM.dynamic(managers[,1,drop=FALSE], managers[,8,drop=FALSE], 
+              Rf=.035/12, Z=managers[, 9:10])
                 Average alpha US 10Y TR alpha at t - 1 US 3m TR alpha at t - 1
HAM1 to SP500 TR     0.0070965                -0.196351               0.1665381
                 Average beta US 10Y TR beta at t - 1 US 3m TR beta at t - 1
HAM1 to SP500 TR    0.3248015                3.493336              -63.74814
> 
> CAPM.dynamic(managers[80:120,1:6], managers[80:120,7,drop=FALSE], 
+              Rf=managers[80:120,10,drop=FALSE], Z=managers[80:120, 9:10])
                    Average alpha US 10Y TR alpha at t - 1
HAM1 to EDHEC LS EQ -0.0001741347              -0.23890464
HAM2 to EDHEC LS EQ -0.0027673634              -0.06632217
HAM3 to EDHEC LS EQ  0.0062624783              -0.21733015
HAM4 to EDHEC LS EQ -0.0033262023               0.16135997
HAM5 to EDHEC LS EQ  0.0043380559               0.26882960
HAM6 to EDHEC LS EQ -0.0053865004               0.05000616
                    US 3m TR alpha at t - 1 Average beta
HAM1 to EDHEC LS EQ              -0.4385012    1.1793098
HAM2 to EDHEC LS EQ              -4.0176982    0.7067390
HAM3 to EDHEC LS EQ               7.6804829    0.4260623
HAM4 to EDHEC LS EQ              -0.2091890    1.6367609
HAM5 to EDHEC LS EQ               3.8497148    1.2224547
HAM6 to EDHEC LS EQ              -3.0664314    1.6281908
                    US 10Y TR beta at t - 1 US 3m TR beta at t - 1
HAM1 to EDHEC LS EQ                3.861212              -51.01409
HAM2 to EDHEC LS EQ                5.682080              171.16658
HAM3 to EDHEC LS EQ                1.507916             -705.20354
HAM4 to EDHEC LS EQ               -7.622136             -565.85196
HAM5 to EDHEC LS EQ                7.083956               39.70358
HAM6 to EDHEC LS EQ              -11.035136              343.52891
>              
> CAPM.dynamic(managers[80:120,1:6], managers[80:120,8:7],
+               managers[80:120,10,drop=FALSE], Z=managers[80:120, 9:10])
                    Average alpha US 10Y TR alpha at t - 1
HAM1 to SP500 TR     0.0036316941              -0.03538369
HAM2 to SP500 TR     0.0016901086              -0.05484988
HAM3 to SP500 TR     0.0072668556              -0.05978008
HAM4 to SP500 TR    -0.0015875926               0.41314240
HAM5 to SP500 TR     0.0083363515               0.35300102
HAM6 to SP500 TR     0.0012839717               0.03521033
HAM1 to EDHEC LS EQ -0.0001741347              -0.23890464
HAM2 to EDHEC LS EQ -0.0027673634              -0.06632217
HAM3 to EDHEC LS EQ  0.0062624783              -0.21733015
HAM4 to EDHEC LS EQ -0.0033262023               0.16135997
HAM5 to EDHEC LS EQ  0.0043380559               0.26882960
HAM6 to EDHEC LS EQ -0.0053865004               0.05000616
                    US 3m TR alpha at t - 1 Average beta
HAM1 to SP500 TR                 0.08506313   0.51861197
HAM2 to SP500 TR                -2.91835013   0.05157528
HAM3 to SP500 TR                 4.10231175   0.17720080
HAM4 to SP500 TR                -6.04090381   1.20562924
HAM5 to SP500 TR                 1.56695525   0.57212866
HAM6 to SP500 TR                -1.72313785   0.59611332
HAM1 to EDHEC LS EQ             -0.43850123   1.17930984
HAM2 to EDHEC LS EQ             -4.01769818   0.70673900
HAM3 to EDHEC LS EQ              7.68048289   0.42606233
HAM4 to EDHEC LS EQ             -0.20918897   1.63676093
HAM5 to EDHEC LS EQ              3.84971482   1.22245465
HAM6 to EDHEC LS EQ             -3.06643145   1.62819081
                    US 10Y TR beta at t - 1 US 3m TR beta at t - 1
HAM1 to SP500 TR                  -1.181057              -65.73676
HAM2 to SP500 TR                   2.075534              -23.79983
HAM3 to SP500 TR                   1.063350             -256.19346
HAM4 to SP500 TR                  -1.812210              162.03456
HAM5 to SP500 TR                   4.277306              183.06200
HAM6 to SP500 TR                  -5.106318              189.51371
HAM1 to EDHEC LS EQ                3.861212              -51.01409
HAM2 to EDHEC LS EQ                5.682080              171.16658
HAM3 to EDHEC LS EQ                1.507916             -705.20354
HAM4 to EDHEC LS EQ               -7.622136             -565.85196
HAM5 to EDHEC LS EQ                7.083956               39.70358
HAM6 to EDHEC LS EQ              -11.035136              343.52891
> 
> 
> 
> 
> cleanEx()
> nameEx("CAPM.epsilon")
> ### * CAPM.epsilon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CAPM.epsilon
> ### Title: Regression epsilon of the return distribution
> ### Aliases: CAPM.epsilon SFM.epsilon
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(SFM.epsilon(portfolio_bacon[,1], portfolio_bacon[,2])) #expected -0.013
[1] -0.01313932
> 
> data(managers)
> print(SFM.epsilon(managers['1996',1], managers['1996',8]))
[1] 0.07425366
> print(SFM.epsilon(managers['1996',1:5], managers['1996',8]))
                                         HAM1      HAM2      HAM3       HAM4
Regression epsilon (Risk free = 0) 0.07425366 0.5399193 0.2048063 0.05570592
                                   HAM5
Regression epsilon (Risk free = 0)   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("CAPM.jensenAlpha")
> ### * CAPM.jensenAlpha
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CAPM.jensenAlpha
> ### Title: Jensen's alpha of the return distribution
> ### Aliases: CAPM.jensenAlpha SFM.jensenAlpha
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(SFM.jensenAlpha(portfolio_bacon[,1], portfolio_bacon[,2])) #expected -0.014
[1] -0.01416944
> 
> data(managers)
> print(SFM.jensenAlpha(managers['1996',1], managers['1996',8]))
[1] 0.08077871
> print(SFM.jensenAlpha(managers['1996',1:5], managers['1996',8]))
                                     HAM1 HAM2      HAM3       HAM4 HAM5
Jensen's Alpha (Risk free = 0) 0.08077871   NA 0.2196026 0.06063837   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("CDD")
> ### * CDD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CDD
> ### Title: Calculate Uryasev's proposed Conditional Drawdown at Risk (CDD
> ###   or CDaR) measure
> ### Aliases: CDD CDaR
> 
> ### ** Examples
> 
> 
> data(edhec)
> t(round(CDD(edhec),4))
                       Conditional Drawdown 5%
Convertible Arbitrage                   0.0656
CTA Global                              0.0743
Distressed Securities                   0.1020
Emerging Markets                        0.1889
Equity Market Neutral                   0.0332
Event Driven                            0.0960
Fixed Income Arbitrage                  0.0254
Global Macro                            0.0355
Long/Short Equity                       0.0880
Merger Arbitrage                        0.0263
Relative Value                          0.0418
Short Selling                           0.6322
Funds of Funds                          0.0711
> 
> 
> 
> 
> cleanEx()
> nameEx("CalmarRatio")
> ### * CalmarRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CalmarRatio
> ### Title: calculate a Calmar or Sterling reward/risk ratio Calmar and
> ###   Sterling Ratios are yet another method of creating a risk-adjusted
> ###   measure for ranking investments similar to the 'SharpeRatio'.
> ### Aliases: CalmarRatio SterlingRatio
> 
> ### ** Examples
> 
> 
>     data(managers)
>     CalmarRatio(managers[,1,drop=FALSE])
                  HAM1
Calmar Ratio 0.9061697
>     CalmarRatio(managers[,1:6]) 
                  HAM1     HAM2      HAM3      HAM4      HAM5     HAM6
Calmar Ratio 0.9061697 0.728094 0.5225829 0.4227315 0.1095909 1.742525
>     SterlingRatio(managers[,1,drop=FALSE])
                                   HAM1
Sterling Ratio (Excess = 10%) 0.5462542
>     SterlingRatio(managers[,1:6])
                                   HAM1      HAM2      HAM3      HAM4
Sterling Ratio (Excess = 10%) 0.5462542 0.5138746 0.3883671 0.3136025
                                    HAM5      HAM6
Sterling Ratio (Excess = 10%) 0.08471255 0.7678475
> 
> 
> 
> 
> cleanEx()
> nameEx("CoMoments")
> ### * CoMoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CoMoments
> ### Title: Functions for calculating comoments of financial time series
> ### Aliases: CoMoments CoSkewnessMatrix CoKurtosisMatrix CoVariance
> ###   CoSkewness CoKurtosis M3.MM M4.MM
> 
> ### ** Examples
> 
> 
> data(managers)
> CoVariance(managers[, "HAM2", drop=FALSE], managers[, "SP500 TR", drop=FALSE])
[1] 0.0006641516
> CoSkewness(managers[, "HAM2", drop=FALSE], managers[, "SP500 TR", drop=FALSE])
[1] -2.101289e-06
> CoKurtosis(managers[, "HAM2", drop=FALSE], managers[, "SP500 TR", drop=FALSE])
[1] 2.579066e-06
> 
> 
> 
> 
> cleanEx()
> nameEx("DRatio")
> ### * DRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DRatio
> ### Title: d ratio of the return distribution
> ### Aliases: DRatio
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> print(DRatio(portfolio_bacon[,1])) #expected 0.401
[1] 0.4013329
> 
> data(managers)
> print(DRatio(managers['1996']))
              HAM1         HAM2       HAM3      HAM4 HAM5 HAM6 EDHEC LS EQ
d ratio 0.07248996 0.0001052632 0.03085081 0.1383098  NaN  NaN         NaN
          SP500 TR US 10Y TR US 3m TR
d ratio 0.04607631  1.361501        0
> print(DRatio(managers['1996',1])) #expected 0.0725
[1] 0.07248996
> 
> 
> 
> 
> cleanEx()
> nameEx("DownsideDeviation")
> ### * DownsideDeviation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DownsideDeviation
> ### Title: downside risk (deviation, variance) of the return distribution
> ### Aliases: DownsideDeviation SemiDeviation SemiVariance DownsidePotential
> ###   SemiSD
> 
> ### ** Examples
> 
> 
> #with data used in Bacon 2008
> 
> data(portfolio_bacon)
> MAR = 0.005
> DownsideDeviation(portfolio_bacon[,1], MAR) #expected 0.0255
           [,1]
[1,] 0.02553674
> DownsidePotential(portfolio_bacon[,1], MAR) #expected 0.0137
           [,1]
[1,] 0.01370833
> 
> #with data of managers
> 
> data(managers)
> apply(managers[,1:6], 2, sd, na.rm=TRUE)
      HAM1       HAM2       HAM3       HAM4       HAM5       HAM6 
0.02562881 0.03671623 0.03651259 0.05319796 0.04573149 0.02381247 
> DownsideDeviation(managers[,1:6])  # MAR 0%
                                    HAM1      HAM2       HAM3       HAM4
Downside Deviation (MAR = 0%) 0.01454078 0.0115736 0.01735454 0.03406781
                                   HAM5       HAM6
Downside Deviation (MAR = 0%) 0.0304305 0.01214476
> DownsideDeviation(managers[,1:6], MAR = .04/12) #MAR 4%
                                   HAM1       HAM2       HAM3       HAM4
Downside Deviation (MAR = 0%) 0.0157602 0.01341739 0.01891525 0.03565192
                                   HAM5       HAM6
Downside Deviation (MAR = 0%) 0.0320608 0.01366533
> SemiDeviation(managers[,1,drop=FALSE])
                    HAM1
Semi-Deviation 0.0190795
> SemiDeviation(managers[,1:6])
                    HAM1       HAM2       HAM3       HAM4       HAM5       HAM6
Semi-Deviation 0.0190795 0.02011968 0.02369306 0.03950215 0.03244118 0.01751678
> SemiVariance (managers[,1,drop=FALSE])
                    HAM1
Semi-Variance 0.02698249
> SemiVariance (managers[,1:6]) #calculated using method="subset"
                    HAM1       HAM2       HAM3       HAM4       HAM5       HAM6
Semi-Variance 0.02698249 0.02580294 0.03186006 0.05763839 0.04558371 0.02602228
> 
> 
> 
> 
> cleanEx()
> nameEx("DownsideFrequency")
> ### * DownsideFrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DownsideFrequency
> ### Title: downside frequency of the return distribution
> ### Aliases: DownsideFrequency
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> MAR = 0.005
> print(DownsideFrequency(portfolio_bacon[,1], MAR)) #expected 0.458
[1] 0.4583333
> 
> data(managers)
> print(DownsideFrequency(managers['1996']))
                              HAM1 HAM2      HAM3      HAM4 HAM5 HAM6
Downside Frequency (MAR = 0%) 0.25  0.2 0.1666667 0.3333333  NaN  NaN
                              EDHEC LS EQ  SP500 TR US 10Y TR US 3m TR
Downside Frequency (MAR = 0%)         NaN 0.1666667 0.5833333        0
> print(DownsideFrequency(managers['1996',1])) #expected 0.25
[1] 0.25
> 
> 
> 
> 
> cleanEx()
> nameEx("ES")
> ### * ES
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ETL
> ### Title: calculates Expected Shortfall(ES) (or Conditional
> ###   Value-at-Risk(CVaR) for univariate and component, using a variety of
> ###   analytical methods.
> ### Aliases: ETL ES CVaR
> 
> ### ** Examples
> 
> 
> if(!( Sys.info()[['sysname']]=="Windows") ){
+ # if on Windows, cut and paste this example
+ 
+     data(edhec)
+ 
+     # first do normal ES calc
+     ES(edhec, p=.95, method="historical")
+ 
+     # now use Gaussian
+     ES(edhec, p=.95, method="gaussian")
+ 
+     # now use modified Cornish Fisher calc to take non-normal distribution into account
+     ES(edhec, p=.95, method="modified")
+ 
+     # now use p=.99
+     ES(edhec, p=.99)
+     # or the equivalent alpha=.01
+     ES(edhec, p=.01)
+ 
+     # now with outliers squished
+     ES(edhec, clean="boudt")
+ 
+     # add Component ES for the equal weighted portfolio
+     ES(edhec, clean="boudt", portfolio_method="component")
+ 
+ } # end CRAN Windows check
no weights passed in, assuming equal weighted portfolio
$MES
[1] 0.01802146

$contribution
 Convertible Arbitrage             CTA Global  Distressed Securities 
          0.0023173115          -0.0007628382           0.0022869133 
      Emerging Markets  Equity Market Neutral           Event Driven 
          0.0043177630           0.0007071321           0.0022753610 
Fixed Income Arbitrage           Global Macro      Long/Short Equity 
          0.0016376263           0.0008665011           0.0027708304 
      Merger Arbitrage         Relative Value          Short Selling 
          0.0009625944           0.0015044225          -0.0034071301 
        Funds of Funds 
          0.0025449680 

$pct_contrib_MES
 Convertible Arbitrage             CTA Global  Distressed Securities 
            0.12858626            -0.04232945             0.12689948 
      Emerging Markets  Equity Market Neutral           Event Driven 
            0.23959014             0.03923835             0.12625845 
Fixed Income Arbitrage           Global Macro      Long/Short Equity 
            0.09087092             0.04808164             0.15375176 
      Merger Arbitrage         Relative Value          Short Selling 
            0.05341380             0.08347953            -0.18905966 
        Funds of Funds 
            0.14121878 

>     
> 
> 
> 
> cleanEx()
> nameEx("EWMAMoments")
> ### * EWMAMoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EWMAMoments
> ### Title: Functions for calculating EWMA comoments of financial time
> ###   series
> ### Aliases: EWMAMoments M2.ewma M3.ewma M4.ewma
> 
> ### ** Examples
> 
> 
> data(edhec)
> 
> # EWMA estimation
> # 'as.mat = F' would speed up calculations in higher dimensions
> sigma <- M2.ewma(edhec, 0.94)
> m3 <- M3.ewma(edhec, 0.94)
> m4 <- M4.ewma(edhec, 0.94)
> 
> # compute equal-weighted portfolio modified ES 
> mu <- colMeans(edhec)
> p <- length(mu)
> ES(p = 0.95, portfolio_method = "component", weights = rep(1 / p, p), mu = mu, 
+     sigma = sigma, m3 = m3, m4 = m4)
$MES
[1] 0.007012076

$contribution
 [1]  5.100126e-04  8.122383e-04  5.699841e-04  1.613916e-03  3.320468e-05
 [6]  1.155741e-03  9.687210e-05  4.808274e-04  1.371705e-03  1.440565e-04
[11]  3.572778e-04 -1.046913e-03  9.131534e-04

$pct_contrib_MES
 [1]  0.072733470  0.115834207  0.081286065  0.230162329  0.004735357
 [6]  0.164821533  0.013815038  0.068571336  0.195620389  0.020544059
[11]  0.050951783 -0.149301389  0.130225824

> 
> # compare to sample method
> sigma <- cov(edhec)
> m3 <- M3.MM(edhec)
> m4 <- M4.MM(edhec)
> ES(p = 0.95, portfolio_method = "component", weights = rep(1 / p, p), mu = mu, 
+     sigma = sigma, m3 = m3, m4 = m4)
$MES
[1] 0.02755224

$contribution
 [1]  0.0066193322 -0.0029204094  0.0035391088  0.0062298642  0.0007584470
 [6]  0.0033786777  0.0039691984  0.0002599126  0.0031036429  0.0013410015
[11]  0.0033762935 -0.0051263847  0.0030235549

$pct_contrib_MES
 [1]  0.240246613 -0.105995357  0.128450859  0.226110992  0.027527598
 [6]  0.122628060  0.144060829  0.009433446  0.112645758  0.048671234
[11]  0.122541527 -0.186060547  0.109738989

> 
> 
> 
> 
> cleanEx()
> nameEx("FamaBeta")
> ### * FamaBeta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FamaBeta
> ### Title: Fama beta of the return distribution
> ### Aliases: FamaBeta
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(FamaBeta(portfolio_bacon[,1], portfolio_bacon[,2])) #expected 1.03
                             portfolio.monthly.return....
portfolio.monthly.return....                     1.030395
> 
> data(managers)
> print(FamaBeta(managers['1996',1], managers['1996',8]))
          HAM1
HAM1 0.5351217
> print(FamaBeta(managers['1996',1:5], managers['1996',8]))
                HAM1 HAM2     HAM3     HAM4 HAM5
Fama Beta  0.5351217   NA 1.007084 1.037632   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("Frequency")
> ### * Frequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Frequency
> ### Title: Frequency of the return distribution
> ### Aliases: Frequency
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> print(Frequency(portfolio_bacon[,1])) #expected 12
[1] 12
> data(managers)
> print(Frequency(managers['1996',1:5]))
          HAM1 HAM2 HAM3 HAM4 HAM5
Frequency   12   12   12   12   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("InformationRatio")
> ### * InformationRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: InformationRatio
> ### Title: InformationRatio = ActivePremium/TrackingError
> ### Aliases: InformationRatio
> 
> ### ** Examples
> 
> 
> data(managers)
> InformationRatio(managers[,"HAM1",drop=FALSE], managers[, "SP500 TR", drop=FALSE])
[1] 0.3604125
> InformationRatio(managers[,1:6], managers[,8,drop=FALSE])
                                 HAM1      HAM2      HAM3     HAM4      HAM5
Information Ratio: SP500 TR 0.3604125 0.5059751 0.4701009 0.154914 0.1212162
                                 HAM6
Information Ratio: SP500 TR 0.6722844
> InformationRatio(managers[,1:6], managers[,8:7])
                                    HAM1      HAM2      HAM3       HAM4
Information Ratio: SP500 TR    0.3604125 0.5059751 0.4701009  0.1549140
Information Ratio: EDHEC LS EQ 0.2593770 0.4162701 0.1279329 -0.0294821
                                     HAM5      HAM6
Information Ratio: SP500 TR     0.1212162 0.6722844
Information Ratio: EDHEC LS EQ -0.2277438 0.9667207
> 
> 
> 
> 
> cleanEx()
> nameEx("Kappa")
> ### * Kappa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Kappa
> ### Title: Kappa of the return distribution
> ### Aliases: Kappa
> 
> ### ** Examples
> 
> l = 2
> 
> data(portfolio_bacon)
> MAR = 0.005
> print(Kappa(portfolio_bacon[,1], MAR, l)) #expected 0.157
[1] 0.1566371
> 
> data(managers)
> MAR = 0
> print(Kappa(managers['1996'], MAR, l))
                     HAM1     HAM2     HAM3    HAM4 HAM5 HAM6 EDHEC LS EQ
kappa (MAR = 0%) 1.492063 1061.685 2.235197 1.14188  NaN  NaN         NaN
                 SP500 TR  US 10Y TR US 3m TR
kappa (MAR = 0%) 1.274332 0.01674457      Inf
> print(Kappa(managers['1996',1], MAR, l)) #expected 1.493
[1] 1.492063
> 
> 
> 
> 
> cleanEx()
> nameEx("KellyRatio")
> ### * KellyRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KellyRatio
> ### Title: calculate Kelly criterion ratio (leverage or bet size) for a
> ###   strategy
> ### Aliases: KellyRatio
> 
> ### ** Examples
> 
> 
>     data(managers)
>     KellyRatio(managers[,1,drop=FALSE], Rf=.04/12)
                HAM1
Kelly Ratio 5.929483
>     KellyRatio(managers[,1,drop=FALSE], Rf=managers[,10,drop=FALSE])
                HAM1
Kelly Ratio 6.010854
>     KellyRatio(managers[,1:6], Rf=managers[,10,drop=FALSE])
                HAM1     HAM2     HAM3     HAM4      HAM5     HAM6
Kelly Ratio 6.010854 4.069873 3.458124 1.376354 0.3876476 7.948295
> 
> 
> 
> 
> cleanEx()
> nameEx("M2Sortino")
> ### * M2Sortino
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: M2Sortino
> ### Title: M squared for Sortino of the return distribution
> ### Aliases: M2Sortino
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> MAR = 0.005
> print(M2Sortino(portfolio_bacon[,1], portfolio_bacon[,2], MAR)) #expected 0.1035
                           portfolio.monthly.return....
Sortino Ratio (MAR = 0.5%)                    0.1034799
> 
> data(managers)
> MAR = 0
> print(MSquaredExcess(managers['1996',1], managers['1996',8], MAR))
           SP500 TR
SP500 TR 0.02027322
> print(MSquaredExcess(managers['1996',1:5], managers['1996',8], MAR))
                                     HAM1 HAM2      HAM3        HAM4 HAM5
MSquaredExcess (Risk free = 0) 0.02027322   NA 0.1409545 -0.02546609   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("MCA")
> ### * MCA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MCA
> ### Title: Functions for doing Moment Component Analysis (MCA) of financial
> ###   time series
> ### Aliases: MCA M3.MCA M4.MCA
> 
> ### ** Examples
> 
> data(edhec)
> 
> # coskewness matrix based on two components
> M3mca <- M3.MCA(edhec, k = 2)$M3mca
> 
> # screeplot MCA 
> M3dist <- M4dist <- rep(NA, ncol(edhec))
> M3S <- M3.MM(edhec)  # sample coskewness estimator
> M4S <- M4.MM(edhec)  # sample cokurtosis estimator
> for (k in 1:ncol(edhec)) {
+   M3MCA_list <- M3.MCA(edhec, k)
+   M4MCA_list <- M4.MCA(edhec, k)
+ 
+   M3dist[k] <- sqrt(sum((M3S - M3MCA_list$M3mca)^2))
+   M4dist[k] <- sqrt(sum((M4S - M4MCA_list$M4mca)^2))
+ }
> par(mfrow = c(2, 1))
> plot(1:ncol(edhec), M3dist)
> plot(1:ncol(edhec), M4dist)
> par(mfrow = c(1, 1))
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("MSquared")
> ### * MSquared
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MSquared
> ### Title: M squared of the return distribution
> ### Aliases: MSquared
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(MSquared(portfolio_bacon[,1], portfolio_bacon[,2])) #expected 0.10062
                     benchmark.return....
benchmark.return....              0.10062
> 
> data(managers)
> print(MSquared(managers['1996',1], managers['1996',8]))
          SP500 TR
SP500 TR 0.2544876
> print(MSquared(managers['1996',1:5], managers['1996',8]))
                              HAM1 HAM2      HAM3      HAM4 HAM5
MSquared (Risk free = 0) 0.2544876   NA 0.4028725 0.1982483   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("MSquaredExcess")
> ### * MSquaredExcess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MSquaredExcess
> ### Title: M squared excess of the return distribution
> ### Aliases: MSquaredExcess
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> MSquaredExcess(portfolio_bacon[,1], portfolio_bacon[,2]) #expected -0.00998
                     benchmark.return....
benchmark.return....          -0.01553103
> 
> MSquaredExcess(portfolio_bacon[,1], portfolio_bacon[,2], Method="arithmetic") #expected -0.011
                     benchmark.return....
benchmark.return....          -0.01736344
> 
> data(managers)
> MSquaredExcess(managers['1996',1], managers['1996',8])
           SP500 TR
SP500 TR 0.02027322
> MSquaredExcess(managers['1996',1:5], managers['1996',8])
                                     HAM1 HAM2      HAM3        HAM4 HAM5
MSquaredExcess (Risk free = 0) 0.02027322   NA 0.1409545 -0.02546609   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("MarketTiming")
> ### * MarketTiming
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MarketTiming
> ### Title: Market timing models
> ### Aliases: MarketTiming
> 
> ### ** Examples
> 
> 
> data(managers)
> MarketTiming(managers[,1], managers[,8], Rf=.035/12, method = "HM")
                       Alpha      Beta     Gamma
HAM1 to SP500 TR 0.008275839 0.3211407 0.1344417
> MarketTiming(managers[80:120,1:6], managers[80:120,7], managers[80:120,10])
                            Alpha      Beta     Gamma
HAM1 to EDHEC LS EQ -0.0005755802 1.3121058 -0.405150
HAM2 to EDHEC LS EQ -0.0003616789 0.4370998  8.520620
HAM3 to EDHEC LS EQ -0.0058148518 1.1898242 11.913786
HAM4 to EDHEC LS EQ -0.0055113742 2.0616524 18.797340
HAM5 to EDHEC LS EQ  0.0005125284 1.0703704 -5.077881
HAM6 to EDHEC LS EQ  0.0003590925 1.2711094 -7.443428
> MarketTiming(managers[80:120,1:6], managers[80:120,8:7], managers[80:120,10], method = "TM")
                            Alpha      Beta      Gamma
HAM1 to SP500 TR     0.0048833318 0.5970167 -0.2801650
HAM2 to SP500 TR     0.0050694247 0.1190405 -0.5000263
HAM3 to SP500 TR     0.0032110848 0.5272982 -0.6645684
HAM4 to SP500 TR     0.0094634771 0.8779523 -0.8155100
HAM5 to SP500 TR     0.0087234498 0.2869943 -2.7728051
HAM6 to SP500 TR     0.0048031173 0.2902262  0.6910898
HAM1 to EDHEC LS EQ -0.0005755802 1.3121058 -0.4051500
HAM2 to EDHEC LS EQ -0.0003616789 0.4370998  8.5206196
HAM3 to EDHEC LS EQ -0.0058148518 1.1898242 11.9137857
HAM4 to EDHEC LS EQ -0.0055113742 2.0616524 18.7973395
HAM5 to EDHEC LS EQ  0.0005125284 1.0703704 -5.0778814
HAM6 to EDHEC LS EQ  0.0003590925 1.2711094 -7.4434281
> 
> 
> 
> 
> cleanEx()
> nameEx("MartinRatio")
> ### * MartinRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MartinRatio
> ### Title: Martin ratio of the return distribution
> ### Aliases: MartinRatio
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> print(MartinRatio(portfolio_bacon[,1])) #expected 1.70
            portfolio.monthly.return....
Ulcer Index                      1.70772
> 
> data(managers)
> print(MartinRatio(managers['1996']))
                          HAM1     HAM2     HAM3     HAM4 HAM5 HAM6 EDHEC LS EQ
Martin Ratio (Rf = 0) 15.49888 16390.63 19.24429 13.67313   NA   NA          NA
                      SP500 TR  US 10Y TR US 3m TR
Martin Ratio (Rf = 0) 14.81878 0.01003279      Inf
> print(MartinRatio(managers['1996',1])) 
                HAM1
Ulcer Index 15.49888
> 
> 
> 
> 
> cleanEx()
> nameEx("MeanAbsoluteDeviation")
> ### * MeanAbsoluteDeviation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MeanAbsoluteDeviation
> ### Title: Mean absolute deviation of the return distribution
> ### Aliases: MeanAbsoluteDeviation
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> print(MeanAbsoluteDeviation(portfolio_bacon[,1])) #expected 0.0310
[1] 0.03108333
> 
> data(managers)
> print(MeanAbsoluteDeviation(managers['1996']))
                             HAM1     HAM2       HAM3       HAM4 HAM5 HAM6
Mean absolute deviation 0.0125375 0.031576 0.02229444 0.02540972  NaN  NaN
                        EDHEC LS EQ SP500 TR  US 10Y TR US 3m TR
Mean absolute deviation         NaN  0.02225 0.01611653  0.00021
> print(MeanAbsoluteDeviation(managers['1996',1]))
[1] 0.0125375
> 
> 
> 
> 
> cleanEx()
> nameEx("MinTrackRecord")
> ### * MinTrackRecord
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MinTrackRecord
> ### Title: Minimum Track Record Length
> ### Aliases: MinTrackRecord
> 
> ### ** Examples
> 
> 
> data(edhec)
> MinTrackRecord(edhec[,1],refSR = 0.23) 
$min_TRL
                                       Convertible Arbitrage (SR > 0.23 )
Minimum Track Record Length (p= 95 %):                           457.7379

$IS_SR_SIGNIFICANT
[1] FALSE

$num_of_extra_obs_needed
[1] 183

> MinTrackRecord(refSR = 1/12^0.5,Rf = 0,p=0.95,sr = 2/12^0.5,sk=-0.72,kr=5.78,n=59)
$min_TRL
[1] 52.37369

$IS_SR_SIGNIFICANT
[1] TRUE

$num_of_extra_obs_needed
[1] 0

> 
> ### Higher moments are data intensive, kurtosis shouldn't be used for short timeseries
> MinTrackRecord(edhec[,1:2],refSR = c(0.28,0.24), ignore_skewness = FALSE, ignore_kurtosis = FALSE)
Warning in MinTrackRecord(edhec[, 1:2], refSR = c(0.28, 0.24), ignore_skewness = FALSE,  :
  The Reference Sharpe Ratio greater than the Observed Sharpe Ratio for the returns of:  NA 

$min_TRL
[1] 2081.282

$IS_SR_SIGNIFICANT
[1] FALSE FALSE

$num_of_extra_obs_needed
[1] 1807 1807

> MinTrackRecord(edhec[,1:2],refSR = c(0.28,0.24), ignore_skewness = FALSE, ignore_kurtosis = TRUE)
Warning in MinTrackRecord(edhec[, 1:2], refSR = c(0.28, 0.24), ignore_skewness = FALSE,  :
  The Reference Sharpe Ratio greater than the Observed Sharpe Ratio for the returns of:  NA 

$min_TRL
[1] 1597.195 1597.195

$IS_SR_SIGNIFICANT
[1] FALSE FALSE

$num_of_extra_obs_needed
[1] 1323 1323

> MinTrackRecord(edhec[,1:2],refSR = c(0.28,0.24), ignore_skewness = TRUE, ignore_kurtosis = TRUE)
Warning in MinTrackRecord(edhec[, 1:2], refSR = c(0.28, 0.24), ignore_skewness = TRUE,  :
  The Reference Sharpe Ratio greater than the Observed Sharpe Ratio for the returns of:  NA 

$min_TRL
[1] 865.6524 865.6524

$IS_SR_SIGNIFICANT
[1] FALSE FALSE

$num_of_extra_obs_needed
[1] 591 591

> 
> MinTrackRecord(edhec[,1:2],refSR = 0.26,weights = c(0.5,0.5), 
+                ignore_skewness = FALSE, ignore_kurtosis = FALSE)
$min_TRL
                                       portfolio.returns (SR > 0.26 )
Minimum Track Record Length (p= 95 %):                       334.9625

$IS_SR_SIGNIFICANT
[1] FALSE

$num_of_extra_obs_needed
[1] 60

> 
> 
> 
> 
> cleanEx()
> nameEx("Modigliani")
> ### * Modigliani
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Modigliani
> ### Title: Modigliani-Modigliani measure
> ### Aliases: Modigliani
> 
> ### ** Examples
> 
> 
> data(managers)
> Modigliani(managers[,1,drop=FALSE], managers[,8,drop=FALSE], Rf=.035/12)
[1] 0.01678381
> Modigliani(managers[,1:6], managers[,8,drop=FALSE], managers[,8,drop=FALSE])
                                              HAM1       HAM2      HAM3
Modigliani-Modigliani measure: SP500 TR 0.01281799 0.01505458 0.0131509
                                              HAM4       HAM5       HAM6
Modigliani-Modigliani measure: SP500 TR 0.01057959 0.01053081 0.01844616
> Modigliani(managers[,1:6], managers[,8:7], managers[,8,drop=FALSE])
                                                 HAM1       HAM2       HAM3
Modigliani-Modigliani measure: SP500 TR    0.01281799 0.01505458 0.01315090
Modigliani-Modigliani measure: EDHEC LS EQ 0.01062640 0.01168261 0.01078361
                                                 HAM4        HAM5       HAM6
Modigliani-Modigliani measure: SP500 TR    0.01057959 0.010530812 0.01844616
Modigliani-Modigliani measure: EDHEC LS EQ 0.00956933 0.009546295 0.01328426
> 
> 
> 
> 
> cleanEx()
> nameEx("NetSelectivity")
> ### * NetSelectivity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NetSelectivity
> ### Title: Net selectivity of the return distribution
> ### Aliases: NetSelectivity
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(NetSelectivity(portfolio_bacon[,1], portfolio_bacon[,2])) #expected -0.017
                             portfolio.monthly.return....
portfolio.monthly.return....                   -0.0178912
> 
> data(managers)
> print(NetSelectivity(managers['1996',1], managers['1996',8]))
           HAM1
HAM1 0.01333906
> print(NetSelectivity(managers['1996',1:5], managers['1996',8]))
                                      HAM1 HAM2      HAM3        HAM4 HAM5
Net Selectivity (Risk free = 0) 0.01333906   NA 0.1745397 -0.03249043   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("Omega")
> ### * Omega
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Omega
> ### Title: calculate Omega for a return series
> ### Aliases: Omega
> 
> ### ** Examples
> 
> 
>     data(edhec)
>     Omega(edhec)
               Convertible Arbitrage CTA Global Distressed Securities
Omega (L = 0%)               2.79388   1.573902              2.794442
               Emerging Markets Equity Market Neutral Event Driven
Omega (L = 0%)         1.700861              4.499562     2.636198
               Fixed Income Arbitrage Global Macro Long/Short Equity
Omega (L = 0%)               3.312118     2.834636          2.253459
               Merger Arbitrage Relative Value Short Selling Funds of Funds
Omega (L = 0%)         4.203125       3.809174     0.8914069       2.140616
>     Omega(edhec[,13],method="interp",output="point")
               Funds of Funds
Omega (L = 0%)       5.059274
>     Omega(edhec[,13],method="interp",output="full")
        Funds of Funds
-0.0618    274.0000000
-0.0618    274.0000000
-0.0616    205.2500000
-0.06      156.1428571
-0.0272    113.5833333
-0.0269     85.8421053
-0.0266     70.2962963
-0.0264     60.1111111
-0.0262     51.6595745
-0.0252     45.6101695
-0.0222     41.0138889
-0.0205     37.3720930
-0.0202     34.3960396
-0.0192     31.9059829
-0.0176     29.7835821
-0.0163     27.9473684
-0.0156     26.3391813
-0.0149     24.9162304
-0.0148     23.6462264
-0.0142     22.5042735
-0.0141     21.4708171
-0.014      20.4539007
-0.0138     19.5357143
-0.0133     18.6428571
-0.0127     17.8356164
-0.0126     17.1012658
-0.0122     16.4295775
-0.0119     15.8122271
-0.0116     15.2423625
-0.0108     14.7142857
-0.0104     14.2232143
-0.0099     13.7651007
-0.0095     13.3364929
-0.0093     12.9344262
-0.0089     12.5563380
-0.0083     12.2000000
-0.0082     11.8634640
-0.0079     11.5450180
-0.0077     11.2431507
-0.0074     10.9565217
-0.0072     10.6839378
-0.0071     10.4130435
-0.007      10.1556604
-0.0069      9.9107304
-0.0068      9.6497418
-0.0063      9.3944125
-0.0062      9.1531815
-0.0059      8.9248120
-0.0054      8.7082133
-0.0049      8.5024188
-0.0044      8.3003979
-0.004       8.1024825
-0.0037      7.8980464
-0.0036      7.6994728
-0.0034      7.5115363
-0.0033      7.3198271
-0.0031      7.1386293
-0.0028      6.9670330
-0.0027      6.8042328
-0.0025      6.6495132
-0.0022      6.4988824
-0.0021      6.3554789
-0.0018      6.2187500
-0.0015      6.0881998
-0.0012      5.9633814
-0.001       5.8438914
-9e-04       5.7293645
-7e-04       5.6171267
-6e-04       5.5094340
-5e-04       5.4059900
-4e-04       5.3065245
-3e-04       5.2107905
-2e-04       5.1185614
1e-04        5.0296296
6e-04        4.9420916
8e-04        4.8576233
9e-04        4.7760502
0.0013       4.6941864
0.0015       4.6151460
0.0017       4.5387714
0.0018       4.4635762
0.0019       4.3908678
0.0021       4.3192729
0.0022       4.2476147
0.0024       4.1783341
0.0025       4.1101988
0.0026       4.0442758
0.0028       3.9804487
0.003        3.9186093
0.0031       3.8586572
0.0032       3.8004988
0.0033       3.7440465
0.0034       3.6883593
0.0035       3.6342775
0.0037       3.5801192
0.0039       3.5267490
0.004        3.4741697
0.0041       3.4223827
0.0043       3.3713873
0.0046       3.3218608
0.005        3.2737344
0.0051       3.2269439
0.0052       3.1808118
0.0053       3.1359364
0.0057       3.0922619
0.0058       3.0497360
0.0059       3.0083095
0.006        2.9679359
0.0064       2.9285714
0.0066       2.8896747
0.0067       2.8517350
0.0068       2.8137692
0.0069       2.7762790
0.007        2.7397113
0.0071       2.7035953
0.0072       2.6683533
0.0073       2.6335404
0.0075       2.5991571
0.0076       2.5652032
0.0077       2.5320561
0.0078       2.4996845
0.0079       2.4680587
0.008        2.4364523
0.0082       2.4052327
0.0083       2.3743987
0.0085       2.3442718
0.0086       2.3148254
0.0088       2.2860344
0.0089       2.2578749
0.009        2.2297407
0.0091       2.2019376
0.0092       2.1747420
0.0093       2.1481322
0.0094       2.1220876
0.0095       2.0963303
0.0096       2.0708597
0.0097       2.0454288
0.0099       2.0202945
0.0104       1.9956897
0.0106       1.9713668
0.0108       1.9475485
0.0109       1.9239985
0.0111       1.9009295
0.0113       1.8781161
0.0114       1.8555571
0.0119       1.8334510
0.0121       1.8115871
0.0125       1.7899644
0.0126       1.7687682
0.0127       1.7479848
0.013        1.7276012
0.0131       1.7076046
0.0133       1.6879831
0.0134       1.6683889
0.0136       1.6491610
0.0137       1.6302882
0.0139       1.6117597
0.014        1.5935653
0.0142       1.5756951
0.0145       1.5581395
0.0147       1.5407437
0.0148       1.5236504
0.0152       1.5068508
0.0153       1.4903368
0.0156       1.4741003
0.0157       1.4581336
0.016        1.4424294
0.0163       1.4268530
0.0164       1.4115297
0.0169       1.3964527
0.0171       1.3812538
0.0172       1.3663015
0.0175       1.3515891
0.0185       1.3371105
0.0191       1.3228593
0.0199       1.3088298
0.0202       1.2950163
0.0204       1.2814131
0.0205       1.2679106
0.0206       1.2546117
0.0209       1.2415113
0.0213       1.2286045
0.0219       1.2158866
0.022        1.2033529
0.0222       1.1909991
0.0223       1.1788209
0.0225       1.1668141
0.0233       1.1549748
0.0244       1.1432990
0.0256       1.1317829
0.0267       1.1204231
0.0275       1.1092158
0.0282       1.0981578
0.0286       1.0872457
0.0303       1.0764763
0.0311       1.0658465
0.0312       1.0553532
0.0317       1.0449936
0.0334       1.0347648
0.0373       1.0246641
0.04         1.0146887
0.0435       1.0048361
0.0483       0.9951038
0.0622       0.9854893
0.0666       0.9759902
> 
> 
> 
> 
> cleanEx()
> nameEx("OmegaExcessReturn")
> ### * OmegaExcessReturn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: OmegaExcessReturn
> ### Title: Omega excess return of the return distribution
> ### Aliases: OmegaExcessReturn OmegaExessReturn
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> MAR = 0.005
> print(OmegaExcessReturn(portfolio_bacon[,1], portfolio_bacon[,2], MAR)) #expected 0.0805
           [,1]
[1,] 0.08053795
> 
> data(managers)
> MAR = 0
> print(OmegaExcessReturn(managers['1996',1], managers['1996',8], MAR))
          [,1]
[1,] 0.1325302
> print(OmegaExcessReturn(managers['1996',1:5], managers['1996',8], MAR))
                                   HAM1 HAM2      HAM3      HAM4 HAM5
Omega Excess Return (MAR = 0) 0.1325302   NA 0.3991416 0.1985718   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("OmegaSharpeRatio")
> ### * OmegaSharpeRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: OmegaSharpeRatio
> ### Title: Omega-Sharpe ratio of the return distribution
> ### Aliases: OmegaSharpeRatio
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> MAR = 0.005
> print(OmegaSharpeRatio(portfolio_bacon[,1], MAR)) #expected 0.29
          [,1]
[1,] 0.2917933
> 
> MAR = 0
> data(managers)
> print(OmegaSharpeRatio(managers['1996'], MAR))
                                HAM1 HAM2     HAM3     HAM4 HAM5 HAM6
OmegaSharpeRatio (MAR = 0%) 3.598338 2374 5.482813 2.615074   NA   NA
                            EDHEC LS EQ SP500 TR  US 10Y TR US 3m TR
OmegaSharpeRatio (MAR = 0%)          NA 3.340625 0.02827709      Inf
> print(OmegaSharpeRatio(managers['1996',1], MAR)) #expected 3.60
         [,1]
[1,] 3.598338
> 
> 
> 
> 
> cleanEx()
> nameEx("PainIndex")
> ### * PainIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PainIndex
> ### Title: Pain index of the return distribution
> ### Aliases: PainIndex
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> print(PainIndex(portfolio_bacon[,1])) #expected 0.04
           portfolio.monthly.return....
Pain Index                    0.0390113
> 
> data(managers)
> print(PainIndex(100*managers['1996']))
                HAM1  HAM2      HAM3      HAM4 HAM5 HAM6 EDHEC LS EQ  SP500 TR
Pain Index 0.3714087 0.002 0.9421759 0.7421641  NaN  NaN         NaN 0.7336052
           US 10Y TR US 3m TR
Pain Index  3.697961        0
> print(PainIndex(100*managers['1996',1])) 
                HAM1
Pain Index 0.3714087
> 
> 
> 
> 
> cleanEx()
> nameEx("PainRatio")
> ### * PainRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PainRatio
> ### Title: Pain ratio of the return distribution
> ### Aliases: PainRatio
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> print(PainRatio(portfolio_bacon[,1])) #expected 2.66
           portfolio.monthly.return....
Pain Index                     2.657647
> 
> data(managers)
> print(PainRatio(managers['1996']))
                       HAM1     HAM2     HAM3     HAM4 HAM5 HAM6 EDHEC LS EQ
Pain Ratio (Rf = 0) 36.7226 36650.56 43.38967 28.17458   NA   NA          NA
                    SP500 TR  US 10Y TR US 3m TR
Pain Ratio (Rf = 0) 31.62377 0.01188003      Inf
> print(PainRatio(managers['1996',1])) 
              HAM1
Pain Index 36.7226
> 
> 
> 
> 
> cleanEx()
> nameEx("ProbSharpeRatio")
> ### * ProbSharpeRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ProbSharpeRatio
> ### Title: Probabilistic Sharpe Ratio
> ### Aliases: ProbSharpeRatio
> 
> ### ** Examples
> 
> 
> data(edhec)
> ProbSharpeRatio(edhec[,1],refSR = 0.23) 
$sr_prob
                                     Convertible Arbitrage (SR > 0.23 )
Probabilistic Sharpe Ratio(p= 95 %):                          0.8986681

$sr_confidence_interval
                      Lower Bound Sharpe Ratio Upper Bound
Convertible Arbitrage      0.1987       0.3375      0.4763

> ProbSharpeRatio(refSR = 1/12^0.5,Rf = 0,p=0.95,sr = 2/12^0.5,sk=-0.72,kr=5.78,n=59)
$sr_prob
[1] 0.9597434

$sr_confidence_interval
  Lower Bound Sharpe Ratio Upper Bound
1      0.3057       0.5774       0.849

> 
> ### Higher moments are data intensive, kurtosis shouldn't be used for short timeseries
> ProbSharpeRatio(edhec[,1:2],refSR = c(0.28,0.24), ignore_skewness = FALSE, ignore_kurtosis = FALSE)
Warning in ProbSharpeRatio(edhec[, 1:2], refSR = c(0.28, 0.24), ignore_skewness = FALSE,  :
  The Reference Sharpe Ratio greater than the Observed Sharpe Ratio for the returns of:  NA 

$sr_prob
[1] 0.7247312

$sr_confidence_interval
  Lower Bound Sharpe Ratio Upper Bound
1       0.179       0.3375       0.496

> ProbSharpeRatio(edhec[,1:2],refSR = c(0.28,0.24), ignore_skewness = FALSE, ignore_kurtosis = TRUE)
Warning in ProbSharpeRatio(edhec[, 1:2], refSR = c(0.28, 0.24), ignore_skewness = FALSE,  :
  The Reference Sharpe Ratio greater than the Observed Sharpe Ratio for the returns of:  NA 

$sr_prob
[1] 0.7522193 0.7522193

$sr_confidence_interval
  Lower Bound Sharpe Ratio Upper Bound     NA     NA
1      0.1987       0.1987      0.3375 0.4763 0.4763

> ProbSharpeRatio(edhec[,1:2],refSR = c(0.28,0.24), ignore_skewness = TRUE, ignore_kurtosis = TRUE)
Warning in ProbSharpeRatio(edhec[, 1:2], refSR = c(0.28, 0.24), ignore_skewness = TRUE,  :
  The Reference Sharpe Ratio greater than the Observed Sharpe Ratio for the returns of:  NA 

$sr_prob
[1] 0.8227608 0.8227608

$sr_confidence_interval
  Lower Bound Sharpe Ratio Upper Bound     NA     NA
1      0.2353       0.2353      0.3375 0.4397 0.4397

> 
> ProbSharpeRatio(edhec[,1:2],refSR = 0.26,weights = c(0.5,0.5), 
+                 ignore_skewness = FALSE, ignore_kurtosis = FALSE)
$sr_prob
                                     portfolio.returns (SR > 0.26 )
Probabilistic Sharpe Ratio(p= 95 %):                      0.9318732

$sr_confidence_interval
                  Lower Bound Sharpe Ratio Upper Bound
portfolio.returns      0.2495       0.3608       0.472

> 
> 
> 
> 
> cleanEx()
> nameEx("ProspectRatio")
> ### * ProspectRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ProspectRatio
> ### Title: Prospect ratio of the return distribution
> ### Aliases: ProspectRatio
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> MAR = 0.05
> print(ProspectRatio(portfolio_bacon[,1], MAR)) #expected -0.134
           [,1]
[1,] -0.1347065
> 
> data(managers)
> MAR = 0
> print(ProspectRatio(managers['1996'], MAR))
                               HAM1     HAM2     HAM3      HAM4 HAM5 HAM6
Prospect ratio (MAR = 0%) 0.9737463 442.1359 1.725605 0.5960639   NA   NA
                          EDHEC LS EQ  SP500 TR  US 10Y TR US 3m TR
Prospect ratio (MAR = 0%)          NA 0.7975008 -0.7234556      Inf
> print(ProspectRatio(managers['1996',1], MAR))
          [,1]
[1,] 0.9737463
> 
> 
> 
> 
> cleanEx()
> nameEx("RPESE.control")
> ### * RPESE.control
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RPESE.control
> ### Title: Controls Function for the Computation of Standard Errors for
> ###   Risk and Performance estimators
> ### Aliases: RPESE.control
> 
> ### ** Examples
> 
> # Case where we want the default parameters for the ES
> ES.control <- RPESE.control(estimator="ES")
> # Case where we also set additional parameters manually
> ES.control.2 <- RPESE.control(estimator="ES", se.method=c("IFcor", "BOOTiid"),
+                               cleanOutliers=TRUE, freq.include="Decimate")
> # These lists can be passed onto the functions (e.g., ES) to control the parameters
> # for computing and returning standard errors.
> 
> 
> 
> 
> cleanEx()
> nameEx("RachevRatio")
> ### * RachevRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RachevRatio
> ### Title: Standard Error Estimate for Rachev Ratio of Returns
> ### Aliases: RachevRatio
> 
> ### ** Examples
> 
> # Loading data from PerformanceAnalytics
> data(edhec, package = "PerformanceAnalytics")
> class(edhec)
[1] "xts" "zoo"
> # Changing the data colnames
> names(edhec) = c("CA", "CTA", "DIS", "EM", "EMN",
+                  "ED", "FIA", "GM", "LS", "MA",
+                  "RV", "SS", "FOF")
> # Compute Rachev ratio for managers data
> RachevRatio(edhec)
                  CA      CTA      DIS       EM      EMN       ED      FIA
RachevRatio 1.197104 1.321245 1.192859 1.006934 1.515148 1.088371 1.060762
                  GM       LS       MA       RV      SS      FOF
RachevRatio 2.042855 1.219365 1.487931 1.242879 1.13534 1.242028
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.Geltner")
> ### * Return.Geltner
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.Geltner
> ### Title: calculate Geltner liquidity-adjusted return series
> ### Aliases: Return.Geltner
> 
> ### ** Examples
> 
> 
> data(managers)
> head(Return.Geltner(managers[,1:3]),n=20)
                   HAM1          HAM2         HAM3
1996-01-31           NA            NA           NA
1996-02-29  0.022073985            NA  0.035101421
1996-03-31  0.014614190            NA  0.025733921
1996-04-30 -0.014834456            NA  0.045035710
1996-05-31  0.011492903            NA  0.035231790
1996-06-30 -0.006580742            NA -0.030766102
1996-07-31 -0.027575673            NA -0.033724158
1996-08-31  0.054092559            NA  0.046666996
1996-09-30  0.008918922  0.1248798328  0.065436420
1996-10-31  0.032086822  0.0174616062  0.039316685
1996-11-30  0.012522975  0.0835177999  0.066792551
1996-12-31  0.018066216  0.0189979595  0.021078844
1997-01-31  0.022039189  0.0916045833  0.077495761
1997-02-28 -0.002229051 -0.0297548689 -0.038213548
1997-03-31  0.011078377 -0.0315013248 -0.033573000
1997-04-30  0.013345946 -0.0009819489  0.029041945
1997-05-31  0.051072969  0.0686636088  0.076236077
1997-06-30  0.018274665  0.0555198782  0.004899082
1997-07-31  0.013605069  0.1297143968  0.108829706
1997-08-31  0.025634796 -0.0528443018 -0.003587969
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.annualized")
> ### * Return.annualized
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.annualized
> ### Title: calculate an annualized return for comparing instruments with
> ###   different length history
> ### Aliases: Return.annualized
> 
> ### ** Examples
> 
> 
> data(managers)
> Return.annualized(managers[,1,drop=FALSE])
                      HAM1
Annualized Return 0.137532
> Return.annualized(managers[,1:8])
                      HAM1      HAM2      HAM3      HAM4       HAM5      HAM6
Annualized Return 0.137532 0.1746569 0.1512147 0.1214798 0.03731645 0.1372755
                  EDHEC LS EQ   SP500 TR
Annualized Return   0.1180134 0.09674533
> Return.annualized(managers[,1:8],geometric=FALSE)
                       HAM1      HAM2      HAM3   HAM4       HAM5      HAM6
Annualized Return 0.1334727 0.1697184 0.1493636 0.1322 0.04905974 0.1326563
                  EDHEC LS EQ  SP500 TR
Annualized Return     0.11454 0.1039841
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.annualized.excess")
> ### * Return.annualized.excess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.annualized.excess
> ### Title: calculates an annualized excess return for comparing instruments
> ###   with different length history
> ### Aliases: Return.annualized.excess
> 
> ### ** Examples
> 
> data(managers)
> Return.annualized.excess(Rp = managers[,1], Rb = managers[,8])
                        HAM1
Annualized Return 0.03718883
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.calculate")
> ### * Return.calculate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.calculate
> ### Title: calculate simple or compound returns from prices
> ### Aliases: Return.calculate CalculateReturns
> 
> ### ** Examples
> 
> 
>   ## Not run: 
> ##D     require(quantmod)
> ##D     prices = getSymbols("IBM", from = "1999-01-01", to = "2007-01-01")
> ##D   
> ## End(Not run)
>   ## Don't show: 
>     data(prices)
>   
> ## End(Don't show)
> R.IBM = Return.calculate(xts(prices), method="discrete")
> colnames(R.IBM)="IBM"
> chart.CumReturns(R.IBM,legend.loc="topleft", main="Cumulative Daily Returns for IBM")
> round(R.IBM,2)
             IBM
1999-01-04    NA
1999-01-05  0.04
1999-01-06  0.00
1999-01-07  0.01
1999-01-08 -0.01
1999-01-11  0.01
1999-01-12 -0.02
1999-01-13  0.00
1999-01-14 -0.03
1999-01-15  0.02
1999-01-19  0.04
1999-01-20  0.01
1999-01-21  0.01
1999-01-22 -0.09
1999-01-25  0.01
1999-01-26  0.02
1999-01-27 -0.04
1999-01-28  0.00
1999-01-29  0.03
1999-02-01 -0.02
1999-02-02 -0.02
1999-02-03 -0.01
1999-02-04 -0.03
1999-02-05 -0.02
1999-02-08  0.01
1999-02-09 -0.03
1999-02-10  0.04
1999-02-11  0.06
1999-02-12 -0.03
1999-02-16  0.00
1999-02-17 -0.01
1999-02-18  0.02
1999-02-19 -0.02
1999-02-22  0.04
1999-02-23 -0.01
1999-02-24 -0.02
1999-02-25  0.00
1999-02-26 -0.02
1999-03-01 -0.01
1999-03-02  0.00
1999-03-03 -0.01
1999-03-04  0.03
1999-03-05  0.04
1999-03-08  0.00
1999-03-09  0.02
1999-03-10  0.00
1999-03-11  0.01
1999-03-12 -0.03
1999-03-15  0.02
1999-03-16 -0.01
1999-03-17 -0.02
1999-03-18  0.00
1999-03-19 -0.05
1999-03-22 -0.01
1999-03-23 -0.01
1999-03-24  0.02
1999-03-25  0.01
1999-03-26  0.01
1999-03-29  0.03
1999-03-30  0.00
1999-03-31 -0.01
1999-04-01  0.00
1999-04-05  0.04
1999-04-06 -0.01
1999-04-07  0.02
1999-04-08  0.00
1999-04-09  0.00
1999-04-12 -0.02
1999-04-13 -0.02
1999-04-14  0.00
1999-04-15 -0.01
1999-04-16 -0.04
1999-04-19 -0.02
1999-04-20  0.02
1999-04-21  0.01
1999-04-22  0.13
1999-04-23  0.03
1999-04-26  0.05
1999-04-27  0.01
1999-04-28 -0.03
1999-04-29  0.00
1999-04-30  0.02
1999-05-03  0.01
1999-05-04  0.00
1999-05-05  0.00
1999-05-06 -0.01
1999-05-07  0.04
1999-05-10  0.01
1999-05-11  0.01
1999-05-12  0.02
1999-05-13  0.09
1999-05-14 -0.03
1999-05-17 -0.01
1999-05-18  0.00
1999-05-19 -0.01
1999-05-20 -0.01
1999-05-21 -0.01
1999-05-24 -0.03
1999-05-25 -0.01
1999-05-26  0.07
1999-05-27 -0.02
1999-05-28  0.00
1999-06-01 -0.03
1999-06-02  0.02
1999-06-03 -0.01
1999-06-04  0.03
1999-06-07  0.04
1999-06-08 -0.03
1999-06-09  0.00
1999-06-10 -0.01
1999-06-11 -0.01
1999-06-14  0.01
1999-06-15  0.00
1999-06-16  0.04
1999-06-17  0.00
1999-06-18  0.00
1999-06-21  0.03
1999-06-22 -0.01
1999-06-23  0.00
1999-06-24  0.00
1999-06-25  0.00
1999-06-28  0.00
1999-06-29  0.02
1999-06-30  0.04
1999-07-01  0.01
1999-07-02  0.01
1999-07-06 -0.01
1999-07-07  0.01
1999-07-08  0.01
1999-07-09  0.03
1999-07-12  0.00
1999-07-13  0.00
1999-07-14  0.00
1999-07-15 -0.01
1999-07-16  0.00
1999-07-19 -0.01
1999-07-20 -0.05
1999-07-21  0.01
1999-07-22 -0.04
1999-07-23  0.01
1999-07-26 -0.01
1999-07-27  0.03
1999-07-28  0.02
1999-07-29 -0.02
1999-07-30  0.00
1999-08-02 -0.03
1999-08-03 -0.02
1999-08-04 -0.01
1999-08-05  0.04
1999-08-06  0.00
1999-08-09 -0.01
1999-08-10 -0.02
1999-08-11  0.03
1999-08-12 -0.02
1999-08-13  0.02
1999-08-16  0.03
1999-08-17  0.01
1999-08-18 -0.04
1999-08-19 -0.01
1999-08-20 -0.01
1999-08-23  0.02
1999-08-24 -0.02
1999-08-25  0.00
1999-08-26  0.00
1999-08-27  0.01
1999-08-30 -0.01
1999-08-31  0.01
1999-09-01  0.02
1999-09-02 -0.01
1999-09-03  0.02
1999-09-07  0.02
1999-09-08 -0.01
1999-09-09  0.03
1999-09-10  0.00
1999-09-13 -0.02
1999-09-14  0.01
1999-09-15 -0.01
1999-09-16 -0.01
1999-09-17 -0.04
1999-09-20  0.04
1999-09-21 -0.02
1999-09-22 -0.02
1999-09-23 -0.03
1999-09-24  0.02
1999-09-27 -0.02
1999-09-28  0.00
1999-09-29 -0.03
1999-09-30  0.01
1999-10-01 -0.03
1999-10-04  0.02
1999-10-05  0.02
1999-10-06 -0.02
1999-10-07 -0.02
1999-10-08 -0.02
1999-10-11  0.01
1999-10-12 -0.04
1999-10-13 -0.04
1999-10-14  0.02
1999-10-15  0.01
1999-10-18 -0.01
1999-10-19  0.00
1999-10-20  0.00
1999-10-21 -0.15
1999-10-22  0.03
1999-10-25  0.00
1999-10-26  0.02
1999-10-27 -0.03
1999-10-28  0.02
1999-10-29  0.03
1999-11-01 -0.02
1999-11-02 -0.02
1999-11-03  0.00
1999-11-04 -0.03
1999-11-05 -0.01
1999-11-08  0.04
1999-11-09  0.00
1999-11-10  0.04
1999-11-11 -0.02
1999-11-12  0.01
1999-11-15 -0.02
1999-11-16  0.01
1999-11-17 -0.01
1999-11-18  0.05
1999-11-19  0.06
1999-11-22  0.04
1999-11-23 -0.02
1999-11-24 -0.01
1999-11-26  0.00
1999-11-29 -0.01
1999-11-30 -0.01
1999-12-01  0.00
1999-12-02  0.02
1999-12-03  0.06
1999-12-06  0.04
1999-12-07  0.01
1999-12-08  0.01
1999-12-09 -0.04
1999-12-10 -0.04
1999-12-13  0.01
1999-12-14  0.00
1999-12-15 -0.02
1999-12-16  0.02
1999-12-17  0.01
1999-12-20 -0.01
1999-12-21  0.01
1999-12-22 -0.02
1999-12-23  0.01
1999-12-27  0.01
1999-12-28  0.00
1999-12-29 -0.01
1999-12-30  0.00
1999-12-31 -0.01
2000-01-03  0.08
2000-01-04 -0.03
2000-01-05  0.04
2000-01-06 -0.02
2000-01-07  0.00
2000-01-10  0.04
2000-01-11  0.01
2000-01-12  0.00
2000-01-13 -0.01
2000-01-14  0.01
2000-01-18 -0.03
2000-01-19  0.03
2000-01-20  0.00
2000-01-21  0.02
2000-01-24  0.00
2000-01-25 -0.02
2000-01-26 -0.02
2000-01-27 -0.03
2000-01-28 -0.02
2000-01-31  0.01
2000-02-01 -0.02
2000-02-02  0.03
2000-02-03  0.03
2000-02-04 -0.01
2000-02-07 -0.01
2000-02-08  0.04
2000-02-09 -0.01
2000-02-10  0.01
2000-02-11 -0.03
2000-02-14  0.01
2000-02-15  0.01
2000-02-16 -0.01
2000-02-17  0.01
2000-02-18 -0.04
2000-02-22 -0.01
2000-02-23 -0.02
2000-02-24  0.02
2000-02-25 -0.02
2000-02-28 -0.03
2000-02-29 -0.02
2000-03-01 -0.02
2000-03-02  0.03
2000-03-03  0.05
2000-03-06 -0.05
2000-03-07  0.00
2000-03-08  0.03
2000-03-09  0.02
2000-03-10 -0.03
2000-03-13  0.02
2000-03-14  0.01
2000-03-15 -0.01
2000-03-16  0.02
2000-03-17  0.01
2000-03-20  0.03
2000-03-21  0.01
2000-03-22  0.01
2000-03-23  0.01
2000-03-24  0.05
2000-03-27  0.05
2000-03-28 -0.03
2000-03-29 -0.03
2000-03-30  0.03
2000-03-31 -0.04
2000-04-03  0.03
2000-04-04 -0.01
2000-04-05  0.03
2000-04-06 -0.02
2000-04-07  0.00
2000-04-10 -0.01
2000-04-11 -0.02
2000-04-12 -0.05
2000-04-13 -0.03
2000-04-14 -0.05
2000-04-17  0.07
2000-04-18  0.00
2000-04-19 -0.06
2000-04-20 -0.01
2000-04-24  0.02
2000-04-25  0.06
2000-04-26 -0.02
2000-04-27  0.00
2000-04-28  0.01
2000-05-01  0.00
2000-05-02 -0.01
2000-05-03 -0.03
2000-05-04  0.00
2000-05-05  0.00
2000-05-08  0.02
2000-05-09 -0.01
2000-05-10 -0.06
2000-05-11  0.01
2000-05-12  0.00
2000-05-15  0.00
2000-05-16  0.05
2000-05-17 -0.01
2000-05-18 -0.02
2000-05-19  0.00
2000-05-22  0.03
2000-05-23 -0.02
2000-05-24  0.02
2000-05-25 -0.03
2000-05-26  0.00
2000-05-30  0.04
2000-05-31 -0.03
2000-06-01 -0.01
2000-06-02  0.03
2000-06-05  0.04
2000-06-06  0.00
2000-06-07  0.08
2000-06-08 -0.01
2000-06-09  0.00
2000-06-12 -0.01
2000-06-13  0.00
2000-06-14 -0.03
2000-06-15  0.01
2000-06-16 -0.03
2000-06-19  0.06
2000-06-20 -0.03
2000-06-21 -0.02
2000-06-22 -0.02
2000-06-23  0.00
2000-06-26  0.02
2000-06-27 -0.04
2000-06-28  0.04
2000-06-29  0.00
2000-06-30 -0.04
2000-07-03  0.00
2000-07-05 -0.04
2000-07-06 -0.04
2000-07-07  0.04
2000-07-10 -0.02
2000-07-11 -0.01
2000-07-12  0.03
2000-07-13 -0.01
2000-07-14  0.00
2000-07-17  0.02
2000-07-18 -0.02
2000-07-19  0.05
2000-07-20  0.08
2000-07-21 -0.02
2000-07-24 -0.02
2000-07-25  0.00
2000-07-26 -0.02
2000-07-27  0.00
2000-07-28  0.01
2000-07-31  0.00
2000-08-01 -0.02
2000-08-02  0.03
2000-08-03  0.02
2000-08-04  0.00
2000-08-07  0.00
2000-08-08  0.02
2000-08-09  0.00
2000-08-10  0.01
2000-08-11  0.01
2000-08-14  0.02
2000-08-15 -0.01
2000-08-16  0.00
2000-08-17  0.00
2000-08-18 -0.02
2000-08-21  0.01
2000-08-22  0.00
2000-08-23  0.02
2000-08-24  0.01
2000-08-25  0.03
2000-08-28  0.02
2000-08-29  0.01
2000-08-30 -0.02
2000-08-31  0.01
2000-09-01  0.01
2000-09-05 -0.02
2000-09-06  0.00
2000-09-07  0.01
2000-09-08 -0.03
2000-09-11 -0.04
2000-09-12  0.00
2000-09-13  0.02
2000-09-14 -0.01
2000-09-15 -0.01
2000-09-18 -0.01
2000-09-19  0.01
2000-09-20  0.00
2000-09-21 -0.03
2000-09-22  0.02
2000-09-25 -0.01
2000-09-26 -0.03
2000-09-27 -0.01
2000-09-28 -0.02
2000-09-29 -0.02
2000-10-02  0.05
2000-10-03 -0.06
2000-10-04  0.03
2000-10-05 -0.01
2000-10-06  0.02
2000-10-09  0.02
2000-10-10 -0.03
2000-10-11 -0.02
2000-10-12 -0.08
2000-10-13  0.06
2000-10-16  0.02
2000-10-17  0.02
2000-10-18 -0.16
2000-10-19  0.01
2000-10-20 -0.02
2000-10-23 -0.02
2000-10-24 -0.02
2000-10-25 -0.04
2000-10-26  0.06
2000-10-27  0.01
2000-10-30  0.00
2000-10-31  0.06
2000-11-01  0.00
2000-11-02  0.03
2000-11-03 -0.02
2000-11-06  0.00
2000-11-07  0.02
2000-11-08 -0.02
2000-11-09 -0.01
2000-11-10 -0.06
2000-11-13  0.05
2000-11-14  0.02
2000-11-15  0.00
2000-11-16 -0.01
2000-11-17  0.04
2000-11-20  0.01
2000-11-21 -0.05
2000-11-22  0.00
2000-11-24  0.01
2000-11-27 -0.01
2000-11-28 -0.01
2000-11-29  0.02
2000-11-30 -0.06
2000-12-01  0.02
2000-12-04  0.03
2000-12-05  0.05
2000-12-06 -0.06
2000-12-07 -0.04
2000-12-08  0.04
2000-12-11 -0.02
2000-12-12 -0.01
2000-12-13 -0.03
2000-12-14  0.01
2000-12-15 -0.05
2000-12-18  0.03
2000-12-19  0.00
2000-12-20 -0.05
2000-12-21 -0.05
2000-12-22  0.09
2000-12-26 -0.05
2000-12-27  0.00
2000-12-28  0.01
2000-12-29  0.00
2001-01-02  0.00
2001-01-03  0.12
2001-01-04 -0.02
2001-01-05  0.01
2001-01-08  0.00
2001-01-09 -0.01
2001-01-10  0.01
2001-01-11  0.00
2001-01-12  0.00
2001-01-16 -0.01
2001-01-17  0.04
2001-01-18  0.12
2001-01-19  0.03
2001-01-22 -0.02
2001-01-23  0.00
2001-01-24  0.01
2001-01-25  0.00
2001-01-26  0.03
2001-01-29  0.01
2001-01-30  0.01
2001-01-31 -0.04
2001-02-01  0.02
2001-02-02 -0.03
2001-02-05  0.02
2001-02-06  0.02
2001-02-07  0.02
2001-02-08 -0.02
2001-02-09 -0.02
2001-02-12  0.03
2001-02-13 -0.01
2001-02-14  0.01
2001-02-15  0.01
2001-02-16 -0.02
2001-02-20 -0.03
2001-02-21 -0.04
2001-02-22  0.01
2001-02-23 -0.04
2001-02-26  0.01
2001-02-27 -0.03
2001-02-28 -0.03
2001-03-01  0.06
2001-03-02 -0.04
2001-03-05  0.03
2001-03-06  0.01
2001-03-07  0.01
2001-03-08 -0.01
2001-03-09 -0.07
2001-03-12 -0.04
2001-03-13  0.03
2001-03-14 -0.03
2001-03-15  0.01
2001-03-16 -0.06
2001-03-19  0.03
2001-03-20 -0.05
2001-03-21  0.01
2001-03-22  0.00
2001-03-23  0.05
2001-03-26  0.02
2001-03-27  0.04
2001-03-28 -0.05
2001-03-29  0.01
2001-03-30  0.01
2001-04-02 -0.02
2001-04-03 -0.05
2001-04-04  0.02
2001-04-05  0.07
2001-04-06  0.00
2001-04-09 -0.02
2001-04-10  0.03
2001-04-11 -0.02
2001-04-12 -0.01
2001-04-16  0.01
2001-04-17  0.03
2001-04-18  0.07
2001-04-19  0.07
2001-04-20  0.00
2001-04-23 -0.02
2001-04-24  0.01
2001-04-25  0.02
2001-04-26 -0.01
2001-04-27  0.02
2001-04-30 -0.01
2001-05-01  0.03
2001-05-02 -0.03
2001-05-03 -0.01
2001-05-04  0.02
2001-05-07  0.00
2001-05-08  0.02
2001-05-09 -0.01
2001-05-10 -0.02
2001-05-11 -0.03
2001-05-14  0.01
2001-05-15  0.01
2001-05-16  0.02
2001-05-17 -0.01
2001-05-18  0.02
2001-05-21  0.01
2001-05-22 -0.01
2001-05-23 -0.01
2001-05-24  0.02
2001-05-25 -0.02
2001-05-29 -0.02
2001-05-30 -0.02
2001-05-31 -0.01
2001-06-01  0.01
2001-06-04  0.01
2001-06-05  0.03
2001-06-06  0.00
2001-06-07  0.00
2001-06-08 -0.01
2001-06-11  0.01
2001-06-12  0.00
2001-06-13 -0.01
2001-06-14 -0.01
2001-06-15 -0.02
2001-06-18  0.01
2001-06-19  0.01
2001-06-20 -0.02
2001-06-21  0.00
2001-06-22  0.00
2001-06-25  0.00
2001-06-26  0.00
2001-06-27  0.00
2001-06-28  0.01
2001-06-29 -0.01
2001-07-02  0.01
2001-07-03 -0.01
2001-07-05 -0.01
2001-07-06 -0.05
2001-07-09 -0.02
2001-07-10 -0.03
2001-07-11  0.02
2001-07-12  0.03
2001-07-13  0.01
2001-07-16 -0.01
2001-07-17  0.01
2001-07-18 -0.04
2001-07-19  0.00
2001-07-20  0.02
2001-07-23  0.00
2001-07-24 -0.01
2001-07-25  0.00
2001-07-26  0.01
2001-07-27 -0.01
2001-07-30  0.01
2001-07-31 -0.01
2001-08-01  0.02
2001-08-02  0.02
2001-08-03 -0.01
2001-08-06 -0.02
2001-08-07  0.00
2001-08-08 -0.02
2001-08-09  0.00
2001-08-10  0.01
2001-08-13  0.01
2001-08-14  0.00
2001-08-15 -0.01
2001-08-16  0.01
2001-08-17 -0.01
2001-08-20  0.00
2001-08-21 -0.02
2001-08-22  0.02
2001-08-23 -0.01
2001-08-24  0.04
2001-08-27  0.00
2001-08-28 -0.02
2001-08-29 -0.01
2001-08-30 -0.04
2001-08-31  0.00
2001-09-04  0.02
2001-09-05 -0.01
2001-09-06 -0.02
2001-09-07 -0.01
2001-09-10  0.00
2001-09-17 -0.03
2001-09-18  0.03
2001-09-19  0.00
2001-09-20 -0.03
2001-09-21 -0.03
2001-09-24  0.05
2001-09-25  0.00
2001-09-26 -0.03
2001-09-27 -0.01
2001-09-28  0.02
2001-10-01  0.01
2001-10-02  0.01
2001-10-03  0.03
2001-10-04  0.00
2001-10-05  0.01
2001-10-08  0.00
2001-10-09 -0.01
2001-10-10  0.00
2001-10-11  0.02
2001-10-12  0.01
2001-10-15  0.01
2001-10-16  0.00
2001-10-17  0.01
2001-10-18 -0.02
2001-10-19  0.01
2001-10-22  0.03
2001-10-23  0.01
2001-10-24  0.03
2001-10-25  0.02
2001-10-26  0.00
2001-10-29 -0.02
2001-10-30  0.00
2001-10-31 -0.01
2001-11-01  0.02
2001-11-02  0.00
2001-11-05  0.00
2001-11-06  0.03
2001-11-07  0.00
2001-11-08  0.00
2001-11-09  0.00
2001-11-12  0.01
2001-11-13  0.02
2001-11-14 -0.02
2001-11-15  0.00
2001-11-16  0.00
2001-11-19  0.00
2001-11-20  0.00
2001-11-21 -0.01
2001-11-23  0.01
2001-11-26  0.01
2001-11-27 -0.02
2001-11-28 -0.02
2001-11-29  0.02
2001-11-30  0.01
2001-12-03 -0.01
2001-12-04  0.02
2001-12-05  0.04
2001-12-06 -0.01
2001-12-07  0.00
2001-12-10 -0.01
2001-12-11  0.02
2001-12-12  0.01
2001-12-13 -0.02
2001-12-14  0.01
2001-12-17  0.00
2001-12-18  0.01
2001-12-19  0.01
2001-12-20 -0.01
2001-12-21 -0.01
2001-12-24  0.00
2001-12-26  0.01
2001-12-27  0.01
2001-12-28  0.00
2001-12-31 -0.02
2002-01-02  0.00
2002-01-03  0.02
2002-01-04  0.02
2002-01-07 -0.01
2002-01-08  0.01
2002-01-09  0.00
2002-01-10 -0.02
2002-01-11 -0.01
2002-01-14 -0.02
2002-01-15  0.01
2002-01-16 -0.01
2002-01-17  0.02
2002-01-18 -0.05
2002-01-22 -0.03
2002-01-23 -0.02
2002-01-24  0.01
2002-01-25  0.01
2002-01-28 -0.01
2002-01-29 -0.05
2002-01-30  0.02
2002-01-31  0.02
2002-02-01  0.00
2002-02-04 -0.01
2002-02-05  0.00
2002-02-06  0.00
2002-02-07 -0.03
2002-02-08  0.01
2002-02-11  0.02
2002-02-12 -0.01
2002-02-13  0.01
2002-02-14  0.00
2002-02-15 -0.05
2002-02-19 -0.02
2002-02-20 -0.02
2002-02-21 -0.03
2002-02-22  0.02
2002-02-25  0.00
2002-02-26 -0.01
2002-02-27  0.01
2002-02-28  0.00
2002-03-01  0.05
2002-03-04  0.03
2002-03-05  0.00
2002-03-06  0.01
2002-03-07 -0.02
2002-03-08  0.01
2002-03-11  0.00
2002-03-12  0.03
2002-03-13 -0.01
2002-03-14 -0.01
2002-03-15  0.00
2002-03-18  0.00
2002-03-19  0.01
2002-03-20 -0.02
2002-03-21  0.01
2002-03-22 -0.01
2002-03-25 -0.02
2002-03-26 -0.01
2002-03-27  0.00
2002-03-28  0.01
2002-04-01 -0.01
2002-04-02 -0.02
2002-04-03 -0.01
2002-04-04  0.01
2002-04-05 -0.04
2002-04-08 -0.10
2002-04-09  0.00
2002-04-10  0.01
2002-04-11 -0.05
2002-04-12  0.02
2002-04-15  0.00
2002-04-16  0.01
2002-04-17 -0.02
2002-04-18  0.05
2002-04-19  0.00
2002-04-22 -0.01
2002-04-23 -0.01
2002-04-24 -0.01
2002-04-25  0.00
2002-04-26 -0.02
2002-04-29 -0.01
2002-04-30  0.00
2002-05-01  0.01
2002-05-02 -0.01
2002-05-03 -0.02
2002-05-06 -0.07
2002-05-07  0.01
2002-05-08  0.08
2002-05-09 -0.03
2002-05-10  0.00
2002-05-13  0.03
2002-05-14  0.04
2002-05-15 -0.01
2002-05-16  0.01
2002-05-17  0.00
2002-05-20 -0.01
2002-05-21 -0.01
2002-05-22  0.01
2002-05-23  0.00
2002-05-24 -0.01
2002-05-28 -0.01
2002-05-29 -0.01
2002-05-30  0.01
2002-05-31 -0.02
2002-06-03 -0.03
2002-06-04  0.02
2002-06-05  0.02
2002-06-06 -0.01
2002-06-07 -0.02
2002-06-10 -0.02
2002-06-11 -0.02
2002-06-12 -0.01
2002-06-13  0.01
2002-06-14  0.01
2002-06-17  0.01
2002-06-18 -0.02
2002-06-19 -0.03
2002-06-20 -0.02
2002-06-21 -0.04
2002-06-24  0.01
2002-06-25 -0.02
2002-06-26  0.02
2002-06-27  0.03
2002-06-28  0.00
2002-07-01 -0.06
2002-07-02  0.01
2002-07-03  0.03
2002-07-05  0.04
2002-07-08 -0.03
2002-07-09 -0.02
2002-07-10 -0.01
2002-07-11  0.01
2002-07-12  0.00
2002-07-15  0.03
2002-07-16 -0.03
2002-07-17  0.02
2002-07-18  0.02
2002-07-19  0.00
2002-07-22 -0.05
2002-07-23 -0.02
2002-07-24  0.04
2002-07-25  0.00
2002-07-26 -0.04
2002-07-29  0.07
2002-07-30  0.01
2002-07-31 -0.02
2002-08-01 -0.03
2002-08-02 -0.01
2002-08-05 -0.03
2002-08-06  0.03
2002-08-07  0.02
2002-08-08  0.04
2002-08-09  0.00
2002-08-12  0.00
2002-08-13  0.00
2002-08-14  0.04
2002-08-15  0.02
2002-08-16  0.04
2002-08-19  0.04
2002-08-20 -0.01
2002-08-21  0.00
2002-08-22  0.01
2002-08-23 -0.02
2002-08-26 -0.01
2002-08-27 -0.02
2002-08-28 -0.02
2002-08-29  0.01
2002-08-30 -0.02
2002-09-03 -0.04
2002-09-04  0.02
2002-09-05 -0.02
2002-09-06  0.01
2002-09-09  0.02
2002-09-10  0.01
2002-09-11 -0.02
2002-09-12 -0.03
2002-09-13  0.01
2002-09-16  0.00
2002-09-17 -0.01
2002-09-18 -0.03
2002-09-19 -0.07
2002-09-20 -0.01
2002-09-23 -0.01
2002-09-24 -0.06
2002-09-25  0.05
2002-09-26 -0.02
2002-09-27 -0.03
2002-09-30 -0.03
2002-10-01  0.05
2002-10-02 -0.03
2002-10-03  0.01
2002-10-04 -0.06
2002-10-07  0.00
2002-10-08  0.00
2002-10-09 -0.03
2002-10-10  0.05
2002-10-11  0.11
2002-10-14 -0.01
2002-10-15  0.08
2002-10-16 -0.05
2002-10-17  0.11
2002-10-18  0.03
2002-10-21  0.02
2002-10-22 -0.01
2002-10-23  0.00
2002-10-24 -0.03
2002-10-25  0.03
2002-10-28  0.03
2002-10-29  0.00
2002-10-30  0.03
2002-10-31  0.00
2002-11-01  0.02
2002-11-04  0.03
2002-11-05 -0.01
2002-11-06  0.00
2002-11-07 -0.03
2002-11-08 -0.02
2002-11-11  0.00
2002-11-12  0.02
2002-11-13  0.00
2002-11-14  0.02
2002-11-15 -0.01
2002-11-18 -0.01
2002-11-19 -0.01
2002-11-20  0.04
2002-11-21  0.04
2002-11-22 -0.01
2002-11-25  0.02
2002-11-26 -0.01
2002-11-27  0.03
2002-11-29 -0.01
2002-12-02  0.00
2002-12-03 -0.02
2002-12-04 -0.02
2002-12-05 -0.01
2002-12-06 -0.01
2002-12-09 -0.03
2002-12-10  0.02
2002-12-11  0.01
2002-12-12 -0.02
2002-12-13  0.00
2002-12-16  0.02
2002-12-17 -0.02
2002-12-18 -0.01
2002-12-19 -0.01
2002-12-20  0.01
2002-12-23  0.01
2002-12-24 -0.01
2002-12-26 -0.02
2002-12-27 -0.01
2002-12-30 -0.01
2002-12-31  0.02
2003-01-02  0.04
2003-01-03  0.01
2003-01-06  0.02
2003-01-07  0.03
2003-01-08 -0.02
2003-01-09  0.03
2003-01-10  0.01
2003-01-13  0.00
2003-01-14  0.01
2003-01-15 -0.01
2003-01-16 -0.02
2003-01-17 -0.06
2003-01-21 -0.01
2003-01-22 -0.01
2003-01-23  0.02
2003-01-24 -0.03
2003-01-27 -0.01
2003-01-28  0.02
2003-01-29  0.00
2003-01-30 -0.03
2003-01-31  0.00
2003-02-03  0.00
2003-02-04 -0.01
2003-02-05  0.00
2003-02-06  0.01
2003-02-07 -0.01
2003-02-10  0.01
2003-02-11 -0.01
2003-02-12 -0.01
2003-02-13 -0.01
2003-02-14  0.02
2003-02-18  0.02
2003-02-19  0.00
2003-02-20  0.00
2003-02-21  0.01
2003-02-24 -0.02
2003-02-25  0.01
2003-02-26 -0.02
2003-02-27  0.00
2003-02-28  0.01
2003-03-03 -0.01
2003-03-04 -0.01
2003-03-05  0.01
2003-03-06 -0.01
2003-03-07  0.01
2003-03-10 -0.03
2003-03-11  0.00
2003-03-12  0.00
2003-03-13  0.04
2003-03-14  0.01
2003-03-17  0.04
2003-03-18  0.00
2003-03-19 -0.01
2003-03-20  0.00
2003-03-21  0.03
2003-03-24 -0.03
2003-03-25  0.01
2003-03-26 -0.02
2003-03-27  0.00
2003-03-28 -0.01
2003-03-31 -0.03
2003-04-01  0.00
2003-04-02  0.03
2003-04-03  0.01
2003-04-04 -0.01
2003-04-07  0.00
2003-04-08  0.00
2003-04-09 -0.02
2003-04-10  0.00
2003-04-11  0.00
2003-04-14  0.02
2003-04-15  0.03
2003-04-16  0.00
2003-04-17  0.02
2003-04-21 -0.01
2003-04-22  0.03
2003-04-23  0.00
2003-04-24 -0.01
2003-04-25 -0.02
2003-04-28  0.01
2003-04-29  0.01
2003-04-30 -0.01
2003-05-01  0.01
2003-05-02  0.02
2003-05-05 -0.01
2003-05-06  0.01
2003-05-07 -0.01
2003-05-08 -0.01
2003-05-09  0.02
2003-05-12  0.02
2003-05-13  0.01
2003-05-14 -0.01
2003-05-15  0.01
2003-05-16 -0.01
2003-05-19 -0.03
2003-05-20 -0.01
2003-05-21  0.00
2003-05-22  0.00
2003-05-23 -0.01
2003-05-27  0.03
2003-05-28  0.00
2003-05-29  0.00
2003-05-30  0.01
2003-06-02 -0.01
2003-06-03 -0.04
2003-06-04  0.01
2003-06-05 -0.03
2003-06-06 -0.02
2003-06-09  0.02
2003-06-10  0.00
2003-06-11  0.03
2003-06-12  0.00
2003-06-13 -0.01
2003-06-16  0.02
2003-06-17  0.00
2003-06-18  0.00
2003-06-19  0.00
2003-06-20  0.00
2003-06-23 -0.02
2003-06-24  0.01
2003-06-25 -0.01
2003-06-26  0.02
2003-06-27 -0.01
2003-06-30 -0.01
2003-07-01  0.01
2003-07-02  0.01
2003-07-03 -0.01
2003-07-07  0.03
2003-07-08  0.00
2003-07-09 -0.01
2003-07-10 -0.02
2003-07-11  0.01
2003-07-14  0.01
2003-07-15  0.01
2003-07-16  0.00
2003-07-17 -0.04
2003-07-18  0.00
2003-07-21 -0.01
2003-07-22 -0.01
2003-07-23  0.01
2003-07-24 -0.01
2003-07-25  0.03
2003-07-28 -0.01
2003-07-29 -0.01
2003-07-30 -0.01
2003-07-31  0.00
2003-08-01  0.00
2003-08-04  0.00
2003-08-05 -0.02
2003-08-06  0.00
2003-08-07  0.01
2003-08-08  0.00
2003-08-11  0.00
2003-08-12  0.01
2003-08-13  0.00
2003-08-14  0.00
2003-08-15  0.00
2003-08-18  0.02
2003-08-19 -0.01
2003-08-20  0.00
2003-08-21  0.00
2003-08-22  0.00
2003-08-25 -0.01
2003-08-26  0.01
2003-08-27 -0.01
2003-08-28  0.00
2003-08-29  0.00
2003-09-02  0.05
2003-09-03  0.01
2003-09-04  0.02
2003-09-05 -0.01
2003-09-08  0.02
2003-09-09  0.00
2003-09-10 -0.02
2003-09-11  0.00
2003-09-12  0.01
2003-09-15  0.00
2003-09-16  0.02
2003-09-17  0.00
2003-09-18  0.02
2003-09-19  0.01
2003-09-22 -0.02
2003-09-23  0.00
2003-09-24 -0.02
2003-09-25  0.00
2003-09-26  0.00
2003-09-29  0.00
2003-09-30 -0.01
2003-10-01  0.02
2003-10-02  0.00
2003-10-03  0.01
2003-10-06  0.01
2003-10-07  0.01
2003-10-08  0.01
2003-10-09  0.00
2003-10-10  0.00
2003-10-13  0.01
2003-10-14 -0.01
2003-10-15  0.00
2003-10-16 -0.04
2003-10-17  0.00
2003-10-20  0.00
2003-10-21  0.00
2003-10-22 -0.01
2003-10-23  0.00
2003-10-24  0.00
2003-10-27  0.00
2003-10-28  0.02
2003-10-29 -0.01
2003-10-30  0.00
2003-10-31  0.00
2003-11-03  0.00
2003-11-04 -0.01
2003-11-05 -0.01
2003-11-06  0.01
2003-11-07 -0.01
2003-11-10  0.02
2003-11-11 -0.01
2003-11-12  0.01
2003-11-13  0.00
2003-11-14 -0.01
2003-11-17  0.00
2003-11-18 -0.01
2003-11-19  0.01
2003-11-20 -0.01
2003-11-21  0.00
2003-11-24  0.01
2003-11-25  0.00
2003-11-26  0.01
2003-11-28  0.01
2003-12-01  0.01
2003-12-02  0.00
2003-12-03  0.00
2003-12-04  0.01
2003-12-05 -0.01
2003-12-08  0.01
2003-12-09 -0.01
2003-12-10  0.01
2003-12-11  0.01
2003-12-12  0.00
2003-12-15 -0.01
2003-12-16  0.02
2003-12-17 -0.01
2003-12-18 -0.01
2003-12-19  0.00
2003-12-22  0.00
2003-12-23 -0.01
2003-12-24 -0.01
2003-12-26  0.01
2003-12-29  0.01
2003-12-30 -0.01
2003-12-31  0.00
2004-01-02 -0.01
2004-01-05  0.02
2004-01-06  0.00
2004-01-07  0.00
2004-01-08  0.00
2004-01-09 -0.02
2004-01-12  0.00
2004-01-13 -0.02
2004-01-14  0.01
2004-01-15  0.04
2004-01-16  0.01
2004-01-20  0.02
2004-01-21  0.01
2004-01-22  0.00
2004-01-23  0.00
2004-01-26  0.02
2004-01-27 -0.01
2004-01-28 -0.01
2004-01-29  0.01
2004-01-30  0.01
2004-02-02  0.00
2004-02-03  0.01
2004-02-04  0.00
2004-02-05 -0.01
2004-02-06  0.00
2004-02-09  0.00
2004-02-10  0.01
2004-02-11  0.00
2004-02-12 -0.01
2004-02-13  0.00
2004-02-17  0.00
2004-02-18 -0.01
2004-02-19 -0.01
2004-02-20 -0.01
2004-02-23 -0.01
2004-02-24  0.01
2004-02-25  0.00
2004-02-26  0.00
2004-02-27  0.00
2004-03-01  0.01
2004-03-02  0.00
2004-03-03  0.00
2004-03-04  0.00
2004-03-05  0.00
2004-03-08 -0.02
2004-03-09  0.00
2004-03-10 -0.02
2004-03-11 -0.02
2004-03-12  0.02
2004-03-15 -0.02
2004-03-16  0.01
2004-03-17  0.01
2004-03-18 -0.01
2004-03-19 -0.01
2004-03-22 -0.01
2004-03-23  0.00
2004-03-24  0.00
2004-03-25  0.01
2004-03-26  0.00
2004-03-29  0.00
2004-03-30  0.00
2004-03-31 -0.01
2004-04-01  0.01
2004-04-02  0.02
2004-04-05  0.00
2004-04-06 -0.01
2004-04-07 -0.01
2004-04-08  0.00
2004-04-12  0.01
2004-04-13 -0.01
2004-04-14  0.01
2004-04-15  0.00
2004-04-16 -0.01
2004-04-19  0.00
2004-04-20 -0.01
2004-04-21  0.01
2004-04-22 -0.01
2004-04-23  0.01
2004-04-26 -0.01
2004-04-27  0.01
2004-04-28 -0.01
2004-04-29 -0.01
2004-04-30 -0.01
2004-05-03  0.00
2004-05-04  0.01
2004-05-05  0.00
2004-05-06  0.00
2004-05-07  0.00
2004-05-10 -0.01
2004-05-11  0.00
2004-05-12  0.00
2004-05-13  0.00
2004-05-14 -0.01
2004-05-17 -0.01
2004-05-18  0.01
2004-05-19  0.01
2004-05-20  0.00
2004-05-21  0.00
2004-05-24  0.00
2004-05-25  0.02
2004-05-26  0.00
2004-05-27  0.00
2004-05-28  0.00
2004-06-01 -0.01
2004-06-02  0.00
2004-06-03 -0.01
2004-06-04  0.00
2004-06-07  0.01
2004-06-08  0.02
2004-06-09  0.00
2004-06-10  0.00
2004-06-14  0.00
2004-06-15  0.01
2004-06-16  0.00
2004-06-17  0.00
2004-06-18  0.00
2004-06-21 -0.01
2004-06-22  0.01
2004-06-23  0.01
2004-06-24 -0.01
2004-06-25  0.00
2004-06-28 -0.01
2004-06-29  0.00
2004-06-30  0.00
2004-07-01 -0.01
2004-07-02 -0.01
2004-07-06 -0.02
2004-07-07  0.00
2004-07-08 -0.02
2004-07-09  0.00
2004-07-12  0.00
2004-07-13  0.01
2004-07-14 -0.01
2004-07-15  0.00
2004-07-16  0.00
2004-07-19  0.01
2004-07-20  0.01
2004-07-21 -0.01
2004-07-22  0.01
2004-07-23 -0.01
2004-07-26  0.00
2004-07-27  0.01
2004-07-28  0.00
2004-07-29  0.01
2004-07-30  0.00
2004-08-02  0.00
2004-08-03 -0.01
2004-08-04  0.00
2004-08-05 -0.01
2004-08-06 -0.02
2004-08-09  0.00
2004-08-10  0.02
2004-08-11 -0.02
2004-08-12 -0.02
2004-08-13  0.02
2004-08-16  0.00
2004-08-17  0.00
2004-08-18  0.01
2004-08-19  0.00
2004-08-20  0.00
2004-08-23 -0.01
2004-08-24  0.00
2004-08-25  0.00
2004-08-26  0.00
2004-08-27  0.00
2004-08-30 -0.01
2004-08-31  0.00
2004-09-01 -0.01
2004-09-02  0.00
2004-09-03  0.00
2004-09-07  0.01
2004-09-08  0.01
2004-09-09  0.01
2004-09-10  0.00
2004-09-13  0.00
2004-09-14  0.00
2004-09-15  0.00
2004-09-16  0.00
2004-09-17  0.00
2004-09-20  0.00
2004-09-21  0.00
2004-09-22 -0.02
2004-09-23 -0.01
2004-09-24  0.01
2004-09-27  0.00
2004-09-28  0.00
2004-09-29  0.01
2004-09-30  0.01
2004-10-01  0.01
2004-10-04  0.01
2004-10-05  0.00
2004-10-06  0.01
2004-10-07 -0.01
2004-10-08 -0.01
2004-10-11  0.00
2004-10-12 -0.01
2004-10-13 -0.01
2004-10-14  0.00
2004-10-15  0.00
2004-10-18  0.01
2004-10-19  0.04
2004-10-20 -0.01
2004-10-21 -0.01
2004-10-22 -0.01
2004-10-25  0.01
2004-10-26  0.01
2004-10-27  0.01
2004-10-28 -0.01
2004-10-29  0.00
2004-11-01  0.00
2004-11-02  0.00
2004-11-03  0.01
2004-11-04  0.01
2004-11-05  0.01
2004-11-08  0.00
2004-11-09  0.00
2004-11-10  0.00
2004-11-11  0.01
2004-11-12  0.01
2004-11-15  0.01
2004-11-16 -0.01
2004-11-17  0.01
2004-11-18  0.00
2004-11-19 -0.01
2004-11-22  0.01
2004-11-23  0.00
2004-11-24  0.00
2004-11-26 -0.01
2004-11-29  0.01
2004-11-30 -0.01
2004-12-01  0.02
2004-12-02  0.00
2004-12-03  0.01
2004-12-06  0.01
2004-12-07 -0.02
2004-12-08  0.01
2004-12-09  0.01
2004-12-10 -0.01
2004-12-13  0.00
2004-12-14  0.01
2004-12-15  0.00
2004-12-16  0.00
2004-12-17 -0.01
2004-12-20  0.00
2004-12-21  0.00
2004-12-22  0.01
2004-12-23  0.00
2004-12-27  0.00
2004-12-28  0.01
2004-12-29  0.00
2004-12-30  0.00
2004-12-31  0.00
2005-01-03 -0.01
2005-01-04 -0.01
2005-01-05  0.00
2005-01-06  0.00
2005-01-07  0.00
2005-01-10  0.00
2005-01-11 -0.01
2005-01-12  0.00
2005-01-13 -0.01
2005-01-14  0.00
2005-01-18  0.01
2005-01-19 -0.02
2005-01-20  0.00
2005-01-21 -0.01
2005-01-24 -0.01
2005-01-25  0.00
2005-01-26  0.00
2005-01-27  0.00
2005-01-28  0.01
2005-01-31  0.01
2005-02-01  0.00
2005-02-02  0.00
2005-02-03 -0.01
2005-02-04  0.01
2005-02-07  0.00
2005-02-08  0.00
2005-02-09 -0.02
2005-02-10  0.00
2005-02-11  0.01
2005-02-14  0.00
2005-02-15  0.01
2005-02-16  0.00
2005-02-17 -0.01
2005-02-18 -0.01
2005-02-22 -0.01
2005-02-23  0.00
2005-02-24  0.01
2005-02-25  0.00
2005-02-28  0.00
2005-03-01  0.01
2005-03-02  0.00
2005-03-03 -0.01
2005-03-04  0.00
2005-03-07 -0.01
2005-03-08  0.01
2005-03-09  0.00
2005-03-10  0.00
2005-03-11 -0.01
2005-03-14  0.00
2005-03-15 -0.01
2005-03-16 -0.01
2005-03-17 -0.01
2005-03-18 -0.01
2005-03-21  0.00
2005-03-22  0.00
2005-03-23  0.01
2005-03-24  0.00
2005-03-28  0.00
2005-03-29  0.00
2005-03-30  0.00
2005-03-31  0.01
2005-04-01 -0.01
2005-04-04  0.00
2005-04-05 -0.01
2005-04-06 -0.01
2005-04-07 -0.01
2005-04-08 -0.01
2005-04-11 -0.02
2005-04-12 -0.01
2005-04-13 -0.01
2005-04-14 -0.01
2005-04-15 -0.08
2005-04-18  0.00
2005-04-19 -0.02
2005-04-20 -0.05
2005-04-21  0.03
2005-04-22  0.00
2005-04-25  0.01
2005-04-26  0.01
2005-04-27  0.02
2005-04-28 -0.01
2005-04-29  0.01
2005-05-02  0.00
2005-05-03  0.00
2005-05-04  0.01
2005-05-05 -0.02
2005-05-06  0.00
2005-05-09  0.00
2005-05-10 -0.02
2005-05-11  0.00
2005-05-12 -0.01
2005-05-13  0.01
2005-05-16  0.02
2005-05-17  0.00
2005-05-18  0.03
2005-05-19  0.01
2005-05-20 -0.01
2005-05-23  0.00
2005-05-24 -0.01
2005-05-25  0.00
2005-05-26  0.01
2005-05-27  0.00
2005-05-31 -0.02
2005-06-01  0.02
2005-06-02  0.01
2005-06-03 -0.02
2005-06-06 -0.01
2005-06-07  0.00
2005-06-08  0.00
2005-06-09  0.00
2005-06-10  0.00
2005-06-13  0.00
2005-06-14  0.00
2005-06-15  0.02
2005-06-16  0.01
2005-06-17 -0.01
2005-06-20  0.00
2005-06-21  0.00
2005-06-22  0.01
2005-06-23 -0.02
2005-06-24 -0.02
2005-06-27  0.00
2005-06-28  0.02
2005-06-29 -0.01
2005-06-30 -0.01
2005-07-01  0.01
2005-07-05  0.00
2005-07-06  0.01
2005-07-07  0.02
2005-07-08  0.02
2005-07-11  0.00
2005-07-12  0.01
2005-07-13  0.02
2005-07-14  0.01
2005-07-15  0.00
2005-07-18 -0.01
2005-07-19  0.02
2005-07-20  0.01
2005-07-21  0.00
2005-07-22  0.00
2005-07-25  0.00
2005-07-26  0.00
2005-07-27  0.00
2005-07-28  0.00
2005-07-29  0.00
2005-08-01  0.00
2005-08-02  0.00
2005-08-03  0.01
2005-08-04 -0.01
2005-08-05  0.00
2005-08-08  0.00
2005-08-09  0.00
2005-08-10 -0.02
2005-08-11  0.01
2005-08-12 -0.01
2005-08-15  0.00
2005-08-16 -0.01
2005-08-17  0.00
2005-08-18  0.00
2005-08-19  0.02
2005-08-22  0.00
2005-08-23 -0.01
2005-08-24 -0.01
2005-08-25  0.00
2005-08-26 -0.01
2005-08-29  0.01
2005-08-30 -0.01
2005-08-31  0.00
2005-09-01 -0.01
2005-09-02  0.00
2005-09-06  0.02
2005-09-07  0.00
2005-09-08  0.00
2005-09-09  0.01
2005-09-12  0.00
2005-09-13 -0.01
2005-09-14  0.00
2005-09-15 -0.01
2005-09-16  0.00
2005-09-19 -0.01
2005-09-20 -0.01
2005-09-21 -0.01
2005-09-22  0.01
2005-09-23  0.00
2005-09-26 -0.01
2005-09-27  0.01
2005-09-28  0.02
2005-09-29  0.01
2005-09-30  0.00
2005-10-03  0.00
2005-10-04  0.00
2005-10-05  0.00
2005-10-06  0.00
2005-10-07  0.01
2005-10-10  0.01
2005-10-11  0.02
2005-10-12 -0.01
2005-10-13  0.00
2005-10-14  0.00
2005-10-17  0.00
2005-10-18  0.01
2005-10-19  0.01
2005-10-20 -0.01
2005-10-21  0.00
2005-10-24  0.00
2005-10-25  0.00
2005-10-26 -0.01
2005-10-27 -0.01
2005-10-28 -0.01
2005-10-31  0.01
2005-11-01  0.00
2005-11-02 -0.01
2005-11-03  0.02
2005-11-04  0.00
2005-11-07  0.01
2005-11-08  0.00
2005-11-09  0.00
2005-11-10  0.01
2005-11-11  0.01
2005-11-14  0.00
2005-11-15  0.01
2005-11-16  0.01
2005-11-17  0.00
2005-11-18  0.01
2005-11-21 -0.01
2005-11-22  0.01
2005-11-23  0.01
2005-11-25  0.00
2005-11-28  0.00
2005-11-29  0.00
2005-11-30  0.00
2005-12-01  0.00
2005-12-02 -0.01
2005-12-05  0.00
2005-12-06  0.01
2005-12-07  0.00
2005-12-08 -0.01
2005-12-09 -0.01
2005-12-12 -0.01
2005-12-13 -0.03
2005-12-14 -0.01
2005-12-15  0.00
2005-12-16  0.00
2005-12-19 -0.01
2005-12-20  0.00
2005-12-21  0.01
2005-12-22  0.00
2005-12-23  0.00
2005-12-27 -0.01
2005-12-28  0.00
2005-12-29 -0.01
2005-12-30  0.00
2006-01-03  0.00
2006-01-04  0.00
2006-01-05  0.01
2006-01-06  0.03
2006-01-09 -0.01
2006-01-10  0.00
2006-01-11  0.00
2006-01-12 -0.01
2006-01-13  0.00
2006-01-17  0.00
2006-01-18  0.01
2006-01-19 -0.01
2006-01-20 -0.02
2006-01-23  0.00
2006-01-24 -0.01
2006-01-25  0.00
2006-01-26  0.00
2006-01-27  0.00
2006-01-30  0.01
2006-01-31  0.00
2006-02-01  0.01
2006-02-02 -0.01
2006-02-03 -0.02
2006-02-06 -0.01
2006-02-07  0.00
2006-02-08  0.01
2006-02-09  0.00
2006-02-10  0.01
2006-02-13 -0.01
2006-02-14  0.01
2006-02-15  0.00
2006-02-16  0.00
2006-02-17  0.00
2006-02-21  0.00
2006-02-22  0.01
2006-02-23 -0.01
2006-02-24  0.00
2006-02-27  0.01
2006-02-28  0.00
2006-03-01  0.00
2006-03-02  0.00
2006-03-03  0.00
2006-03-06  0.00
2006-03-07  0.00
2006-03-08  0.01
2006-03-09  0.00
2006-03-10  0.01
2006-03-13  0.00
2006-03-14  0.01
2006-03-15  0.01
2006-03-16 -0.01
2006-03-17  0.01
2006-03-20  0.00
2006-03-21  0.00
2006-03-22  0.01
2006-03-23 -0.01
2006-03-24  0.00
2006-03-27  0.00
2006-03-28 -0.01
2006-03-29  0.01
2006-03-30  0.00
2006-03-31 -0.01
2006-04-03  0.01
2006-04-04  0.00
2006-04-05  0.01
2006-04-06  0.00
2006-04-07 -0.02
2006-04-10  0.00
2006-04-11 -0.01
2006-04-12 -0.01
2006-04-13  0.02
2006-04-17  0.00
2006-04-18  0.02
2006-04-19 -0.02
2006-04-20  0.00
2006-04-21  0.00
2006-04-24  0.01
2006-04-25  0.01
2006-04-26  0.01
2006-04-27  0.01
2006-04-28 -0.02
2006-05-01  0.00
2006-05-02  0.00
2006-05-03  0.00
2006-05-04  0.00
2006-05-05  0.01
2006-05-08  0.00
2006-05-09  0.00
2006-05-10  0.00
2006-05-11 -0.01
2006-05-12  0.00
2006-05-15  0.01
2006-05-16 -0.01
2006-05-17 -0.01
2006-05-18 -0.01
2006-05-19  0.00
2006-05-22  0.00
2006-05-23  0.00
2006-05-24  0.00
2006-05-25  0.00
2006-05-26  0.01
2006-05-30 -0.01
2006-05-31  0.00
2006-06-01  0.01
2006-06-02 -0.01
2006-06-05 -0.01
2006-06-06  0.01
2006-06-07 -0.01
2006-06-08 -0.03
2006-06-09  0.01
2006-06-12 -0.01
2006-06-13  0.00
2006-06-14  0.01
2006-06-15  0.01
2006-06-16 -0.01
2006-06-19  0.00
2006-06-20  0.00
2006-06-21  0.00
2006-06-22 -0.01
2006-06-23  0.00
2006-06-26  0.00
2006-06-27 -0.01
2006-06-28  0.00
2006-06-29  0.01
2006-06-30 -0.01
2006-07-03  0.02
2006-07-05  0.00
2006-07-06  0.00
2006-07-07 -0.02
2006-07-10  0.00
2006-07-11  0.00
2006-07-12 -0.01
2006-07-13 -0.02
2006-07-14 -0.01
2006-07-17  0.00
2006-07-18  0.01
2006-07-19  0.02
2006-07-20 -0.01
2006-07-21 -0.01
2006-07-24  0.02
2006-07-25  0.00
2006-07-26  0.00
2006-07-27  0.00
2006-07-28  0.01
2006-07-31  0.01
2006-08-01 -0.02
2006-08-02  0.00
2006-08-03  0.00
2006-08-04 -0.01
2006-08-07 -0.01
2006-08-08  0.00
2006-08-09  0.00
2006-08-10  0.00
2006-08-11  0.00
2006-08-14  0.02
2006-08-15  0.01
2006-08-16  0.03
2006-08-17  0.00
2006-08-18  0.01
2006-08-21 -0.01
2006-08-22  0.00
2006-08-23  0.00
2006-08-24  0.01
2006-08-25  0.01
2006-08-28  0.01
2006-08-29  0.01
2006-08-30  0.00
2006-08-31  0.00
2006-09-01  0.01
2006-09-05 -0.01
2006-09-06 -0.01
2006-09-07 -0.01
2006-09-08  0.02
2006-09-11  0.00
2006-09-12  0.02
2006-09-13  0.00
2006-09-14  0.00
2006-09-15  0.01
2006-09-18 -0.01
2006-09-19  0.00
2006-09-20  0.02
2006-09-21 -0.02
2006-09-22  0.00
2006-09-25  0.01
2006-09-26  0.01
2006-09-27  0.00
2006-09-28  0.00
2006-09-29  0.00
2006-10-02  0.00
2006-10-03  0.00
2006-10-04  0.02
2006-10-05  0.00
2006-10-06  0.00
2006-10-09  0.01
2006-10-10  0.00
2006-10-11  0.00
2006-10-12  0.01
2006-10-13  0.02
2006-10-16  0.01
2006-10-17  0.00
2006-10-18  0.03
2006-10-19  0.00
2006-10-20  0.01
2006-10-23  0.01
2006-10-24  0.00
2006-10-25  0.00
2006-10-26  0.00
2006-10-27 -0.01
2006-10-30  0.01
2006-10-31  0.01
2006-11-01 -0.01
2006-11-02  0.00
2006-11-03  0.00
2006-11-06  0.01
2006-11-07  0.00
2006-11-08  0.00
2006-11-09  0.00
2006-11-10 -0.01
2006-11-13  0.00
2006-11-14  0.01
2006-11-15  0.00
2006-11-16  0.00
2006-11-17  0.00
2006-11-20 -0.01
2006-11-21  0.00
2006-11-22  0.00
2006-11-24  0.00
2006-11-27 -0.02
2006-11-28  0.00
2006-11-29  0.00
2006-11-30  0.00
2006-12-01 -0.01
2006-12-04  0.02
2006-12-05  0.01
2006-12-06  0.00
2006-12-07  0.00
2006-12-08  0.00
2006-12-11  0.00
2006-12-12  0.01
2006-12-13  0.01
2006-12-14  0.01
2006-12-15  0.00
2006-12-18  0.00
2006-12-19  0.01
2006-12-20  0.00
2006-12-21  0.00
2006-12-22 -0.01
2006-12-26  0.00
2006-12-27  0.02
2006-12-28  0.00
2006-12-29  0.00
> 
> 
> 
> cleanEx()
> nameEx("Return.clean")
> ### * Return.clean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.clean
> ### Title: clean returns in a time series to to provide more robust risk
> ###   estimates
> ### Aliases: Return.clean
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D  # CRAN doesn't like how long this takes (>5 secs)
> ##D data(managers)
> ##D head(Return.clean(managers[,1:4]),n=20)
> ##D chart.BarVaR(managers[,1,drop=FALSE], show.clean=TRUE, clean="boudt", lwd=2, methods="ModifiedVaR")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.convert")
> ### * Return.convert
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.convert
> ### Title: Convert coredata content from one type of return to another
> ### Aliases: Return.convert
> 
> ### ** Examples
> 
> # TBD
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.cumulative")
> ### * Return.cumulative
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.cumulative
> ### Title: calculate a compounded (geometric) cumulative return
> ### Aliases: Return.cumulative
> 
> ### ** Examples
> 
> 
> data(managers)
> Return.cumulative(managers[,1,drop=FALSE])
                      HAM1
Cumulative Return 3.126671
> Return.cumulative(managers[,1:8])
                      HAM1     HAM2     HAM3    HAM4      HAM5      HAM6
Cumulative Return 3.126671 4.348599 3.706732 2.52944 0.2650197 0.9858675
                  EDHEC LS EQ SP500 TR
Cumulative Return    2.051197 1.761619
> Return.cumulative(managers[,1:8],geometric=FALSE)
                    HAM1   HAM2  HAM3   HAM4   HAM5   HAM6 EDHEC LS EQ SP500 TR
Cumulative Return 1.4682 1.7679 1.643 1.4542 0.3148 0.7075      1.1454 1.143825
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.excess")
> ### * Return.excess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.excess
> ### Title: Calculates the returns of an asset in excess of the given risk
> ###   free rate
> ### Aliases: Return.excess
> 
> ### ** Examples
> 
> 
> data(managers)
> head(Return.excess(managers[,1,drop=FALSE], managers[,10,drop=FALSE]))
           HAM1 > US 3m TR
1996-01-31         0.00284
1996-02-29         0.01532
1996-03-31         0.01179
1996-04-30        -0.01338
1996-05-31         0.00317
1996-06-30        -0.00802
> head(Return.excess(managers[,1,drop=FALSE], .04/12))
              HAM1 > Rf
1996-01-31  0.004066667
1996-02-29  0.015966667
1996-03-31  0.012166667
1996-04-30 -0.012433333
1996-05-31  0.004266667
1996-06-30 -0.007233333
> head(Return.excess(managers[,1:6], managers[,10,drop=FALSE]))
           HAM1 > US 3m TR HAM2 > US 3m TR HAM3 > US 3m TR HAM4 > US 3m TR
1996-01-31         0.00284              NA         0.03034         0.01764
1996-02-29         0.01532              NA         0.03112         0.01552
1996-03-31         0.01179              NA         0.02209        -0.01351
1996-04-30        -0.01338              NA         0.04062         0.01932
1996-05-31         0.00317              NA         0.03087        -0.00163
1996-06-30        -0.00802              NA        -0.03442        -0.00602
           HAM5 > US 3m TR HAM6 > US 3m TR
1996-01-31              NA              NA
1996-02-29              NA              NA
1996-03-31              NA              NA
1996-04-30              NA              NA
1996-05-31              NA              NA
1996-06-30              NA              NA
> head(Return.excess(managers[,1,drop=FALSE], managers[,8,drop=FALSE]))
           HAM1 > SP500 TR
1996-01-31         -0.0266
1996-02-29          0.0100
1996-03-31          0.0059
1996-04-30         -0.0238
1996-05-31         -0.0182
1996-06-30         -0.0077
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.locScaleRob")
> ### * Return.locScaleRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.locScaleRob
> ### Title: Robust Filter for Time Series Returns
> ### Aliases: Return.locScaleRob
> 
> ### ** Examples
> 
> # Loading data from PerformanceAnalytics
> data(edhec, package = "PerformanceAnalytics")
> class(edhec)
[1] "xts" "zoo"
> # Changing the data colnames
> names(edhec) = c("CA", "CTA", "DIS", "EM", "EMN",
+                  "ED", "FIA", "GM", "LS", "MA",
+                  "RV", "SS", "FOF")
> # Cleaning the returns time series for manager data
> outRob <- Return.locScaleRob(edhec$CA)
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.portfolio")
> ### * Return.portfolio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.portfolio
> ### Title: Calculate weighted returns for a portfolio of assets
> ### Aliases: Return.portfolio Return.rebalancing
> 
> ### ** Examples
> 
> 
> data(edhec)
> Return.portfolio(edhec["1997",1:5], rebalance_on="quarters") # returns time series
           portfolio.returns
1997-01-31       0.033400000
1997-02-28       0.023762011
1997-03-31      -0.001413340
1997-04-30       0.003680000
1997-05-31       0.017660872
1997-06-30       0.025452430
1997-07-31       0.036500000
1997-08-31      -0.005136602
1997-09-30       0.022049167
1997-10-31      -0.010780000
1997-11-30      -0.002621013
1997-12-31       0.012985944
> Return.portfolio(edhec["1997",1:5], rebalance_on="quarters", verbose=TRUE) # returns list
$returns
           portfolio.returns
1997-01-31       0.033400000
1997-02-28       0.023762011
1997-03-31      -0.001413340
1997-04-30       0.003680000
1997-05-31       0.017660872
1997-06-30       0.025452430
1997-07-31       0.036500000
1997-08-31      -0.005136602
1997-09-30       0.022049167
1997-10-31      -0.010780000
1997-11-30      -0.002621013
1997-12-31       0.012985944

$contribution
           Convertible Arbitrage    CTA Global Distressed Securities
1997-01-31           0.002380000  0.0078600000          0.0035600000
1997-02-28           0.002408819  0.0059940275          0.0024031662
1997-03-31           0.001510442 -0.0004248891         -0.0002337074
1997-04-30           0.001720000 -0.0034000000          0.0006000000
1997-05-31           0.003135294 -0.0002938187          0.0046568428
1997-06-30           0.004252156  0.0016336242          0.0043610924
1997-07-31           0.003860000  0.0118200000          0.0046800000
1997-08-31           0.002635527 -0.0096662672          0.0029028423
1997-09-30           0.002444218  0.0038748559          0.0070493383
1997-10-31           0.002000000 -0.0019600000         -0.0012800000
1997-11-30           0.000000000  0.0026626352          0.0010847819
1997-12-31           0.001392218  0.0058170647          0.0014782579
           Emerging Markets Equity Market Neutral
1997-01-31      0.015820000          0.0037800000
1997-02-28      0.010964341          0.0019916567
1997-03-31     -0.002576485          0.0003112995
1997-04-30      0.002380000          0.0023800000
1997-05-31      0.006351596          0.0038109577
1997-06-30      0.011874480          0.0033310776
1997-07-31      0.011200000          0.0049400000
1997-08-31     -0.001344834          0.0003361293
1997-09-30      0.004659301          0.0040214532
1997-10-31     -0.011440000          0.0019000000
1997-11-30     -0.007205240          0.0008368108
1997-12-31      0.002942265          0.0013561387

$BOP.Weight
           Convertible Arbitrage CTA Global Distressed Securities
1997-01-31             0.2000000  0.2000000             0.2000000
1997-02-28             0.1958390  0.2011419             0.1969808
1997-03-31             0.1936464  0.2023282             0.1947562
1997-04-30             0.2000000  0.2000000             0.2000000
1997-05-31             0.2009804  0.1958792             0.1998645
1997-06-30             0.2005734  0.1921911             0.2009720
1997-07-31             0.2000000  0.2000000             0.2000000
1997-08-31             0.1966811  0.2043608             0.1974723
1997-09-30             0.2003458  0.1956998             0.2014097
1997-10-31             0.2000000  0.2000000             0.2000000
1997-11-30             0.2042013  0.2001981             0.2008855
1997-12-31             0.2047379  0.2033939             0.2025011
           Emerging Markets Equity Market Neutral
1997-01-31        0.2000000             0.2000000
1997-02-28        0.2088446             0.1971937
1997-03-31        0.2147071             0.1945622
1997-04-30        0.2000000             0.2000000
1997-05-31        0.2016380             0.2016380
1997-06-30        0.2043800             0.2018835
1997-07-31        0.2000000             0.2000000
1997-08-31        0.2037627             0.1977231
1997-09-30        0.2034629             0.1990818
1997-10-31        0.2000000             0.2000000
1997-11-30        0.1906148             0.2041002
1997-12-31        0.1838916             0.2054756

$EOP.Weight
           Convertible Arbitrage CTA Global Distressed Securities
1997-01-31             0.1958390  0.2011419             0.1969808
1997-02-28             0.1936464  0.2023282             0.1947562
1997-03-31             0.1954330  0.2021890             0.1947978
1997-04-30             0.2009804  0.1958792             0.1998645
1997-05-31             0.2005734  0.1921911             0.2009720
1997-06-30             0.1997416  0.1890138             0.2002366
1997-07-31             0.1966811  0.2043608             0.1974723
1997-08-31             0.2003458  0.1956998             0.2014097
1997-09-30             0.1984151  0.1952691             0.2039618
1997-10-31             0.2042013  0.2001981             0.2008855
1997-11-30             0.2047379  0.2033939             0.2025011
1997-12-31             0.2034876  0.2065290             0.2013644
           Emerging Markets Equity Market Neutral
1997-01-31        0.2088446             0.1971937
1997-02-28        0.2147071             0.1945622
1997-03-31        0.2124308             0.1951493
1997-04-30        0.2016380             0.2016380
1997-05-31        0.2043800             0.2018835
1997-06-30        0.2108869             0.2001210
1997-07-31        0.2037627             0.1977231
1997-08-31        0.2034629             0.1990818
1997-09-30        0.2036323             0.1987216
1997-10-31        0.1906148             0.2041002
1997-11-30        0.1838916             0.2054756
1997-12-31        0.1844387             0.2041802

$BOP.Value
           Convertible Arbitrage CTA Global Distressed Securities
1997-01-31             0.2000000  0.2000000             0.2000000
1997-02-28             0.2023800  0.2078600             0.2035600
1997-03-31             0.2048693  0.2140542             0.2060434
1997-04-30             0.2112921  0.2112921             0.2112921
1997-05-31             0.2131092  0.2077001             0.2119260
1997-06-30             0.2164337  0.2073886             0.2168638
1997-07-31             0.2213080  0.2213080             0.2213080
1997-08-31             0.2255792  0.2343873             0.2264866
1997-09-30             0.2286020  0.2233008             0.2298159
1997-10-31             0.2332393  0.2332393             0.2332393
1997-11-30             0.2355716  0.2309535             0.2317465
1997-12-31             0.2355716  0.2340252             0.2329980
           Emerging Markets Equity Market Neutral
1997-01-31        0.2000000             0.2000000
1997-02-28        0.2158200             0.2037800
1997-03-31        0.2271506             0.2058382
1997-04-30        0.2112921             0.2112921
1997-05-31        0.2138065             0.2138065
1997-06-30        0.2205414             0.2178474
1997-07-31        0.2213080             0.2213080
1997-08-31        0.2337012             0.2267743
1997-09-30        0.2321588             0.2271598
1997-10-31        0.2332393             0.2332393
1997-11-30        0.2198980             0.2354550
1997-12-31        0.2115858             0.2364204

$EOP.Value
           Convertible Arbitrage CTA Global Distressed Securities
1997-01-31             0.2023800  0.2078600             0.2035600
1997-02-28             0.2048693  0.2140542             0.2060434
1997-03-31             0.2064673  0.2136047             0.2057962
1997-04-30             0.2131092  0.2077001             0.2119260
1997-05-31             0.2164337  0.2073886             0.2168638
1997-06-30             0.2210221  0.2091514             0.2215698
1997-07-31             0.2255792  0.2343873             0.2264866
1997-08-31             0.2286020  0.2233008             0.2298159
1997-09-30             0.2313909  0.2277221             0.2378595
1997-10-31             0.2355716  0.2309535             0.2317465
1997-11-30             0.2355716  0.2340252             0.2329980
1997-12-31             0.2371735  0.2407183             0.2346988
           Emerging Markets Equity Market Neutral
1997-01-31        0.2158200             0.2037800
1997-02-28        0.2271506             0.2058382
1997-03-31        0.2244247             0.2061675
1997-04-30        0.2138065             0.2138065
1997-05-31        0.2205414             0.2178474
1997-06-30        0.2333548             0.2214419
1997-07-31        0.2337012             0.2267743
1997-08-31        0.2321588             0.2271598
1997-09-30        0.2374752             0.2317484
1997-10-31        0.2198980             0.2354550
1997-11-30        0.2115858             0.2364204
1997-12-31        0.2149712             0.2379808

> # with a weights object
> data(weights) # rebalance at the beginning of the year to various weights through time
> chart.StackedBar(weights)
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
> x <- Return.portfolio(edhec["2000::",1:11], weights=weights,verbose=TRUE)
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
> chart.CumReturns(x$returns)
> chart.StackedBar(x$BOP.Weight)
> chart.StackedBar(x$BOP.Value)
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.read")
> ### * Return.read
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.read
> ### Title: Read returns data with different date formats
> ### Aliases: Return.read
> 
> ### ** Examples
> 
> 
>      ## Not run: 
> ##D      Return.read("managers.cvs", frequency="d")
> ##D      
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("Return.relative")
> ### * Return.relative
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.relative
> ### Title: calculate the relative return of one asset to another
> ### Aliases: Return.relative
> 
> ### ** Examples
> 
> 
> data(managers)
> head(Return.relative(managers[,1:3], managers[,8,drop=FALSE]),n=20)
           HAM1/SP500 TR HAM2/SP500 TR HAM3/SP500 TR
1996-01-31     0.9742747            NA      1.000870
1996-02-29     0.9839276            NA      1.026455
1996-03-31     0.9896776            NA      1.042925
1996-04-30     0.9664645            NA      1.073965
1996-05-31     0.9493173            NA      1.083912
1996-06-30     0.9420352            NA      1.047090
1996-07-31     0.9628313            NA      1.058593
1996-08-31     0.9801813     0.9792381      1.084511
1996-09-30     0.9415791     1.0199354      1.093751
1996-10-31     0.9426786     1.0260891      1.106417
1996-11-30     0.8900934     1.0242766      1.097159
1996-12-31     0.9240553     1.0761069      1.143275
1997-01-31     0.8881367     1.0932234      1.158985
1997-02-28     0.8832017     1.0758672      1.107005
1997-03-31     0.9297150     1.0917993      1.115663
1997-04-30     0.8883924     1.0240062      1.082921
1997-05-31     0.8740730     1.0172496      1.098232
1997-06-30     0.8559189     1.0273754      1.056817
1997-07-31     0.8050204     1.0610629      1.084716
1997-08-31     0.8729867     1.1018644      1.145846
> 
> 
> 
> 
> cleanEx()
> nameEx("Selectivity")
> ### * Selectivity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Selectivity
> ### Title: Selectivity of the return distribution
> ### Aliases: Selectivity
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(Selectivity(portfolio_bacon[,1], portfolio_bacon[,2])) #expected -0.0141
[1] -0.01416944
> 
> data(managers)
> print(Selectivity(managers['1996',1], managers['1996',8]))
[1] 0.08077871
> print(Selectivity(managers['1996',1:5], managers['1996',8]))
                                     HAM1 HAM2      HAM3       HAM4 HAM5
Jensen's Alpha (Risk free = 0) 0.08077871   NA 0.2196026 0.06063837   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("SharpeRatio")
> ### * SharpeRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SharpeRatio
> ### Title: calculate a traditional or modified Sharpe Ratio of Return over
> ###   StdDev or VaR or ES
> ### Aliases: SharpeRatio SharpeRatio.modified
> 
> ### ** Examples
> 
> 
> data(managers)
> SharpeRatio(managers[,1,drop=FALSE], Rf=.035/12, FUN="StdDev") 
                                     HAM1
StdDev Sharpe (Rf=0.3%, p=95%): 0.3201889
> SharpeRatio(managers[,1,drop=FALSE], Rf = managers[,10,drop=FALSE], FUN="StdDev")
                                    HAM1
StdDev Sharpe (Rf=0.3%, p=95%): 0.308102
> SharpeRatio(managers[,1:6], Rf=.035/12, FUN="StdDev") 
                                     HAM1      HAM2      HAM3      HAM4
StdDev Sharpe (Rf=0.3%, p=95%): 0.3201889 0.3057649 0.2610141 0.1522615
                                      HAM5      HAM6
StdDev Sharpe (Rf=0.3%, p=95%): 0.02562009 0.3417545
> SharpeRatio(managers[,1:6], Rf = managers[,10,drop=FALSE], FUN="StdDev")
                                    HAM1      HAM2      HAM3      HAM4
StdDev Sharpe (Rf=0.3%, p=95%): 0.308102 0.2988608 0.2525301 0.1464385
                                     HAM5      HAM6
StdDev Sharpe (Rf=0.3%, p=95%): 0.0354554 0.3785371
> 
> 
> 
> data(edhec)
> SharpeRatio(edhec[, 6, drop = FALSE], FUN="VaR")
                           Event Driven
VaR Sharpe (Rf=0%, p=95%):    0.2440286
> SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR")
                             Event Driven
VaR Sharpe (Rf=0.3%, p=95%):    0.1131758
> SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR" , method="gaussian")
                             Event Driven
VaR Sharpe (Rf=0.3%, p=95%):    0.1358865
> SharpeRatio(edhec[, 6, drop = FALSE], FUN="ES")
                          Event Driven
ES Sharpe (Rf=0%, p=95%):     0.121216
> 
> # and all the methods
> SharpeRatio(managers[,1:9], Rf = managers[,10,drop=FALSE])
                                     HAM1      HAM2      HAM3       HAM4
StdDev Sharpe (Rf=0.3%, p=95%): 0.3081020 0.2988608 0.2525301 0.14643845
VaR Sharpe (Rf=0.3%, p=95%):    0.2306863 0.3970699 0.2504936 0.09553906
ES Sharpe (Rf=0.3%, p=95%):     0.1295014 0.1788256 0.2093343 0.06625013
                                      HAM5      HAM6 EDHEC LS EQ   SP500 TR
StdDev Sharpe (Rf=0.3%, p=95%): 0.03545540 0.3785371   0.3142695 0.12558293
VaR Sharpe (Rf=0.3%, p=95%):    0.02399862 0.3022965   0.2737607 0.07957460
ES Sharpe (Rf=0.3%, p=95%):     0.01664487 0.2308450   0.1855867 0.05760917
                                 US 10Y TR
StdDev Sharpe (Rf=0.3%, p=95%): 0.05684359
VaR Sharpe (Rf=0.3%, p=95%):    0.03741555
ES Sharpe (Rf=0.3%, p=95%):     0.02610548
> SharpeRatio(edhec,Rf = .04/12)
                                Convertible Arbitrage CTA Global
StdDev Sharpe (Rf=0.3%, p=95%):            0.13297157 0.03564047
VaR Sharpe (Rf=0.3%, p=95%):               0.08829811 0.02514184
ES Sharpe (Rf=0.3%, p=95%):                0.02421633 0.02003804
                                Distressed Securities Emerging Markets
StdDev Sharpe (Rf=0.3%, p=95%):            0.19475713       0.09067343
VaR Sharpe (Rf=0.3%, p=95%):               0.13174607       0.05581458
ES Sharpe (Rf=0.3%, p=95%):                0.06359855       0.02517886
                                Equity Market Neutral Event Driven
StdDev Sharpe (Rf=0.3%, p=95%):            0.12744129   0.17254993
VaR Sharpe (Rf=0.3%, p=95%):               0.09650946   0.11317579
ES Sharpe (Rf=0.3%, p=95%):                0.02700756   0.05621765
                                Fixed Income Arbitrage Global Macro
StdDev Sharpe (Rf=0.3%, p=95%):             0.08246359    0.1409259
VaR Sharpe (Rf=0.3%, p=95%):                0.05360047    0.1540261
ES Sharpe (Rf=0.3%, p=95%):                 0.01866674    0.1248131
                                Long/Short Equity Merger Arbitrage
StdDev Sharpe (Rf=0.3%, p=95%):        0.14747393       0.20713226
VaR Sharpe (Rf=0.3%, p=95%):           0.10513391       0.15892178
ES Sharpe (Rf=0.3%, p=95%):            0.06685374       0.06547219
                                Relative Value Short Selling Funds of Funds
StdDev Sharpe (Rf=0.3%, p=95%):     0.20927720   -0.11269614     0.05832093
VaR Sharpe (Rf=0.3%, p=95%):        0.14938310   -0.08183856     0.04218569
ES Sharpe (Rf=0.3%, p=95%):         0.05360016   -0.07444002     0.02257277
> 
> 
> 
> 
> cleanEx()
> nameEx("SharpeRatio.annualized")
> ### * SharpeRatio.annualized
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SharpeRatio.annualized
> ### Title: calculate annualized Sharpe Ratio
> ### Aliases: SharpeRatio.annualized
> 
> ### ** Examples
> 
> 
> data(managers)
> SharpeRatio.annualized(managers[,1,drop=FALSE], Rf=.035/12) 
                                      HAM1
Annualized Sharpe Ratio (Rf=3.5%) 1.112293
> SharpeRatio.annualized(managers[,1,drop=FALSE], Rf = managers[,10,drop=FALSE])
                                      HAM1
Annualized Sharpe Ratio (Rf=3.9%) 1.066795
> SharpeRatio.annualized(managers[,1:6], Rf=.035/12) 
                                      HAM1     HAM2      HAM3      HAM4
Annualized Sharpe Ratio (Rf=3.5%) 1.112293 1.059085 0.8854393 0.4512555
                                        HAM5     HAM6
Annualized Sharpe Ratio (Rf=3.5%) 0.01046591 1.194146
> SharpeRatio.annualized(managers[,1:6], Rf = managers[,10,drop=FALSE])
                                      HAM1     HAM2      HAM3      HAM4
Annualized Sharpe Ratio (Rf=3.9%) 1.066795 1.033019 0.8539722 0.4292173
                                        HAM5     HAM6
Annualized Sharpe Ratio (Rf=3.9%) 0.04441162 1.333868
> SharpeRatio.annualized(managers[,1:6], Rf = managers[,10,drop=FALSE],geometric=FALSE)
                                      HAM1     HAM2      HAM3      HAM4
Annualized Sharpe Ratio (Rf=3.9%) 1.067297 1.035284 0.8747901 0.5072777
                                       HAM5     HAM6
Annualized Sharpe Ratio (Rf=3.9%) 0.1228211 1.311291
> 
> 
> 
> 
> cleanEx()
> nameEx("ShrinkageMoments")
> ### * ShrinkageMoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ShrinkageMoments
> ### Title: Functions for calculating shrinkage-based comoments of financial
> ###   time series
> ### Aliases: ShrinkageMoments M2.shrink M3.shrink M4.shrink
> 
> ### ** Examples
> 
> 
> data(edhec)
> 
> # construct an underlying factor (market-factor, observed factor, PCA, ...)
> f <- rowSums(edhec)
> 
> # multi-target shrinkage with targets 1, 3 and 4
> # as.mat = F' would speed up calculations in higher dimensions
> targets <- c(1, 3, 4)
> sigma <- M2.shrink(edhec, targets, f)$M2sh
> m3 <- M3.shrink(edhec, targets, f)$M3sh
> m4 <- M4.shrink(edhec, targets, f)$M4sh
> 
> # compute equal-weighted portfolio modified ES
> mu <- colMeans(edhec)
> p <- length(mu)
> ES(p = 0.95, portfolio_method = "component", weights = rep(1 / p, p), mu = mu, 
+     sigma = sigma, m3 = m3, m4 = m4)
$MES
[1] 0.02831801

$contribution
 [1]  0.0045028986 -0.0002406338  0.0032683423  0.0062820081  0.0009521819
 [6]  0.0032656659  0.0027557054  0.0012768311  0.0032699580  0.0013088755
[11]  0.0026246040 -0.0039092360  0.0029608098

$pct_contrib_MES
 [1]  0.159011827 -0.008497553  0.115415675  0.221837901  0.033624604
 [6]  0.115321161  0.097312816  0.045089011  0.115472730  0.046220602
[11]  0.092683204 -0.138047692  0.104555713

> 
> # compare to sample method
> sigma <- cov(edhec)
> m3 <- M3.MM(edhec)
> m4 <- M4.MM(edhec)
> ES(p = 0.95, portfolio_method = "component", weights = rep(1 / p, p), mu = mu, 
+     sigma = sigma, m3 = m3, m4 = m4)
$MES
[1] 0.02755224

$contribution
 [1]  0.0066193322 -0.0029204094  0.0035391088  0.0062298642  0.0007584470
 [6]  0.0033786777  0.0039691984  0.0002599126  0.0031036429  0.0013410015
[11]  0.0033762935 -0.0051263847  0.0030235549

$pct_contrib_MES
 [1]  0.240246613 -0.105995357  0.128450859  0.226110992  0.027527598
 [6]  0.122628060  0.144060829  0.009433446  0.112645758  0.048671234
[11]  0.122541527 -0.186060547  0.109738989

> 
> 
> 
> 
> cleanEx()
> nameEx("SkewnessKurtosisRatio")
> ### * SkewnessKurtosisRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SkewnessKurtosisRatio
> ### Title: Skewness-Kurtosis ratio of the return distribution
> ### Aliases: SkewnessKurtosisRatio Skewness-KurtosisRatio
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(SkewnessKurtosisRatio(portfolio_bacon[,1])) #expected -0.034
[1] -0.03394204
> 
> data(managers)
> print(SkewnessKurtosisRatio(managers['1996']))
                            HAM1      HAM2       HAM3       HAM4 HAM5 HAM6
SkewnessKurtosisRatio -0.1364114 0.1279073 -0.3322627 -0.0264609   NA   NA
                      EDHEC LS EQ    SP500 TR   US 10Y TR   US 3m TR
SkewnessKurtosisRatio          NA -0.03981589 -0.01634447 -0.2626715
> print(SkewnessKurtosisRatio(managers['1996',1]))
[1] -0.1364114
> 
> 
> 
> 
> cleanEx()
> nameEx("SmoothingIndex")
> ### * SmoothingIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SmoothingIndex
> ### Title: calculate Normalized Getmansky Smoothing Index
> ### Aliases: SmoothingIndex
> 
> ### ** Examples
> 
> 
> data(managers)
> data(edhec)
> SmoothingIndex(managers[,1,drop=FALSE])
    HAM1 
0.621107 
> SmoothingIndex(managers[,1:8])
                    HAM1      HAM2      HAM3      HAM4 HAM5      HAM6
Smoothing Index 0.621107 0.4920349 0.6629845 0.6710542    1 0.4929217
                EDHEC LS EQ  SP500 TR
Smoothing Index   0.5378922 0.9528486
> SmoothingIndex(edhec)
                Convertible Arbitrage CTA Global Distressed Securities
Smoothing Index             0.4125174  0.9580045             0.4454533
                Emerging Markets Equity Market Neutral Event Driven
Smoothing Index         0.562781             0.4722181    0.4989713
                Fixed Income Arbitrage Global Macro Long/Short Equity
Smoothing Index              0.4258737    0.6608979         0.5735716
                Merger Arbitrage Relative Value Short Selling Funds of Funds
Smoothing Index        0.5051785      0.4473306     0.7575219      0.5240699
> 
> 
> 
> 
> cleanEx()
> nameEx("SortinoRatio")
> ### * SortinoRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SortinoRatio
> ### Title: calculate Sortino Ratio of performance over downside risk
> ### Aliases: SortinoRatio
> 
> ### ** Examples
> 
> 
> data(managers)
> round(SortinoRatio(managers[, 1]),4)
                           HAM1
Sortino Ratio (MAR = 0%) 0.7649
> round(SortinoRatio(managers[, 1:8]),4)
                           HAM1  HAM2   HAM3   HAM4   HAM5   HAM6 EDHEC LS EQ
Sortino Ratio (MAR = 0%) 0.7649 1.222 0.7172 0.3234 0.1343 0.9102      0.9691
                         SP500 TR
Sortino Ratio (MAR = 0%)   0.3064
> 
> 
> 
> 
> cleanEx()
> nameEx("SpecificRisk")
> ### * SpecificRisk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpecificRisk
> ### Title: Specific risk of the return distribution
> ### Aliases: SpecificRisk
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(SpecificRisk(portfolio_bacon[,1], portfolio_bacon[,2])) #expected 0.0329
[1] 0.03293109
> 
> data(managers)
> print(SpecificRisk(managers['1996',1], managers['1996',8]))
[1] 0.04977046
> print(SpecificRisk(managers['1996',1:5], managers['1996',8]))
                       HAM1 HAM2       HAM3      HAM4 HAM5
Specific Risk =  0.04977046   NA 0.06225051 0.0857627   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("StdDev")
> ### * StdDev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: StdDev
> ### Title: calculates Standard Deviation for univariate and multivariate
> ###   series, also calculates component contribution to standard deviation
> ###   of a portfolio
> ### Aliases: StdDev
> 
> ### ** Examples
> 
> 
> if(!( Sys.info()[['sysname']]=="Windows") ){
+ # if on Windows, cut and paste this example
+ 
+     data(edhec)
+ 
+     # first do normal StdDev calc
+     StdDev(edhec)
+     # or the equivalent
+     StdDev(edhec, portfolio_method="single")
+ 
+     # now with outliers squished
+     StdDev(edhec, clean="boudt")
+ 
+     # add Component StdDev for the equal weighted portfolio
+     StdDev(edhec, clean="boudt", portfolio_method="component")
+ 
+ } # end CRAN Windows check
no weights passed in, assuming equal weighted portfolio
$StdDev
[1] 0.009325917

$contribution
 Convertible Arbitrage             CTA Global  Distressed Securities 
          0.0007585836           0.0006873297           0.0009746614 
      Emerging Markets  Equity Market Neutral           Event Driven 
          0.0018145551           0.0004069524           0.0010089543 
Fixed Income Arbitrage           Global Macro      Long/Short Equity 
          0.0004972070           0.0008967015           0.0011954578 
      Merger Arbitrage         Relative Value          Short Selling 
          0.0004679488           0.0006602732          -0.0010665165 
        Funds of Funds 
          0.0010238087 

$pct_contrib_StdDev
 Convertible Arbitrage             CTA Global  Distressed Securities 
            0.08134145             0.07370104             0.10451105 
      Emerging Markets  Equity Market Neutral           Event Driven 
            0.19457123             0.04363672             0.10818821 
Fixed Income Arbitrage           Global Macro      Long/Short Equity 
            0.05331454             0.09615156             0.12818663 
      Merger Arbitrage         Relative Value          Short Selling 
            0.05017724             0.07079981            -0.11436050 
        Funds of Funds 
            0.10978102 

> 
> 
> 
> 
> cleanEx()
> nameEx("StdDev.annualized")
> ### * StdDev.annualized
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: StdDev.annualized
> ### Title: calculate a multiperiod or annualized Standard Deviation
> ### Aliases: StdDev.annualized sd.multiperiod sd.annualized
> 
> ### ** Examples
> 
> 
>     data(edhec)
>     sd.annualized(edhec)
                              Convertible Arbitrage CTA Global
Annualized Standard Deviation            0.05645427 0.08017175
                              Distressed Securities Emerging Markets
Annualized Standard Deviation            0.05849154         0.111269
                              Equity Market Neutral Event Driven
Annualized Standard Deviation            0.02779807   0.05787954
                              Fixed Income Arbitrage Global Macro
Annualized Standard Deviation             0.03921732   0.05025553
                              Long/Short Equity Merger Arbitrage Relative Value
Annualized Standard Deviation        0.06874619       0.03276911     0.03919277
                              Short Selling Funds of Funds
Annualized Standard Deviation     0.1619151     0.05324871
>     sd.annualized(edhec[,6,drop=FALSE])
                              Event Driven
Annualized Standard Deviation   0.05787954
>     # now for three periods:
>     sd.multiperiod(edhec[,6,drop=FALSE],scale=3)
                              Event Driven
Annualized Standard Deviation   0.02893977
> 
> 
> 
> 
> cleanEx()
> nameEx("StructuredMoments")
> ### * StructuredMoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: StructuredMoments
> ### Title: Functions for calculating structured comoments of financial time
> ###   series
> ### Aliases: StructuredMoments M2.struct M3.struct M4.struct
> 
> ### ** Examples
> 
> 
> data(edhec)
> 
> # structured estimation with constant correlation model
> # 'as.mat = F' would speed up calculations in higher dimensions
> sigma <- M2.struct(edhec, "CC")
> m3 <- M3.struct(edhec, "CC")
> m4 <- M4.struct(edhec, "CC")
> 
> # compute equal-weighted portfolio modified ES
> mu <- colMeans(edhec)
> p <- length(mu)
> ES(p = 0.95, portfolio_method = "component", weights = rep(1 / p, p), mu = mu, 
+     sigma = sigma, m3 = m3, m4 = m4)
$MES
[1] 0.005563373

$contribution
 [1] -5.127821e-04  1.093165e-03 -7.662159e-05  1.748454e-03 -5.798140e-04
 [6] -8.915962e-05 -7.056094e-04 -1.164491e-04  3.750994e-04 -4.712518e-04
[11] -5.210511e-04  5.496529e-03 -7.713568e-05

$pct_contrib_MES
 [1] -0.09217107  0.19649318 -0.01377251  0.31427948 -0.10421986 -0.01602618
 [7] -0.12683122 -0.02093139  0.06742302 -0.08470613 -0.09365741  0.98798499
[13] -0.01386491

> 
> # compare to sample method
> sigma <- cov(edhec)
> m3 <- M3.MM(edhec)
> m4 <- M4.MM(edhec)
> ES(p = 0.95, portfolio_method = "component", weights = rep(1 / p, p), mu = mu, 
+     sigma = sigma, m3 = m3, m4 = m4)
$MES
[1] 0.02755224

$contribution
 [1]  0.0066193322 -0.0029204094  0.0035391088  0.0062298642  0.0007584470
 [6]  0.0033786777  0.0039691984  0.0002599126  0.0031036429  0.0013410015
[11]  0.0033762935 -0.0051263847  0.0030235549

$pct_contrib_MES
 [1]  0.240246613 -0.105995357  0.128450859  0.226110992  0.027527598
 [6]  0.122628060  0.144060829  0.009433446  0.112645758  0.048671234
[11]  0.122541527 -0.186060547  0.109738989

> 
> 
> 
> 
> cleanEx()
> nameEx("SystematicRisk")
> ### * SystematicRisk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SystematicRisk
> ### Title: Systematic risk of the return distribution
> ### Aliases: SystematicRisk
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(SystematicRisk(portfolio_bacon[,1], portfolio_bacon[,2])) #expected 0.013
[1] 0.132806
> 
> data(managers)
> print(SystematicRisk(managers['1996',1], managers['1996',8]))
[1] 0.02626834
> print(SystematicRisk(managers['1996',1:5], managers['1996',8]))
                                           HAM1      HAM2       HAM3       HAM4
Systematic Risk to SP500 TR (Rf = 0) 0.02626834 0.0802869 0.08824707 0.06878241
                                     HAM5
Systematic Risk to SP500 TR (Rf = 0)   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("TotalRisk")
> ### * TotalRisk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TotalRisk
> ### Title: Total risk of the return distribution
> ### Aliases: TotalRisk
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> print(TotalRisk(portfolio_bacon[,1], portfolio_bacon[,2])) #expected 0.0134
[1] 0.136828
> 
> data(managers)
> print(TotalRisk(managers['1996',1], managers['1996',8]))
[1] 0.05627721
> print(TotalRisk(managers['1996',1:5], managers['1996',8]))
                    HAM1 HAM2      HAM3      HAM4 HAM5
Total Risk =  0.05627721   NA 0.1079938 0.1099375   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("TrackingError")
> ### * TrackingError
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TrackingError
> ### Title: Calculate Tracking Error of returns against a benchmark
> ### Aliases: TrackingError
> 
> ### ** Examples
> 
> 
> data(managers)
> TrackingError(managers[,1,drop=FALSE], managers[,8,drop=FALSE]) 
[1] 0.1131667
> TrackingError(managers[,1:6], managers[,8,drop=FALSE]) 
                              HAM1      HAM2      HAM3      HAM4      HAM5
Tracking Error: SP500 TR 0.1131667 0.1533647 0.1158673 0.1596656 0.1800291
                             HAM6
Tracking Error: SP500 TR 0.112839
> TrackingError(managers[,1:6], managers[,8:7,drop=FALSE])
                                  HAM1       HAM2       HAM3      HAM4
Tracking Error: SP500 TR    0.11316666 0.15336472 0.11586735 0.1596656
Tracking Error: EDHEC LS EQ 0.07577263 0.09071824 0.08156934 0.1569067
                                 HAM5       HAM6
Tracking Error: SP500 TR    0.1800291 0.11283904
Tracking Error: EDHEC LS EQ 0.1421533 0.05651657
> 
> 
> 
> 
> cleanEx()
> nameEx("TreynorRatio")
> ### * TreynorRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TreynorRatio
> ### Title: calculate Treynor Ratio or modified Treynor Ratio of excess
> ###   return over CAPM beta
> ### Aliases: TreynorRatio
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon) 
> data(managers)
> round(TreynorRatio(managers[,1], managers[,8], Rf=.035/12),4) 
[1] 0.2528
> round(TreynorRatio(managers[,1], managers[,8], Rf = managers[,10]),4) 
[1] 0.2428
> round(TreynorRatio(managers[,1:6], managers[,8], Rf=.035/12),4) 
                          HAM1   HAM2  HAM3   HAM4   HAM5   HAM6
Treynor Ratio: SP500 TR 0.2528 0.3925 0.201 0.1209 0.0052 0.3042
> round(TreynorRatio(managers[,1:6], managers[,8], Rf = managers[,10]),4)
                          HAM1   HAM2   HAM3   HAM4   HAM5   HAM6
Treynor Ratio: SP500 TR 0.2428 0.3883 0.1956 0.1144 0.0219 0.3401
> round(TreynorRatio(managers[,1:6], managers[,8:7], Rf=.035/12),4) 
                             HAM1   HAM2   HAM3   HAM4   HAM5   HAM6
Treynor Ratio: SP500 TR    0.2528 0.3925 0.2010 0.1209 0.0052 0.3042
Treynor Ratio: EDHEC LS EQ 0.1297 0.1088 0.0776 0.0504 0.0014 0.0966
> round(TreynorRatio(managers[,1:6], managers[,8:7], Rf = managers[,10]),4)
                             HAM1   HAM2   HAM3   HAM4   HAM5   HAM6
Treynor Ratio: SP500 TR    0.2428 0.3883 0.1956 0.1144 0.0219 0.3401
Treynor Ratio: EDHEC LS EQ 0.1242 0.1068 0.0753 0.0471 0.0060 0.1086
> 
> print(TreynorRatio(portfolio_bacon[,1], portfolio_bacon[,2], modified = TRUE)) #expected 0.7975 
[1] 0.7806747
> 
> print(TreynorRatio(managers['1996',1], managers['1996',8], modified = TRUE))
[1] 5.184256
> print(TreynorRatio(managers['1996',1:5], managers['1996',8], modified = TRUE)) 
                            HAM1     HAM2     HAM3     HAM4 HAM5
Treynor Ratio: SP500 TR 5.184256 9.129899 4.597618 2.990718   NA
> 
> 
> 
> 
> cleanEx()
> nameEx("UpDownRatios")
> ### * UpDownRatios
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UpDownRatios
> ### Title: calculate metrics on up and down markets for the benchmark asset
> ### Aliases: UpDownRatios
> 
> ### ** Examples
> 
> 
> data(managers)
> UpDownRatios(managers[,1, drop=FALSE], managers[,8, drop=FALSE])
                           HAM1
SP500 TR Up Capture   0.6346612
SP500 TR Down Capture 0.2076304
SP500 TR Up Number    0.8941176
SP500 TR Down Number  0.5106383
SP500 TR Up Percent   0.2941176
SP500 TR Down Percent 0.8085106
> UpDownRatios(managers[,1:6, drop=FALSE], managers[,8, drop=FALSE])
                           HAM1       HAM2      HAM3      HAM4      HAM5
SP500 TR Up Capture   0.6346612 0.66155321 0.7913921 0.9272348 0.5529663
SP500 TR Down Capture 0.2076304 0.04392011 0.3669345 0.7007885 0.3520355
SP500 TR Up Number    0.8941176 0.68354430 0.8705882 0.7647059 0.7083333
SP500 TR Down Number  0.5106383 0.69565217 0.7659574 0.6595745 0.7241379
SP500 TR Up Percent   0.2941176 0.36708861 0.4235294 0.4588235 0.3958333
SP500 TR Down Percent 0.8085106 0.86956522 0.8085106 0.5319149 0.8275862
                           HAM6
SP500 TR Up Capture   0.8068482
SP500 TR Down Capture 0.2397750
SP500 TR Up Number    0.8372093
SP500 TR Down Number  0.5238095
SP500 TR Up Percent   0.5348837
SP500 TR Down Percent 0.7142857
> UpDownRatios(managers[,1, drop=FALSE], managers[,8, drop=FALSE], method="Capture")
                           HAM1
SP500 TR Up Capture   0.6346612
SP500 TR Down Capture 0.2076304
> # Up Capture:
> UpDownRatios(managers[,1, drop=FALSE], managers[,8, drop=FALSE], side="Up", method="Capture")
[1] 0.6346612
> # Down Capture:
> UpDownRatios(managers[,1, drop=FALSE], managers[,8, drop=FALSE], side="Down", method="Capture")
[1] 0.2076304
> 
> 
> 
> 
> cleanEx()
> nameEx("UpsideFrequency")
> ### * UpsideFrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UpsideFrequency
> ### Title: upside frequency of the return distribution
> ### Aliases: UpsideFrequency
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> MAR = 0.005
> print(UpsideFrequency(portfolio_bacon[,1], MAR)) #expected 0.542
[1] 0.5416667
> 
> data(managers)
> print(UpsideFrequency(managers['1996']))
                            HAM1 HAM2      HAM3      HAM4 HAM5 HAM6 EDHEC LS EQ
Upside Frequency (MAR = 0%) 0.75  0.8 0.8333333 0.6666667  NaN  NaN         NaN
                             SP500 TR US 10Y TR US 3m TR
Upside Frequency (MAR = 0%) 0.8333333 0.4166667        1
> print(UpsideFrequency(managers['1996',1])) #expected 0.75
[1] 0.75
> 
> 
> 
> 
> cleanEx()
> nameEx("UpsidePotentialRatio")
> ### * UpsidePotentialRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UpsidePotentialRatio
> ### Title: calculate Upside Potential Ratio of upside performance over
> ###   downside risk
> ### Aliases: UpsidePotentialRatio UPR
> 
> ### ** Examples
> 
> 
> data(edhec)
> UpsidePotentialRatio(edhec[, 6], MAR=.05/12) #5 percent/yr MAR
                              Event Driven
Upside Potential (MAR = 0.4%)    0.5840163
> UpsidePotentialRatio(edhec[, 1:6], MAR=0)
                            Convertible Arbitrage CTA Global
Upside Potential (MAR = 0%)             0.5033798   1.044531
                            Distressed Securities Emerging Markets
Upside Potential (MAR = 0%)             0.7762396        0.6001397
                            Equity Market Neutral Event Driven
Upside Potential (MAR = 0%)             0.6009753    0.6748791
> 
> 
> 
> cleanEx()
> nameEx("UpsideRisk")
> ### * UpsideRisk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UpsideRisk
> ### Title: upside risk, variance and potential of the return distribution
> ### Aliases: UpsideRisk
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> MAR = 0.005
> print(UpsideRisk(portfolio_bacon[,1], MAR, stat="risk")) #expected 0.02937
[1] 0.02937332
> print(UpsideRisk(portfolio_bacon[,1], MAR, stat="variance")) #expected 0.08628
[1] 0.0008627917
> print(UpsideRisk(portfolio_bacon[,1], MAR, stat="potential")) #expected 0.01771
[1] 0.01770833
> 
> MAR = 0
> data(managers)
> print(UpsideRisk(managers['1996'], MAR, stat="risk"))
                             HAM1       HAM2       HAM3      HAM4 HAM5 HAM6
Upside Risk (MAR = 0%) 0.01799111 0.05916453 0.04002169 0.0321782    0    0
                       EDHEC LS EQ   SP500 TR  US 10Y TR    US 3m TR
Upside Risk (MAR = 0%)           0 0.03204533 0.01397565 0.004324785
> print(UpsideRisk(managers['1996',1], MAR, stat="risk")) #expected 1.820
[1] 0.01799111
> 
> 
> 
> 
> cleanEx()
> nameEx("VaR")
> ### * VaR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: VaR
> ### Title: calculate various Value at Risk (VaR) measures
> ### Aliases: VaR VaR.CornishFisher
> 
> ### ** Examples
> 
> 
> if(!( Sys.info()[['sysname']]=="Windows") ){
+ # if on Windows, cut and paste this example
+ 
+     data(edhec)
+ 
+     # first do normal VaR calc
+     VaR(edhec, p=.95, method="historical")
+ 
+     # now use Gaussian
+     VaR(edhec, p=.95, method="gaussian")
+ 
+     # now use modified Cornish Fisher calc to take non-normal distribution into account
+     VaR(edhec, p=.95, method="modified")
+ 
+     # now use p=.99
+     VaR(edhec, p=.99)
+     # or the equivalent alpha=.01
+     VaR(edhec, p=.01)
+ 
+     # now with outliers squished
+     VaR(edhec, clean="boudt")
+ 
+     # add Component VaR for the equal weighted portfolio
+     VaR(edhec, clean="boudt", portfolio_method="component")
+ 
+ } # end Windows check
no weights passed in, assuming equal weighted portfolio
$MVaR
[1] 0.01084104

$contribution
 Convertible Arbitrage             CTA Global  Distressed Securities 
          0.0010092186           0.0004903554           0.0012835448 
      Emerging Markets  Equity Market Neutral           Event Driven 
          0.0025735180           0.0003700333           0.0013705614 
Fixed Income Arbitrage           Global Macro      Long/Short Equity 
          0.0006306300           0.0008432148           0.0016349444 
      Merger Arbitrage         Relative Value          Short Selling 
          0.0004780464           0.0007845666          -0.0021050419 
        Funds of Funds 
          0.0014774456 

$pct_contrib_MVaR
 Convertible Arbitrage             CTA Global  Distressed Securities 
            0.09309244             0.04523141             0.11839686 
      Emerging Markets  Equity Market Neutral           Event Driven 
            0.23738669             0.03413265             0.12642345 
Fixed Income Arbitrage           Global Macro      Long/Short Equity 
            0.05817063             0.07777990             0.15081070 
      Merger Arbitrage         Relative Value          Short Selling 
            0.04409601             0.07237007            -0.19417348 
        Funds of Funds 
            0.13628268 

> 
> 
> 
> 
> cleanEx()
> nameEx("VolatilitySkewness")
> ### * VolatilitySkewness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: VolatilitySkewness
> ### Title: Volatility and variability of the return distribution
> ### Aliases: VolatilitySkewness
> 
> ### ** Examples
> 
> 
> data(portfolio_bacon)
> MAR = 0.005
> print(VolatilitySkewness(portfolio_bacon[,1], MAR, stat="volatility")) #expected 1.32
         [,1]
[1,] 1.323046
> print(VolatilitySkewness(portfolio_bacon[,1], MAR, stat="variability")) #expected 1.15
         [,1]
[1,] 1.150238
> 
> MAR = 0
> data(managers)
> # print(VolatilitySkewness(managers['1996'], MAR, stat="volatility"))
> print(VolatilitySkewness(managers['1996',1], MAR, stat="volatility"))
         [,1]
[1,] 6.149423
> 
> 
> 
> 
> cleanEx()
> nameEx("apply.fromstart")
> ### * apply.fromstart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: apply.fromstart
> ### Title: calculate a function over an expanding window always starting
> ###   from the beginning of the series
> ### Aliases: apply.fromstart
> 
> ### ** Examples
> 
> 
> data(managers)
> apply.fromstart(managers[,1,drop=FALSE], FUN="mean", width=36)
 1996-01-31  1996-02-29  1996-03-31  1996-04-30  1996-05-31  1996-06-30 
0.007400000 0.013350000 0.014066667 0.008275000 0.008140000 0.006133333 
 1996-07-31  1996-08-31  1996-09-30  1996-10-31  1996-11-30  1996-12-31 
0.001957143 0.006650000 0.007544444 0.009670000 0.010209091 0.010825000 
 1997-01-31  1997-02-28  1997-03-31  1997-04-30  1997-05-31  1997-06-30 
0.011623077 0.010950000 0.010846667 0.010956250 0.012888235 0.013455556 
 1997-07-31  1997-08-31  1997-09-30  1997-10-31  1997-11-30  1997-12-31 
0.013557895 0.014065000 0.014438095 0.012840909 0.013369565 0.013270833 
 1998-01-31  1998-02-28  1998-03-31  1998-04-30  1998-05-31  1998-06-30 
0.012964000 0.014115385 0.014933333 0.014678571 0.013375862 0.013333333 
 1998-07-31  1998-08-31  1998-09-30  1998-10-31  1998-11-30  1998-12-31 
0.012209677 0.008878125 0.009360606 0.010726471 0.010780000 0.010750000 
 1999-01-31  1999-02-28  1999-03-31  1999-04-30  1999-05-31  1999-06-30 
0.010208108 0.010186842 0.011110256 0.012107500 0.012207317 0.012692857 
 1999-07-31  1999-08-31  1999-09-30  1999-10-31  1999-11-30  1999-12-31 
0.012625581 0.011963636 0.011597778 0.011332609 0.011165957 0.011239583 
 2000-01-31  2000-02-29  2000-03-31  2000-04-30  2000-05-31  2000-06-30 
0.010802041 0.010832000 0.011747059 0.011909615 0.012324528 0.012324074 
 2000-07-31  2000-08-31  2000-09-30  2000-10-31  2000-11-30  2000-12-31 
0.012189091 0.012662500 0.012463158 0.012115517 0.012086441 0.011771667 
 2001-01-31  2001-02-28  2001-03-31  2001-04-30  2001-05-31  2001-06-30 
0.011708197 0.011651613 0.011300000 0.011662500 0.012373846 0.012218182 
 2001-07-31  2001-08-31  2001-09-30  2001-10-31  2001-11-30  2001-12-31 
0.012344776 0.012400000 0.011768116 0.011615714 0.011930986 0.012704167 
 2002-01-31  2002-02-28  2002-03-31  2002-04-30  2002-05-31  2002-06-30 
0.012715068 0.012375676 0.012294667 0.012193421 0.012015584 0.011552564 
 2002-07-31  2002-08-31  2002-09-30  2002-10-31  2002-11-30  2002-12-31 
0.010450633 0.010416250 0.009577778 0.009823171 0.010501205 0.009991667 
 2003-01-31  2003-02-28  2003-03-31  2003-04-30  2003-05-31  2003-06-30 
0.009389412 0.008988372 0.009303448 0.009937500 0.010204494 0.010433333 
 2003-07-31  2003-08-31  2003-09-30  2003-10-31  2003-11-30  2003-12-31 
0.010512088 0.010401087 0.010386022 0.010787234 0.010851579 0.011025000 
 2004-01-31  2004-02-29  2004-03-31  2004-04-30  2004-05-31  2004-06-30 
0.010965979 0.010853061 0.010831313 0.010680000 0.010655446 0.010804902 
 2004-07-31  2004-08-31  2004-09-30  2004-10-31  2004-11-30  2004-12-31 
0.010700000 0.010650000 0.010632381 0.010526415 0.010796262 0.011103704 
 2005-01-31  2005-02-28  2005-03-31  2005-04-30  2005-05-31  2005-06-30 
0.011002752 0.011098182 0.010811712 0.010528571 0.010473451 0.010522807 
 2005-07-31  2005-08-31  2005-09-30  2005-10-31  2005-11-30  2005-12-31 
0.010510435 0.010517241 0.010650427 0.010401695 0.010508403 0.010638333 
 2006-01-31  2006-02-28  2006-03-31  2006-04-30  2006-05-31  2006-06-30 
0.011122314 0.011150000 0.011382114 0.011281452 0.010977600 0.011061905 
 2006-07-31  2006-08-31  2006-09-30  2006-10-31  2006-11-30  2006-12-31 
0.010861417 0.010902344 0.010870543 0.011115385 0.011119847 0.011122727 
> 
> 
> 
> 
> cleanEx()
> nameEx("apply.rolling")
> ### * apply.rolling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: apply.rolling
> ### Title: calculate a function over a rolling window
> ### Aliases: apply.rolling
> 
> ### ** Examples
> 
> 
> data(managers)
> apply.rolling(managers[,1,drop=FALSE], FUN="mean", width=36)
                 calcs
1996-01-31          NA
1996-02-29          NA
1996-03-31          NA
1996-04-30          NA
1996-05-31          NA
1996-06-30          NA
1996-07-31          NA
1996-08-31          NA
1996-09-30          NA
1996-10-31          NA
1996-11-30          NA
1996-12-31          NA
1997-01-31          NA
1997-02-28          NA
1997-03-31          NA
1997-04-30          NA
1997-05-31          NA
1997-06-30          NA
1997-07-31          NA
1997-08-31          NA
1997-09-30          NA
1997-10-31          NA
1997-11-30          NA
1997-12-31          NA
1998-01-31          NA
1998-02-28          NA
1998-03-31          NA
1998-04-30          NA
1998-05-31          NA
1998-06-30          NA
1998-07-31          NA
1998-08-31          NA
1998-09-30          NA
1998-10-31          NA
1998-11-30          NA
1998-12-31 0.010750000
1999-01-31 0.010286111
1999-02-28 0.010011111
1999-03-31 0.010863889
1999-04-30 0.012533333
1999-05-31 0.012772222
1999-06-30 0.013786111
1999-07-31 0.014700000
1999-08-31 0.013144444
1999-09-30 0.012611111
1999-10-31 0.011794444
1999-11-30 0.011458333
1999-12-31 0.011377778
2000-01-31 0.010505556
2000-02-29 0.010786111
2000-03-31 0.012122222
2000-04-30 0.012333333
2000-05-31 0.012058333
2000-06-30 0.011758333
2000-07-31 0.011466667
2000-08-31 0.011883333
2000-09-30 0.011311111
2000-10-31 0.011672222
2000-11-30 0.011266667
2000-12-31 0.010772222
2001-01-31 0.010836111
2001-02-28 0.009872222
2001-03-31 0.008575000
2001-04-30 0.009316667
2001-05-31 0.011566667
2001-06-30 0.011288889
2001-07-31 0.012461111
2001-08-31 0.015530556
2001-09-30 0.013975000
2001-10-31 0.012455556
2001-11-30 0.013050000
2001-12-31 0.014658333
2002-01-31 0.015291667
2002-02-28 0.014686111
2002-03-31 0.013577778
2002-04-30 0.012288889
2002-05-31 0.011797222
2002-06-30 0.010222222
2002-07-31 0.007852778
2002-08-31 0.008525000
2002-09-30 0.007052778
2002-10-31 0.007894444
2002-11-30 0.009633333
2002-12-31 0.008327778
2003-01-31 0.007466667
2003-02-28 0.006427778
2003-03-31 0.005841667
2003-04-30 0.007088889
2003-05-31 0.007083333
2003-06-30 0.007597222
2003-07-31 0.007950000
2003-08-31 0.006883333
2003-09-30 0.007097222
2003-10-31 0.008647222
2003-11-30 0.008827778
2003-12-31 0.009780556
2004-01-31 0.009708333
2004-02-29 0.009477778
2004-03-31 0.010011111
2004-04-30 0.008933333
2004-05-31 0.007552778
2004-06-30 0.008213889
2004-07-31 0.007638889
2004-08-31 0.007344444
2004-09-30 0.008455556
2004-10-31 0.008408333
2004-11-30 0.008558333
2004-12-31 0.007902778
2005-01-31 0.007530556
2005-02-28 0.008472222
2005-03-31 0.007722222
2005-04-30 0.007013889
2005-05-31 0.007175000
2005-06-30 0.008291667
2005-07-31 0.010641667
2005-08-31 0.010741667
2005-09-30 0.013063889
2005-10-31 0.011719444
2005-11-30 0.010525000
2005-12-31 0.012147222
2006-01-31 0.015213889
2006-02-28 0.016313889
2006-03-31 0.016405556
2006-04-30 0.014566667
2006-05-31 0.012888889
2006-06-30 0.012633333
2006-07-31 0.011744444
2006-08-31 0.012183333
2006-09-30 0.012122222
2006-10-31 0.011972222
2006-11-30 0.011827778
2006-12-31 0.011383333
> 
> 
> 
> 
> cleanEx()
> nameEx("centeredmoments")
> ### * centeredmoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Return.centered
> ### Title: calculate centered Returns
> ### Aliases: Return.centered centeredcomoment centeredmoment
> 
> ### ** Examples
> 
> 
> 
> data(managers)
> Return.centered(managers[,1:3,drop=FALSE])
                    HAM1       HAM2          HAM3
1996-01-31 -0.0037227273         NA  0.0224530303
1996-02-29  0.0081772727         NA  0.0226530303
1996-03-31  0.0043772727         NA  0.0133530303
1996-04-30 -0.0202227273         NA  0.0324530303
1996-05-31 -0.0035227273         NA  0.0228530303
1996-06-30 -0.0150227273         NA -0.0427469697
1996-07-31 -0.0342227273         NA -0.0461469697
1996-08-31  0.0283772727 -0.0142432  0.0336530303
1996-09-30  0.0035772727  0.0860568  0.0528530303
1996-10-31  0.0176772727  0.0196568  0.0270530303
1996-11-30  0.0044772727  0.0595568  0.0541530303
1996-12-31  0.0064772727  0.0156568  0.0089530303
1997-01-31  0.0100772727  0.0652568  0.0646530303
1997-02-28 -0.0089227273 -0.0223432 -0.0498469697
1997-03-31 -0.0017227273 -0.0410432 -0.0460469697
1997-04-30  0.0014772727 -0.0202432  0.0161530303
1997-05-31  0.0326772727  0.0397568  0.0634530303
1997-06-30  0.0119772727  0.0410568 -0.0070469697
1997-07-31  0.0042772727  0.1008568  0.0956530303
1997-08-31  0.0125772727 -0.0338432 -0.0152469697
1997-09-30  0.0107772727  0.0434568  0.0424530303
1997-10-31 -0.0318227273 -0.0363432 -0.0478469697
1997-11-30  0.0138772727 -0.0192432  0.0051530303
1997-12-31 -0.0001227273  0.0050568 -0.0127469697
1998-01-31 -0.0055227273 -0.0253432  0.0366530303
1998-02-28  0.0317772727  0.0865568  0.0341530303
1998-03-31  0.0250772727  0.0483568  0.0083530303
1998-04-30 -0.0033227273 -0.0151432  0.0109530303
1998-05-31 -0.0342227273 -0.0248432 -0.0260469697
1998-06-30  0.0009772727  0.0250568  0.0270530303
1998-07-31 -0.0326227273 -0.0413432 -0.0119469697
1998-08-31 -0.1055227273 -0.0141432 -0.0842469697
1998-09-30  0.0136772727 -0.0187432  0.0540530303
1998-10-31  0.0446772727  0.0207568 -0.0175469697
1998-11-30  0.0014772727  0.0557568  0.0430530303
1998-12-31 -0.0014227273  0.0771568  0.0339530303
1999-01-31 -0.0204227273  0.0645568  0.0144530303
1999-02-28 -0.0017227273 -0.0371432 -0.0654469697
1999-03-31  0.0350772727  0.0940568  0.0062530303
1999-04-30  0.0398772727  0.0024568  0.0292530303
1999-05-31  0.0050772727 -0.0143432 -0.0045469697
1999-06-30  0.0214772727  0.0508568  0.0422530303
1999-07-31 -0.0013227273  0.0137568 -0.0082469697
1999-08-31 -0.0276227273  0.0143568 -0.0002469697
1999-09-30 -0.0156227273  0.0190568 -0.0056469697
1999-10-31 -0.0117227273  0.0280568  0.0622530303
1999-11-30 -0.0076227273  0.0555568  0.0949530303
1999-12-31  0.0035772727  0.1307568  0.0455530303
2000-01-31 -0.0213227273  0.0236568 -0.0174469697
2000-02-29  0.0011772727  0.1414568  0.1671530303
2000-03-31  0.0463772727 -0.0504432 -0.0096469697
2000-04-30  0.0090772727 -0.0239432 -0.0251469697
2000-05-31  0.0227772727 -0.0258432 -0.0352469697
2000-06-30  0.0011772727 -0.0036432  0.0282530303
2000-07-31 -0.0062227273  0.0046568 -0.0649469697
2000-08-31  0.0275772727  0.0205568  0.0670530303
2000-09-30 -0.0098227273 -0.0438432 -0.0697469697
2000-10-31 -0.0188227273 -0.0429432  0.0037530303
2000-11-30 -0.0007227273 -0.0361432 -0.0492469697
2000-12-31 -0.0179227273  0.0048568  0.0044530303
2001-01-31 -0.0032227273 -0.0466432  0.0137530303
2001-02-28 -0.0029227273 -0.0334432 -0.0479469697
2001-03-31 -0.0216227273 -0.0173432 -0.0234469697
2001-04-30  0.0233772727 -0.0160432  0.0007530303
2001-05-31  0.0467772727 -0.0066432 -0.0177469697
2001-06-30 -0.0090227273 -0.0348432 -0.0361469697
2001-07-31  0.0095772727 -0.0165432 -0.0146469697
2001-08-31  0.0049772727 -0.0058432 -0.0370469697
2001-09-30 -0.0423227273  0.0191568 -0.0192469697
2001-10-31 -0.0100227273 -0.0361432 -0.0329469697
2001-11-30  0.0228772727 -0.0059432  0.0123530303
2001-12-31  0.0564772727 -0.0144432 -0.0106469697
2002-01-31  0.0023772727 -0.0329432 -0.0269469697
2002-02-28 -0.0235227273 -0.0512432 -0.0538469697
2002-03-31 -0.0048227273  0.0079568  0.0082530303
2002-04-30 -0.0065227273 -0.0257432 -0.0377469697
2002-05-31 -0.0126227273 -0.0436432 -0.0148469697
2002-06-30 -0.0352227273 -0.0479432 -0.0575469697
2002-07-31 -0.0866227273 -0.0265432 -0.0464469697
2002-08-31 -0.0034227273 -0.0145432 -0.0100469697
2002-09-30 -0.0686227273 -0.0158432 -0.0563469697
2002-10-31  0.0185772727 -0.0098432 -0.0022469697
2002-11-30  0.0549772727 -0.0224432  0.0225530303
2002-12-31 -0.0434227273 -0.0163432 -0.0776469697
2003-01-31 -0.0523227273 -0.0144432 -0.0139469697
2003-02-28 -0.0362227273 -0.0290432 -0.0103469697
2003-03-31  0.0252772727 -0.0197432 -0.0013469697
2003-04-30  0.0539772727 -0.0260432  0.0400530303
2003-05-31  0.0225772727  0.0373568  0.0298530303
2003-06-30  0.0196772727  0.0093568 -0.0015469697
2003-07-31  0.0064772727  0.0092568 -0.0038469697
2003-08-31 -0.0108227273 -0.0225432  0.0177530303
2003-09-30 -0.0021227273 -0.0194432 -0.0149469697
2003-10-31  0.0369772727 -0.0007432  0.0480530303
2003-11-30  0.0057772727 -0.0027432 -0.0006469697
2003-12-31  0.0163772727  0.0147568 -0.0029469697
2004-01-31 -0.0058227273  0.0049568 -0.0070469697
2004-02-29 -0.0112227273 -0.0054432  0.0018530303
2004-03-31 -0.0024227273 -0.0013432 -0.0162469697
2004-04-30 -0.0154227273 -0.0059432 -0.0324469697
2004-05-31 -0.0029227273 -0.0066432 -0.0191469697
2004-06-30  0.0147772727 -0.0003432 -0.0114469697
2004-07-31 -0.0111227273 -0.0099432 -0.0471469697
2004-08-31 -0.0056227273 -0.0206432 -0.0180469697
2004-09-30 -0.0023227273 -0.0041432 -0.0156469697
2004-10-31 -0.0117227273  0.0005568 -0.0135469697
2004-11-30  0.0282772727  0.0110568  0.0429530303
2004-12-31  0.0328772727 -0.0058432  0.0056530303
2005-01-31 -0.0110227273 -0.0195432 -0.0051469697
2005-02-28  0.0103772727  0.0068568  0.0292530303
2005-03-31 -0.0318227273 -0.0210432 -0.0031469697
2005-04-30 -0.0320227273 -0.0180432 -0.0143469697
2005-05-31 -0.0068227273 -0.0280432  0.0108530303
2005-06-30  0.0049772727  0.0052568 -0.0089469697
2005-07-31 -0.0020227273  0.0057568  0.0078530303
2005-08-31  0.0001772727 -0.0018432 -0.0144469697
2005-09-30  0.0149772727  0.0038568  0.0072530303
2005-10-31 -0.0298227273 -0.0327432 -0.0235469697
2005-11-30  0.0119772727 -0.0047432  0.0037530303
2005-12-31  0.0149772727 -0.0056432  0.0056530303
2006-01-31  0.0580772727  0.0670568  0.0226530303
2006-02-28  0.0033772727 -0.0467432  0.0141530303
2006-03-31  0.0285772727  0.0009568 -0.0005469697
2006-04-30 -0.0122227273  0.0030568 -0.0093469697
2006-05-31 -0.0378227273 -0.0193432 -0.0336469697
2006-06-30  0.0104772727 -0.0257432 -0.0313469697
2006-07-31 -0.0255227273 -0.0272432 -0.0022469697
2006-08-31  0.0049772727 -0.0254432  0.0128530303
2006-09-30 -0.0043227273 -0.0372432 -0.0052469697
2006-10-31  0.0315772727  0.0025568  0.0058530303
2006-11-30  0.0005772727  0.0064568  0.0144530303
2006-12-31  0.0003772727 -0.0203432 -0.0014469697
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.ACF")
> ### * chart.ACF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.ACF
> ### Title: Create ACF chart or ACF with PACF two-panel chart
> ### Aliases: chart.ACF chart.ACFplus
> 
> ### ** Examples
> 
> 
> data(edhec)
> chart.ACFplus(edhec[,1,drop=FALSE])
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.Bar")
> ### * chart.Bar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.Bar
> ### Title: wrapper for barchart of returns
> ### Aliases: chart.Bar charts.Bar
> 
> ### ** Examples
> 
> 
> data(edhec)
> chart.Bar(edhec[,"Funds of Funds"], main="Monthly Returns")
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.BarVaR")
> ### * chart.BarVaR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.BarVaR
> ### Title: Periodic returns in a bar chart with risk metric overlay
> ### Aliases: chart.BarVaR charts.BarVaR
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  # not run on CRAN because of example time
> ##D data(managers)
> ##D # plain
> ##D chart.BarVaR(managers[,1,drop=FALSE], main="Monthly Returns")
> ##D 
> ##D # with risk line
> ##D chart.BarVaR(managers[,1,drop=FALSE], 
> ##D 		methods="HistoricalVaR", 
> ##D 		main="... with Empirical VaR from Inception")
> ##D 		
> ##D # with lines for all managers in the sample
> ##D chart.BarVaR(managers[,1:6], 
> ##D 		methods="GaussianVaR", 
> ##D 		all=TRUE, lty=1, lwd=2, 
> ##D 		colorset= c("red", rep("gray", 5)), 
> ##D 		main="... with Gaussian VaR and Estimates for Peers")
> ##D 
> ##D # with multiple methods
> ##D chart.BarVaR(managers[,1,drop=FALSE],
> ##D 		methods=c("HistoricalVaR", "ModifiedVaR", "GaussianVaR"), 
> ##D 		main="... with Multiple Methods")
> ##D 
> ##D # cleaned up a bit
> ##D chart.BarVaR(managers[,1,drop=FALSE],
> ##D 		methods=c("HistoricalVaR", "ModifiedVaR", "GaussianVaR"), 
> ##D 		lwd=2, ypad=.01, 
> ##D 		main="... with Padding for Bottom Legend")
> ##D 
> ##D # with 'cleaned' data for VaR estimates
> ##D chart.BarVaR(managers[,1,drop=FALSE],
> ##D 		methods=c("HistoricalVaR", "ModifiedVaR"), 
> ##D 		lwd=2, ypad=.01, clean="boudt", 
> ##D 		main="... with Robust ModVaR Estimate")
> ##D 
> ##D # Cornish Fisher VaR estimated with cleaned data, 
> ##D # with horizontal line to show exceptions
> ##D chart.BarVaR(managers[,1,drop=FALSE],
> ##D 		methods="ModifiedVaR", 
> ##D 		lwd=2, ypad=.01, clean="boudt", 
> ##D 		show.horizontal=TRUE, lty=2, 
> ##D 		main="... with Robust ModVaR and Line for Identifying Exceptions")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.Boxplot")
> ### * chart.Boxplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.Boxplot
> ### Title: box whiskers plot wrapper
> ### Aliases: chart.Boxplot
> 
> ### ** Examples
> 
> 
> data(edhec)
> chart.Boxplot(edhec)
> chart.Boxplot(edhec,as.Tufte=TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.CaptureRatios")
> ### * chart.CaptureRatios
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.CaptureRatios
> ### Title: Chart of Capture Ratios against a benchmark
> ### Aliases: chart.CaptureRatios
> 
> ### ** Examples
> 
> 
>     data(managers)
>     chart.CaptureRatios(managers[,1:6], managers[,7,drop=FALSE])
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.Correlation")
> ### * chart.Correlation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.Correlation
> ### Title: correlation matrix chart
> ### Aliases: chart.Correlation
> 
> ### ** Examples
> 
> 
> data(managers)
> chart.Correlation(managers[,1:8], histogram=TRUE, pch="+")
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.CumReturns")
> ### * chart.CumReturns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.CumReturns
> ### Title: Cumulates and graphs a set of periodic returns
> ### Aliases: chart.CumReturns
> 
> ### ** Examples
> 
> 
> data(edhec)
> chart.CumReturns(edhec[,"Funds of Funds"],main="Cumulative Returns")
> chart.CumReturns(edhec[,"Funds of Funds"],wealth.index=TRUE, main="Growth of $1")
> data(managers)
> chart.CumReturns(managers,main="Cumulative Returns",begin="first")
> chart.CumReturns(managers,main="Cumulative Returns",begin="axis")
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.Drawdown")
> ### * chart.Drawdown
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.Drawdown
> ### Title: Time series chart of drawdowns through time
> ### Aliases: chart.Drawdown
> 
> ### ** Examples
> 
> 
> data(edhec)
> chart.Drawdown(edhec[,c(1,2)], 
+ 		main="Drawdown from Peak Equity Attained", 
+ 		legend.loc="bottomleft")
> 
> 
> 
> cleanEx()
> nameEx("chart.ECDF")
> ### * chart.ECDF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.ECDF
> ### Title: Create an ECDF overlaid with a Normal CDF
> ### Aliases: chart.ECDF
> 
> ### ** Examples
> 
> 
> data(edhec)
> chart.ECDF(edhec[, 1, drop=FALSE])
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.Events")
> ### * chart.Events
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.Events
> ### Title: Plots a time series with event dates aligned
> ### Aliases: chart.Events
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(managers)
> ##D n = table.Drawdowns(managers[,2,drop=FALSE])                          
> ##D chart.Events(Drawdowns(managers[,2,drop=FALSE]), 
> ##D 		dates = n$Trough, 
> ##D 		prior=max(na.omit(n$"To Trough")), 
> ##D 		post=max(na.omit(n$Recovery)), 
> ##D 		lwd=2, colorset=redfocus, legend.loc=NULL, 
> ##D 		main = "Worst Drawdowns")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("chart.Histogram")
> ### * chart.Histogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.Histogram
> ### Title: histogram of returns
> ### Aliases: chart.Histogram
> 
> ### ** Examples
> 
> 
>     data(edhec)
>     chart.Histogram(edhec[,'Equity Market Neutral',drop=FALSE])
> 
>     # version with more breaks and the 
> 	   # standard close fit density distribution
>     chart.Histogram(edhec[,'Equity Market Neutral',drop=FALSE], 
+ 			breaks=40, methods = c("add.density", "add.rug") )
> 
>     chart.Histogram(edhec[,'Equity Market Neutral',drop=FALSE], 
+ 			methods = c( "add.density", "add.normal") )
> 
>     # version with just the histogram and 
>     # normal distribution centered on 0
>     chart.Histogram(edhec[,'Equity Market Neutral',drop=FALSE], 
+ 			methods = c( "add.density", "add.centered") )
> 
>     # add a rug to the previous plot 
> 	   # for more granularity on precisely where the distribution fell
>     chart.Histogram(edhec[,'Equity Market Neutral',drop=FALSE], 
+ 			methods = c( "add.centered", "add.density", "add.rug") )
> 
>     # now show a qqplot to give us another view 
>     # on how normal the data are
>     chart.Histogram(edhec[,'Equity Market Neutral',drop=FALSE], 
+ 			methods = c("add.centered","add.density","add.rug","add.qqplot"))
> 
>     # add risk measure(s) to show where those are 
> 	   # in relation to observed returns
>     chart.Histogram(edhec[,'Equity Market Neutral',drop=FALSE], 
+ 			methods = c("add.density","add.centered","add.rug","add.risk"))
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.QQPlot")
> ### * chart.QQPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.QQPlot
> ### Title: Plot a QQ chart
> ### Aliases: chart.QQPlot
> 
> ### ** Examples
> 
> library(MASS) 
> library(PerformanceAnalytics)
> data(managers)
> x = checkData(managers[,2, drop = FALSE], na.rm = TRUE, method = "vector")
> 
> # Panel 1: Normal distribution
> chart.QQPlot(x, main = "Normal Distribution",
+ 		line=c("quartiles"), distribution = 'norm',  
+ 		envelope=0.95)
> 
> 
> # Panel 2, Log-Normal distribution
> fit = fitdistr(1+x, 'lognormal')
> chart.QQPlot(1+x, main = "Log-Normal Distribution", envelope=0.95, 
+     distribution='lnorm',distributionParameter='meanlog = fit$estimate[[1]], 
+     sdlog = fit$estimate[[2]]')
> 
> 
> ## Not run: 
> ##D  
> ##D # Panel 3: Mixture Normal distribution
> ##D library(nor1mix)
> ##D obj = norMixEM(x,m=2)
> ##D chart.QQPlot(x, main = "Normal Mixture Distribution",
> ##D 		line=c("quartiles"), distribution = 'norMix',  distributionParameter='obj',
> ##D 		envelope=0.95)
> ##D 
> ##D 
> ##D # Panel 4: Symmetric t distribution
> ##D library(sn)
> ##D n = length(x)
> ##D fit.tSN = st.mple(as.matrix(rep(1,n)),x,symmetr = TRUE)
> ##D names(fit.tSN$dp) = c("location","scale","dof")
> ##D round(fit.tSN$dp,3)
> ##D 
> ##D chart.QQPlot(x, main = "MO Symmetric t-Distribution QQPlot",
> ##D 		xlab = "quantilesSymmetricTdistEst",line = c("quartiles"),
> ##D 		envelope = .95, distribution = 't', 
> ##D 		distributionParameter='df=fit.tSN$dp[3]',pch = 20)
> ##D 
> ##D # Panel 5: Skewed t distribution
> ##D fit.st = st.mple(as.matrix(rep(1,n)),x)
> ##D # fit.st = st.mple(y=x)  Produces same result as line above
> ##D names(fit.st$dp) = c("location","scale","skew","dof")
> ##D round(fit.st$dp,3)
> ##D 
> ##D chart.QQPlot(x, main = "MO Returns Skewed t-Distribution QQPlot",
> ##D 		xlab = "quantilesSkewedTdistEst",line = c("quartiles"),
> ##D 		envelope = .95, distribution = 'st',
> ##D 		distributionParameter = 'xi = fit.st$dp[1],
> ##D 				omega = fit.st$dp[2],alpha = fit.st$dp[3],
> ##D 				nu=fit.st$dp[4]',
> ##D 		pch = 20)
> ##D 
> ##D # Panel 6: Stable Parietian
> ##D library(fBasics)
> ##D fit.stable = stableFit(x,doplot=FALSE)
> ##D chart.QQPlot(x, main = "Stable Paretian Distribution", envelope=0.95, 
> ##D              distribution = 'stable', 
> ##D              distributionParameter = 'alpha = fit(stable.fit)$estimate[[1]], 
> ##D                  beta = fit(stable.fit)$estimate[[2]], 
> ##D                  gamma = fit(stable.fit)$estimate[[3]], 
> ##D                  delta = fit(stable.fit)$estimate[[4]], pm = 0')
> ## End(Not run)
> 
> #end examples
> 
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("chart.Regression")
> ### * chart.Regression
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.Regression
> ### Title: Takes a set of returns and relates them to a market benchmark in
> ###   a scatterplot
> ### Aliases: chart.Regression
> 
> ### ** Examples
> 
> 
> data(managers)
> chart.Regression(managers[, 1:2, drop = FALSE], 
+ 		managers[, 8, drop = FALSE], 
+ 		Rf = managers[, 10, drop = FALSE], 
+ 		excess.returns = TRUE, fit = c("loess", "linear"), 
+ 		legend.loc = "topleft")
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.RelativePerformance")
> ### * chart.RelativePerformance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.RelativePerformance
> ### Title: relative performance chart between multiple return series
> ### Aliases: chart.RelativePerformance
> 
> ### ** Examples
> 
> 
> data(managers)
> chart.RelativePerformance(managers[, 1:6, drop=FALSE], 
+ 		managers[, 8, drop=FALSE], 
+ 		colorset=rich8equal, legend.loc="bottomright", 
+ 		main="Relative Performance to S&P")
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.RiskReturnScatter")
> ### * chart.RiskReturnScatter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.RiskReturnScatter
> ### Title: scatter chart of returns vs risk for comparing multiple
> ###   instruments
> ### Aliases: chart.RiskReturnScatter
> 
> ### ** Examples
> 
> 
> data(edhec)
> chart.RiskReturnScatter(edhec, Rf = .04/12)
> chart.RiskReturnScatter(edhec, Rf = .04/12, add.boxplots = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.RollingCorrelation")
> ### * chart.RollingCorrelation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.RollingCorrelation
> ### Title: chart rolling correlation fo multiple assets
> ### Aliases: chart.RollingCorrelation
> 
> ### ** Examples
> 
> 
> # First we get the data
> data(managers)
> chart.RollingCorrelation(managers[, 1:6, drop=FALSE], 
+ 		managers[, 8, drop=FALSE], 
+ 		colorset=rich8equal, legend.loc="bottomright", 
+ 		width=24, main = "Rolling 12-Month Correlation")
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.RollingMean")
> ### * chart.RollingMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.RollingMean
> ### Title: chart the rolling mean return
> ### Aliases: chart.RollingMean
> 
> ### ** Examples
> 
> 
> data(edhec)
> chart.RollingMean(edhec[, 9, drop = FALSE])
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.RollingPerformance")
> ### * chart.RollingPerformance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.RollingPerformance
> ### Title: wrapper to create a chart of rolling performance metrics in a
> ###   line chart
> ### Aliases: chart.RollingPerformance
> 
> ### ** Examples
> 
> if(!( Sys.info()[['sysname']]=="Windows") ){
+ # if on Windows, cut and paste this example
+ data(edhec)
+ chart.RollingPerformance(edhec[, 1:3], width = 24)
+ chart.RollingPerformance(edhec[, 1:3], 
+ 		FUN = 'mean', width = 24, colorset = rich8equal, 
+ 		lwd = 2, legend.loc = "topleft", 
+ 		main = "Rolling 24-Month Mean Return")
+ chart.RollingPerformance(edhec[, 1:3], 
+ 		FUN = 'SharpeRatio.annualized', width = 24, 
+ 		colorset = rich8equal, lwd = 2, legend.loc = "topleft", 
+ 		main = "Rolling 24-Month Sharpe Ratio")
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.RollingRegression")
> ### * chart.RollingRegression
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.RollingQuantileRegression
> ### Title: A wrapper to create charts of relative regression performance
> ###   through time
> ### Aliases: chart.RollingQuantileRegression chart.RollingRegression
> ###   charts.RollingRegression
> 
> ### ** Examples
> 
> 
> # First we load the data
> data(managers)
> chart.RollingRegression(managers[, 1, drop=FALSE], 
+ 		managers[, 8, drop=FALSE], Rf = .04/12)
> charts.RollingRegression(managers[, 1:6], 
+ 		managers[, 8, drop=FALSE], Rf = .04/12, 
+ 		colorset = rich6equal, legend.loc="topleft")
> dev.new()
> chart.RollingQuantileRegression(managers[, 1, drop=FALSE], 
+ 		managers[, 8, drop=FALSE], Rf = .04/12)
> # not implemented yet
> #charts.RollingQuantileRegression(managers[, 1:6], 
> #		managers[, 8, drop=FALSE], Rf = .04/12, 
> #		colorset = rich6equal, legend.loc="topleft")
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.Scatter")
> ### * chart.Scatter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.Scatter
> ### Title: wrapper to draw scatter plot with sensible defaults
> ### Aliases: chart.Scatter
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   data(edhec)
> ##D   chart.Scatter(edhec[,1],edhec[,2])
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.SnailTrail")
> ### * chart.SnailTrail
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.SnailTrail
> ### Title: chart risk versus return over rolling time periods
> ### Aliases: chart.SnailTrail
> 
> ### ** Examples
> 
> 
> data(managers)
> chart.SnailTrail(managers[,c("HAM2","SP500 TR"),drop=FALSE], 
+ 		width=36, stepsize=12, 
+ 		colorset=c('red','orange'),
+ 		add.names="firstandlast", 
+ 		rf=.04/12, 
+ 		main="Trailing 36-month Performance Calc'd Every 12 Months")
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.StackedBar")
> ### * chart.StackedBar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.StackedBar
> ### Title: create a stacked bar plot
> ### Aliases: chart.StackedBar
> 
> ### ** Examples
> 
> 
> data(weights)
> head(weights)
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
           Convertible Arbitrage CTA Global Distressed Securities
2000-01-01            0.02500000 0.14601749             0.0250000
2001-01-01            0.15785710 0.19577551             0.0250000
2002-01-01            0.24431295 0.02500000             0.0250000
2003-01-01            0.21955470 0.06590151             0.0250000
2004-01-01            0.09780634 0.02552822             0.1050766
2005-01-01            0.02500000 0.02500000             0.2445763
           Emerging Markets Equity Market Neutral Event Driven
2000-01-01            0.025             0.3500000        0.025
2001-01-01            0.025             0.3500000        0.025
2002-01-01            0.025             0.3500000        0.025
2003-01-01            0.025             0.2817930        0.025
2004-01-01            0.025             0.3500000        0.025
2005-01-01            0.025             0.2054237        0.025
           Fixed Income Arbitrage Global Macro Long/Short Equity
2000-01-01              0.0250000        0.025             0.025
2001-01-01              0.0250000        0.025             0.025
2002-01-01              0.2056871        0.025             0.025
2003-01-01              0.2577508        0.025             0.025
2004-01-01              0.2715888        0.025             0.025
2005-01-01              0.3500000        0.025             0.025
           Merger Arbitrage Relative Value
2000-01-01       0.07146246      0.2575201
2001-01-01       0.12136740      0.0250000
2002-01-01       0.02500000      0.0250000
2003-01-01       0.02500000      0.0250000
2004-01-01       0.02500000      0.0250000
2005-01-01       0.02500000      0.0250000
> 
> # With the legend "under" the chart
> chart.StackedBar(weights, date.format="%Y", cex.legend = 0.7, colorset=rainbow12equal)
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
> 
> # Without the legend
> chart.StackedBar(weights, colorset=rainbow12equal, legend.loc=NULL)
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
> 
> # for one row of data, use 'unstacked' for a better chart
> chart.StackedBar(weights[1,,drop=FALSE], unstacked=TRUE, las=3)
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.TimeSeries")
> ### * chart.TimeSeries
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.TimeSeries
> ### Title: Creates a time series chart with some extensions.
> ### Aliases: chart.TimeSeries chart.TimeSeries.base
> ###   chart.TimeSeries.builtin chart.TimeSeries.dygraph
> ###   chart.TimeSeries.ggplot2 chart.TimeSeries.googlevis
> ###   chart.TimeSeries.plotly charts.TimeSeries
> 
> ### ** Examples
> 
> 
> 
> # These are start and end dates, formatted as xts ranges.
> ## http://www.nber.org-cycles.html
> cycles.dates<-c("1857-06/1858-12",
+                 "1860-10/1861-06",
+                 "1865-04/1867-12",
+                 "1869-06/1870-12",
+                 "1873-10/1879-03",
+                 "1882-03/1885-05",
+                 "1887-03/1888-04",
+                 "1890-07/1891-05",
+                 "1893-01/1894-06",
+                 "1895-12/1897-06",
+                 "1899-06/1900-12",
+                 "1902-09/1904-08",
+                 "1907-05/1908-06",
+                 "1910-01/1912-01",
+                 "1913-01/1914-12",
+                 "1918-08/1919-03",
+                 "1920-01/1921-07",
+                 "1923-05/1924-07",
+                 "1926-10/1927-11",
+                 "1929-08/1933-03",
+                 "1937-05/1938-06",
+                 "1945-02/1945-10",
+                 "1948-11/1949-10",
+                 "1953-07/1954-05",
+                 "1957-08/1958-04",
+                 "1960-04/1961-02",
+                 "1969-12/1970-11",
+                 "1973-11/1975-03",
+                 "1980-01/1980-07",
+                 "1981-07/1982-11",
+                 "1990-07/1991-03",
+                 "2001-03/2001-11",
+                 "2007-12/2009-06"
+                 )
> # Event lists - FOR BEST RESULTS, KEEP THESE DATES IN ORDER
> risk.dates = c(
+     "Oct 87",
+     "Feb 94",
+     "Jul 97",
+     "Aug 98",
+     "Oct 98",
+     "Jul 00",
+     "Sep 01")
> risk.labels = c(
+     "Black Monday",
+     "Bond Crash",
+     "Asian Crisis",
+     "Russian Crisis",
+     "LTCM",
+     "Tech Bubble",
+     "Sept 11")
> data(edhec)
> 
> R=edhec[,"Funds of Funds",drop=FALSE]
> Return.cumulative = cumprod(1+R) - 1
> chart.TimeSeries(Return.cumulative)
> chart.TimeSeries(Return.cumulative, colorset = "darkblue", 
+                  legend.loc = "bottomright", 
+                  period.areas = cycles.dates, 
+                  period.color = rgb(204/255, 204/255, 204/255, alpha=0.25), 
+                  event.lines = risk.dates, 
+                  event.labels = risk.labels, 
+                  event.color = "red", lwd = 2)
> 
> 
> 
> 
> cleanEx()
> nameEx("chart.VaRSensitivity")
> ### * chart.VaRSensitivity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chart.VaRSensitivity
> ### Title: show the sensitivity of Value-at-Risk or Expected Shortfall
> ###   estimates
> ### Aliases: chart.VaRSensitivity
> 
> ### ** Examples
> 
> 
> data(managers)
> chart.VaRSensitivity(managers[,1,drop=FALSE], 
+ 		methods=c("HistoricalVaR", "ModifiedVaR", "GaussianVaR"), 
+ 		colorset=bluefocus, lwd=2)
> 
> 
> 
> 
> cleanEx()
> nameEx("charts.PerformanceSummary")
> ### * charts.PerformanceSummary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: charts.PerformanceSummary
> ### Title: Create combined wealth index, period performance, and drawdown
> ###   chart
> ### Aliases: charts.PerformanceSummary
> 
> ### ** Examples
> 
> 
> data(edhec)
> charts.PerformanceSummary(edhec[,c(1,13)])
> 
> 
> 
> 
> cleanEx()
> nameEx("charts.RollingPerformance")
> ### * charts.RollingPerformance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: charts.RollingPerformance
> ### Title: rolling performance chart
> ### Aliases: charts.RollingPerformance
> 
> ### ** Examples
> 
> if(!( Sys.info()[['sysname']]=="Windows") ){
+ # if on Windows, cut and paste this example
+ 
+ data(managers)
+ charts.RollingPerformance(managers[,1:8], 
+                           Rf=managers[,10,drop=FALSE], 
+                           colorset=tim8equal, 
+                           main="Rolling 12-Month Performance", 
+                           legend.loc="topleft")
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("checkData")
> ### * checkData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checkData
> ### Title: check input data type and format and coerce to the desired
> ###   output type
> ### Aliases: checkData
> 
> ### ** Examples
> 
> 
> data(edhec)
> x = checkData(edhec)
> class(x)
[1] "xts" "zoo"
> head(x)
           Convertible Arbitrage CTA Global Distressed Securities
1997-01-31                0.0119     0.0393                0.0178
1997-02-28                0.0123     0.0298                0.0122
1997-03-31                0.0078    -0.0021               -0.0012
1997-04-30                0.0086    -0.0170                0.0030
1997-05-31                0.0156    -0.0015                0.0233
1997-06-30                0.0212     0.0085                0.0217
           Emerging Markets Equity Market Neutral Event Driven
1997-01-31           0.0791                0.0189       0.0213
1997-02-28           0.0525                0.0101       0.0084
1997-03-31          -0.0120                0.0016      -0.0023
1997-04-30           0.0119                0.0119      -0.0005
1997-05-31           0.0315                0.0189       0.0346
1997-06-30           0.0581                0.0165       0.0258
           Fixed Income Arbitrage Global Macro Long/Short Equity
1997-01-31                 0.0191       0.0573            0.0281
1997-02-28                 0.0122       0.0175           -0.0006
1997-03-31                 0.0109      -0.0119           -0.0084
1997-04-30                 0.0130       0.0172            0.0084
1997-05-31                 0.0118       0.0108            0.0394
1997-06-30                 0.0108       0.0218            0.0223
           Merger Arbitrage Relative Value Short Selling Funds of Funds
1997-01-31           0.0150         0.0180       -0.0166         0.0317
1997-02-28           0.0034         0.0118        0.0426         0.0106
1997-03-31           0.0060         0.0010        0.0778        -0.0077
1997-04-30          -0.0001         0.0122       -0.0129         0.0009
1997-05-31           0.0197         0.0173       -0.0737         0.0275
1997-06-30           0.0231         0.0198       -0.0065         0.0225
> tail(x)
           Convertible Arbitrage CTA Global Distressed Securities
2019-06-30                0.0089     0.0240                0.0075
2019-07-31                0.0032     0.0206               -0.0032
2019-08-31                0.0019     0.0300               -0.0089
2019-09-30                0.0023    -0.0273               -0.0022
2019-10-31                0.0032    -0.0204               -0.0033
2019-11-30                0.0060     0.0058               -0.0043
           Emerging Markets Equity Market Neutral Event Driven
2019-06-30           0.0315                0.0038       0.0158
2019-07-31           0.0044                0.0029       0.0028
2019-08-31          -0.0348                0.0009      -0.0139
2019-09-30           0.0076               -0.0027       0.0008
2019-10-31           0.0204               -0.0014       0.0027
2019-11-30          -0.0008                0.0004       0.0090
           Fixed Income Arbitrage Global Macro Long/Short Equity
2019-06-30                 0.0008       0.0221            0.0193
2019-07-31                 0.0031       0.0065            0.0046
2019-08-31                -0.0033       0.0126           -0.0100
2019-09-30                 0.0028      -0.0064           -0.0007
2019-10-31                 0.0034      -0.0056            0.0104
2019-11-30                 0.0041      -0.0017            0.0138
           Merger Arbitrage Relative Value Short Selling Funds of Funds
2019-06-30           0.0044         0.0075       -0.0073         0.0137
2019-07-31           0.0057         0.0039       -0.0033         0.0037
2019-08-31          -0.0003        -0.0031        0.0004        -0.0063
2019-09-30           0.0037         0.0054       -0.0035        -0.0033
2019-10-31           0.0052         0.0012       -0.0028         0.0035
2019-11-30           0.0053         0.0068       -0.0140         0.0071
> # Note that passing in a single column loses the row and column names
> x = checkData(edhec[,1])
> class(x)
[1] "xts" "zoo"
> head(x)
           Convertible Arbitrage
1997-01-31                0.0119
1997-02-28                0.0123
1997-03-31                0.0078
1997-04-30                0.0086
1997-05-31                0.0156
1997-06-30                0.0212
> # Include the "drop" attribute to keep row and column names
> x = checkData(edhec[,1,drop=FALSE])
> class(x)
[1] "xts" "zoo"
> head(x)
           Convertible Arbitrage
1997-01-31                0.0119
1997-02-28                0.0123
1997-03-31                0.0078
1997-04-30                0.0086
1997-05-31                0.0156
1997-06-30                0.0212
> x = checkData(edhec, method = "matrix")
> class(x)
[1] "matrix"
> head(x)
           Convertible Arbitrage CTA Global Distressed Securities
1997-01-31                0.0119     0.0393                0.0178
1997-02-28                0.0123     0.0298                0.0122
1997-03-31                0.0078    -0.0021               -0.0012
1997-04-30                0.0086    -0.0170                0.0030
1997-05-31                0.0156    -0.0015                0.0233
1997-06-30                0.0212     0.0085                0.0217
           Emerging Markets Equity Market Neutral Event Driven
1997-01-31           0.0791                0.0189       0.0213
1997-02-28           0.0525                0.0101       0.0084
1997-03-31          -0.0120                0.0016      -0.0023
1997-04-30           0.0119                0.0119      -0.0005
1997-05-31           0.0315                0.0189       0.0346
1997-06-30           0.0581                0.0165       0.0258
           Fixed Income Arbitrage Global Macro Long/Short Equity
1997-01-31                 0.0191       0.0573            0.0281
1997-02-28                 0.0122       0.0175           -0.0006
1997-03-31                 0.0109      -0.0119           -0.0084
1997-04-30                 0.0130       0.0172            0.0084
1997-05-31                 0.0118       0.0108            0.0394
1997-06-30                 0.0108       0.0218            0.0223
           Merger Arbitrage Relative Value Short Selling Funds of Funds
1997-01-31           0.0150         0.0180       -0.0166         0.0317
1997-02-28           0.0034         0.0118        0.0426         0.0106
1997-03-31           0.0060         0.0010        0.0778        -0.0077
1997-04-30          -0.0001         0.0122       -0.0129         0.0009
1997-05-31           0.0197         0.0173       -0.0737         0.0275
1997-06-30           0.0231         0.0198       -0.0065         0.0225
> x = checkData(edhec[,1], method = "vector")
> class(x)
[1] "numeric"
> head(x)
[1] 0.0119 0.0123 0.0078 0.0086 0.0156 0.0212
> 
> 
> 
> 
> cleanEx()
> nameEx("edhec")
> ### * edhec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edhec
> ### Title: EDHEC-Risk Hedge Fund Style Indices
> ### Aliases: edhec
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(edhec)
> 
> #preview the data
> head(edhec)
           Convertible Arbitrage CTA Global Distressed Securities
1997-01-31                0.0119     0.0393                0.0178
1997-02-28                0.0123     0.0298                0.0122
1997-03-31                0.0078    -0.0021               -0.0012
1997-04-30                0.0086    -0.0170                0.0030
1997-05-31                0.0156    -0.0015                0.0233
1997-06-30                0.0212     0.0085                0.0217
           Emerging Markets Equity Market Neutral Event Driven
1997-01-31           0.0791                0.0189       0.0213
1997-02-28           0.0525                0.0101       0.0084
1997-03-31          -0.0120                0.0016      -0.0023
1997-04-30           0.0119                0.0119      -0.0005
1997-05-31           0.0315                0.0189       0.0346
1997-06-30           0.0581                0.0165       0.0258
           Fixed Income Arbitrage Global Macro Long/Short Equity
1997-01-31                 0.0191       0.0573            0.0281
1997-02-28                 0.0122       0.0175           -0.0006
1997-03-31                 0.0109      -0.0119           -0.0084
1997-04-30                 0.0130       0.0172            0.0084
1997-05-31                 0.0118       0.0108            0.0394
1997-06-30                 0.0108       0.0218            0.0223
           Merger Arbitrage Relative Value Short Selling Funds of Funds
1997-01-31           0.0150         0.0180       -0.0166         0.0317
1997-02-28           0.0034         0.0118        0.0426         0.0106
1997-03-31           0.0060         0.0010        0.0778        -0.0077
1997-04-30          -0.0001         0.0122       -0.0129         0.0009
1997-05-31           0.0197         0.0173       -0.0737         0.0275
1997-06-30           0.0231         0.0198       -0.0065         0.0225
> 
> #summary period statistics
> summary(edhec)
     Index            Convertible Arbitrage   CTA Global       
 Min.   :1997-01-31   Min.   :-0.12370      Min.   :-0.056800  
 1st Qu.:2002-10-15   1st Qu.:-0.00005      1st Qu.:-0.011900  
 Median :2008-06-30   Median : 0.00640      Median : 0.002000  
 Mean   :2008-06-30   Mean   : 0.00550      Mean   : 0.004158  
 3rd Qu.:2014-03-15   3rd Qu.: 0.01340      3rd Qu.: 0.020250  
 Max.   :2019-11-30   Max.   : 0.06110      Max.   : 0.069100  
 Distressed Securities Emerging Markets    Equity Market Neutral
 Min.   :-0.083600     Min.   :-0.192200   Min.   :-0.058700    
 1st Qu.:-0.002150     1st Qu.:-0.009750   1st Qu.: 0.001050    
 Median : 0.008600     Median : 0.009100   Median : 0.004700    
 Mean   : 0.006622     Mean   : 0.006246   Mean   : 0.004356    
 3rd Qu.: 0.017500     3rd Qu.: 0.025600   3rd Qu.: 0.008100    
 Max.   : 0.050400     Max.   : 0.123000   Max.   : 0.025300    
  Event Driven       Fixed Income Arbitrage  Global Macro      
 Min.   :-0.088600   Min.   :-0.086700      Min.   :-0.031300  
 1st Qu.:-0.001450   1st Qu.: 0.001550      1st Qu.:-0.003950  
 Median : 0.008300   Median : 0.005400      Median : 0.003800  
 Mean   : 0.006216   Mean   : 0.004267      Mean   : 0.005378  
 3rd Qu.: 0.015900   3rd Qu.: 0.009250      3rd Qu.: 0.012400  
 Max.   : 0.044200   Max.   : 0.036500      Max.   : 0.073800  
 Long/Short Equity  Merger Arbitrage    Relative Value      Short Selling      
 Min.   :-0.06750   Min.   :-0.054400   Min.   :-0.069200   Min.   :-0.134000  
 1st Qu.:-0.00475   1st Qu.: 0.000600   1st Qu.: 0.001000   1st Qu.:-0.026450  
 Median : 0.00790   Median : 0.005800   Median : 0.006400   Median :-0.005300  
 Mean   : 0.00626   Mean   : 0.005293   Mean   : 0.005701   Mean   :-0.001934  
 3rd Qu.: 0.01910   3rd Qu.: 0.011000   3rd Qu.: 0.012750   3rd Qu.: 0.018200  
 Max.   : 0.07450   Max.   : 0.027200   Max.   : 0.039200   Max.   : 0.246300  
 Funds of Funds    
 Min.   :-0.06180  
 1st Qu.:-0.00350  
 Median : 0.00520  
 Mean   : 0.00423  
 3rd Qu.: 0.01200  
 Max.   : 0.06660  
> 
> #cumulative index returns
> tail(cumprod(1+edhec),1)
           Convertible Arbitrage CTA Global Distressed Securities
2019-11-30              4.354959    2.91094              5.905411
           Emerging Markets Equity Market Neutral Event Driven
2019-11-30         4.799286              3.275437     5.290018
           Fixed Income Arbitrage Global Macro Long/Short Equity
2019-11-30                3.16749     4.248922          5.272646
           Merger Arbitrage Relative Value Short Selling Funds of Funds
2019-11-30         4.218276       4.691544     0.4372135       3.091029
> 
> 
> 
> cleanEx()
> nameEx("findDrawdowns")
> ### * findDrawdowns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Drawdowns
> ### Title: Find the drawdowns and drawdown levels in a timeseries.
> ### Aliases: Drawdowns findDrawdowns
> 
> ### ** Examples
> 
> 
> data(edhec)
> findDrawdowns(edhec[,"Funds of Funds", drop=FALSE])
$return
 [1]  0.00000000 -0.00770000  0.00000000 -0.01326634  0.00000000 -0.07069135
 [7]  0.00000000 -0.03877182  0.00000000 -0.03737506  0.00000000 -0.01627767
[13]  0.00000000 -0.00150000  0.00000000 -0.02601701  0.00000000 -0.00040000
[19]  0.00000000 -0.01742180  0.00000000 -0.01843796  0.00000000 -0.01490000
[25]  0.00000000 -0.01655473  0.00000000 -0.02220000  0.00000000 -0.20591447
[31]  0.00000000 -0.00400000  0.00000000 -0.00739256  0.00000000 -0.07837768
[37]  0.00000000 -0.00070000  0.00000000 -0.05932734

$from
 [1]   1   3   5  10  14  17  27  40  44  45  54  55  60  62  63  66  74  75  76
[20]  88  95  99 103 106 107 113 118 128 130 131 210 211 212 213 215 222 248 251
[39] 252 254

$trough
 [1]   1   3   5  11  14  22  27  41  44  47  54  57  60  62  63  70  74  75  76
[20]  92  95 100 103 106 107 115 118 128 130 144 210 211 212 214 215 230 248 251
[39] 252 264

$to
 [1]   3   5  10  14  17  27  40  44  45  54  55  60  62  63  66  74  75  76  88
[20]  95  99 103 106 107 113 118 128 130 131 210 211 212 213 215 222 248 251 252
[39] 254 276

$length
 [1]  3  3  6  5  4 11 14  5  2 10  2  6  3  2  4  9  2  2 13  8  5  5  4  2  7
[26]  6 11  3  2 80  2  2  2  3  8 27  4  2  3 23

$peaktotrough
 [1]  1  1  1  2  1  6  1  2  1  3  1  3  1  1  1  5  1  1  1  5  1  2  1  1  1
[26]  3  1  1  1 14  1  1  1  2  1  9  1  1  1 11

$recovery
 [1]  2  2  5  3  3  5 13  3  1  7  1  3  2  1  3  4  1  1 12  3  4  3  3  1  6
[26]  3 10  2  1 66  1  1  1  1  7 18  3  1  2 12

> sortDrawdowns(findDrawdowns(edhec[,"Funds of Funds", drop=FALSE]))
$return
 [1] -0.20591447 -0.07837768 -0.07069135 -0.05932734 -0.03877182 -0.03737506
 [7] -0.02601701 -0.02220000 -0.01843796 -0.01742180 -0.01655473 -0.01627767
[13] -0.01490000 -0.01326634 -0.00770000 -0.00739256 -0.00400000 -0.00150000
[19] -0.00070000 -0.00040000  0.00000000  0.00000000  0.00000000  0.00000000
[25]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
[31]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
[37]  0.00000000  0.00000000  0.00000000  0.00000000

$from
 [1] 131 222  17 254  40  45  66 128  99  88 113  55 106  10   3 213 211  62 251
[20]  75   1   5  14  27  44  54  60  63  74  76  95 103 107 118 130 210 212 215
[39] 248 252

$trough
 [1] 144 230  22 264  41  47  70 128 100  92 115  57 106  11   3 214 211  62 251
[20]  75   1   5  14  27  44  54  60  63  74  76  95 103 107 118 130 210 212 215
[39] 248 252

$to
 [1] 210 248  27 276  44  54  74 130 103  95 118  60 107  14   5 215 212  63 252
[20]  76   3  10  17  40  45  55  62  66  75  88  99 106 113 128 131 211 213 222
[39] 251 254

$length
 [1] 80 27 11 23  5 10  9  3  5  8  6  6  2  5  3  3  2  2  2  2  3  6  4 14  2
[26]  2  3  4  2 13  5  4  7 11  2  2  2  8  4  3

$peaktotrough
 [1] 14  9  6 11  2  3  5  1  2  5  3  3  1  2  1  2  1  1  1  1  1  1  1  1  1
[26]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1

$recovery
 [1] 66 18  5 12  3  7  4  2  3  3  3  3  1  3  2  1  1  1  1  1  2  5  3 13  1
[26]  1  2  3  1 12  4  3  6 10  1  1  1  7  3  2

> 
> 
> 
> 
> cleanEx()
> nameEx("kurtosis")
> ### * kurtosis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kurtosis
> ### Title: Kurtosis
> ### Aliases: kurtosis
> 
> ### ** Examples
> 
> 
> ## mean -
> ## var -
>    # Mean, Variance:
>    r = rnorm(100)
>    mean(r)
[1] 0.1088874
>    var(r)
[1] 0.8067621
> 
> ## kurtosis -
>    kurtosis(r)
[1] 0.007653206
> 
> data(managers)
> kurtosis(managers[,1:8])
                    HAM1     HAM2     HAM3      HAM4     HAM5      HAM6
Excess Kurtosis 2.361589 2.379398 2.682936 0.8632077 2.314343 -0.348865
                EDHEC LS EQ  SP500 TR
Excess Kurtosis   0.9104791 0.5598191
> 
> data(portfolio_bacon)
> print(kurtosis(portfolio_bacon[,1], method="sample")) #expected 3.03
[1] 3.027405
> print(kurtosis(portfolio_bacon[,1], method="sample_excess")) #expected -0.41
[1] -0.4076603
> print(kurtosis(managers['1996'], method="sample"))
                    HAM1     HAM2     HAM3    HAM4 HAM5 HAM6 EDHEC LS EQ
Excess Kurtosis 4.571471 6.932463 5.039467 4.13553    0    0           0
                SP500 TR US 10Y TR US 3m TR
Excess Kurtosis 4.893647  3.250776 4.817395
> print(kurtosis(managers['1996',1], method="sample"))
[1] 4.571471
> 
> 
> 
> 
> cleanEx()
> nameEx("managers")
> ### * managers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: managers
> ### Title: Hypothetical Alternative Asset Manager and Benchmark Data
> ### Aliases: managers
> ### Keywords: datasets ts
> 
> ### ** Examples
> 
> data(managers)
> 
> #preview the data
> head(managers)
              HAM1 HAM2    HAM3    HAM4 HAM5 HAM6 EDHEC LS EQ SP500 TR
1996-01-31  0.0074   NA  0.0349  0.0222   NA   NA          NA   0.0340
1996-02-29  0.0193   NA  0.0351  0.0195   NA   NA          NA   0.0093
1996-03-31  0.0155   NA  0.0258 -0.0098   NA   NA          NA   0.0096
1996-04-30 -0.0091   NA  0.0449  0.0236   NA   NA          NA   0.0147
1996-05-31  0.0076   NA  0.0353  0.0028   NA   NA          NA   0.0258
1996-06-30 -0.0039   NA -0.0303 -0.0019   NA   NA          NA   0.0038
           US 10Y TR US 3m TR
1996-01-31   0.00380  0.00456
1996-02-29  -0.03532  0.00398
1996-03-31  -0.01057  0.00371
1996-04-30  -0.01739  0.00428
1996-05-31  -0.00543  0.00443
1996-06-30   0.01507  0.00412
> 
> #summary period statistics
> summary(managers)
     Index                 HAM1                HAM2         
 Min.   :1996-01-31   Min.   :-0.094400   Min.   :-0.03710  
 1st Qu.:1998-10-23   1st Qu.:-0.000025   1st Qu.:-0.00980  
 Median :2001-07-15   Median : 0.011150   Median : 0.00820  
 Mean   :2001-07-15   Mean   : 0.011123   Mean   : 0.01414  
 3rd Qu.:2004-04-07   3rd Qu.: 0.024850   3rd Qu.: 0.02520  
 Max.   :2006-12-31   Max.   : 0.069200   Max.   : 0.15560  
                                          NA's   :7         
      HAM3                HAM4               HAM5               HAM6         
 Min.   :-0.071800   Min.   :-0.17590   Min.   :-0.13200   Min.   :-0.04040  
 1st Qu.:-0.005375   1st Qu.:-0.01985   1st Qu.:-0.01640   1st Qu.:-0.00158  
 Median : 0.010200   Median : 0.01375   Median : 0.00380   Median : 0.01285  
 Mean   : 0.012447   Mean   : 0.01102   Mean   : 0.00409   Mean   : 0.01105  
 3rd Qu.: 0.031375   3rd Qu.: 0.04600   3rd Qu.: 0.03090   3rd Qu.: 0.02548  
 Max.   : 0.179600   Max.   : 0.15080   Max.   : 0.17470   Max.   : 0.05830  
                                        NA's   :55         NA's   :68        
  EDHEC LS EQ           SP500 TR           US 10Y TR            US 3m TR       
 Min.   :-0.055200   Min.   :-0.144600   Min.   :-0.070920   Min.   :0.000660  
 1st Qu.:-0.003175   1st Qu.:-0.017327   1st Qu.:-0.008515   1st Qu.:0.001570  
 Median : 0.011000   Median : 0.010950   Median : 0.004425   Median :0.003845  
 Mean   : 0.009545   Mean   : 0.008665   Mean   : 0.004385   Mean   :0.003226  
 3rd Qu.: 0.021450   3rd Qu.: 0.038025   3rd Qu.: 0.016660   3rd Qu.:0.004395  
 Max.   : 0.074500   Max.   : 0.097800   Max.   : 0.050550   Max.   :0.006580  
 NA's   :12                                                                    
> 
> #cumulative returns
> tail(cumprod(1+managers),1)
               HAM1 HAM2     HAM3    HAM4 HAM5 HAM6 EDHEC LS EQ SP500 TR
2006-12-31 4.126671   NA 4.706732 3.52944   NA   NA          NA 2.761619
           US 10Y TR US 3m TR
2006-12-31  1.734037 1.529681
> 
> 
> 
> cleanEx()
> nameEx("maxDrawdown")
> ### * maxDrawdown
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: maxDrawdown
> ### Title: caclulate the maximum drawdown from peak equity
> ### Aliases: maxDrawdown
> 
> ### ** Examples
> 
> 
> data(edhec)
> t(round(maxDrawdown(edhec[,"Funds of Funds"]),4))
       [,1]
[1,] 0.2059
> data(managers)
> t(round(maxDrawdown(managers),4))
            Worst Drawdown
HAM1                0.1518
HAM2                0.2399
HAM3                0.2894
HAM4                0.2874
HAM5                0.3405
HAM6                0.0788
EDHEC LS EQ         0.1075
SP500 TR            0.4473
US 10Y TR           0.1006
US 3m TR            0.0000
> 
> 
> 
> 
> cleanEx()
> nameEx("mean.geometric")
> ### * mean.geometric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mean.geometric
> ### Title: calculate attributes relative to the mean of the observation
> ###   series given, including geometric, stderr, LCL and UCL
> ### Aliases: mean.geometric mean.utils mean.UCL mean.LCL mean.stderr
> ###   Mean.arithmetic
> 
> ### ** Examples
> 
> 
> data(edhec)
> mean.geometric(edhec[,"Funds of Funds"])
               Funds of Funds
Geometric Mean    0.004112082
> mean.stderr(edhec[,"Funds of Funds"])
               Funds of Funds
Standard Error   0.0009269411
> mean.UCL(edhec[,"Funds of Funds"])
                       Funds of Funds
Upper Confidence Level     0.00605465
> mean.LCL(edhec[,"Funds of Funds"])
                       Funds of Funds
Lower Confidence Level    0.002404987
> 
> 
> 
> cleanEx()
> nameEx("portfolio_bacon")
> ### * portfolio_bacon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: portfolio_bacon
> ### Title: Bacon(2008) Data
> ### Aliases: portfolio_bacon
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(portfolio_bacon)
> 
> #preview the data
> head(portfolio_bacon)
Warning: index class is Date, which does not support timezones.
Expected 'UTC' timezone, but tzone is ‘’
           portfolio.monthly.return.... benchmark.return....
2000-01-30                        0.003                0.002
2000-02-27                        0.026                0.025
2000-03-30                        0.011                0.018
2000-04-29                       -0.010               -0.011
2000-05-30                        0.015                0.014
2000-06-29                        0.025                0.018
> 
> #summary period statistics
> summary(portfolio_bacon)
     Index            portfolio.monthly.return.... benchmark.return....
 Min.   :2000-01-30   Min.   :-0.0650              Min.   :-0.06700    
 1st Qu.:2000-07-22   1st Qu.:-0.0110              1st Qu.:-0.00725    
 Median :2001-01-14   Median : 0.0130              Median : 0.01450    
 Mean   :2001-01-13   Mean   : 0.0090              Mean   : 0.01004    
 3rd Qu.:2001-07-06   3rd Qu.: 0.0295              3rd Qu.: 0.02850    
 Max.   :2001-12-30   Max.   : 0.0810              Max.   : 0.08300    
> 
> #cumulative returns
> tail(cumprod(1+portfolio_bacon),1)
Warning: index class is Date, which does not support timezones.
Expected 'UTC' timezone, but tzone is ‘’
           portfolio.monthly.return.... benchmark.return....
2001-12-30                     1.218106             1.249887
> 
> 
> 
> cleanEx()
> nameEx("prices")
> ### * prices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prices
> ### Title: Selected Price Series Example Data
> ### Aliases: prices
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(prices)
> 
> #preview the data
> head(prices)
           AdjClose
1999-01-04    82.28
1999-01-05    85.26
1999-01-06    84.86
1999-01-07    85.51
1999-01-08    84.33
1999-01-11    85.09
> 
> 
> 
> 
> cleanEx()
> nameEx("skewness")
> ### * skewness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: skewness
> ### Title: Skewness
> ### Aliases: skewness
> 
> ### ** Examples
> 
> 
> ## mean -
> ## var -
>    # Mean, Variance:
>    r = rnorm(100)
>    mean(r)
[1] 0.1088874
>    var(r)
[1] 0.8067621
> 
> ## skewness -
>    skewness(r)
[1] -0.0722319
> data(managers)
> skewness(managers)
               HAM1    HAM2      HAM3       HAM4       HAM5       HAM6
Skewness -0.6588445 1.45804 0.7908285 -0.4310631 0.07380869 -0.2799993
         EDHEC LS EQ   SP500 TR  US 10Y TR  US 3m TR
Skewness  0.01773013 -0.5531032 -0.4048722 -0.328171
> 
> 
> 
> 
> cleanEx()
> nameEx("sortDrawdowns")
> ### * sortDrawdowns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sortDrawdowns
> ### Title: order list of drawdowns from worst to best
> ### Aliases: sortDrawdowns
> 
> ### ** Examples
> 
> 
> data(edhec)
> findDrawdowns(edhec[,"Funds of Funds", drop=FALSE])
$return
 [1]  0.00000000 -0.00770000  0.00000000 -0.01326634  0.00000000 -0.07069135
 [7]  0.00000000 -0.03877182  0.00000000 -0.03737506  0.00000000 -0.01627767
[13]  0.00000000 -0.00150000  0.00000000 -0.02601701  0.00000000 -0.00040000
[19]  0.00000000 -0.01742180  0.00000000 -0.01843796  0.00000000 -0.01490000
[25]  0.00000000 -0.01655473  0.00000000 -0.02220000  0.00000000 -0.20591447
[31]  0.00000000 -0.00400000  0.00000000 -0.00739256  0.00000000 -0.07837768
[37]  0.00000000 -0.00070000  0.00000000 -0.05932734

$from
 [1]   1   3   5  10  14  17  27  40  44  45  54  55  60  62  63  66  74  75  76
[20]  88  95  99 103 106 107 113 118 128 130 131 210 211 212 213 215 222 248 251
[39] 252 254

$trough
 [1]   1   3   5  11  14  22  27  41  44  47  54  57  60  62  63  70  74  75  76
[20]  92  95 100 103 106 107 115 118 128 130 144 210 211 212 214 215 230 248 251
[39] 252 264

$to
 [1]   3   5  10  14  17  27  40  44  45  54  55  60  62  63  66  74  75  76  88
[20]  95  99 103 106 107 113 118 128 130 131 210 211 212 213 215 222 248 251 252
[39] 254 276

$length
 [1]  3  3  6  5  4 11 14  5  2 10  2  6  3  2  4  9  2  2 13  8  5  5  4  2  7
[26]  6 11  3  2 80  2  2  2  3  8 27  4  2  3 23

$peaktotrough
 [1]  1  1  1  2  1  6  1  2  1  3  1  3  1  1  1  5  1  1  1  5  1  2  1  1  1
[26]  3  1  1  1 14  1  1  1  2  1  9  1  1  1 11

$recovery
 [1]  2  2  5  3  3  5 13  3  1  7  1  3  2  1  3  4  1  1 12  3  4  3  3  1  6
[26]  3 10  2  1 66  1  1  1  1  7 18  3  1  2 12

> sortDrawdowns(findDrawdowns(edhec[,"Funds of Funds", drop=FALSE]))
$return
 [1] -0.20591447 -0.07837768 -0.07069135 -0.05932734 -0.03877182 -0.03737506
 [7] -0.02601701 -0.02220000 -0.01843796 -0.01742180 -0.01655473 -0.01627767
[13] -0.01490000 -0.01326634 -0.00770000 -0.00739256 -0.00400000 -0.00150000
[19] -0.00070000 -0.00040000  0.00000000  0.00000000  0.00000000  0.00000000
[25]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
[31]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000
[37]  0.00000000  0.00000000  0.00000000  0.00000000

$from
 [1] 131 222  17 254  40  45  66 128  99  88 113  55 106  10   3 213 211  62 251
[20]  75   1   5  14  27  44  54  60  63  74  76  95 103 107 118 130 210 212 215
[39] 248 252

$trough
 [1] 144 230  22 264  41  47  70 128 100  92 115  57 106  11   3 214 211  62 251
[20]  75   1   5  14  27  44  54  60  63  74  76  95 103 107 118 130 210 212 215
[39] 248 252

$to
 [1] 210 248  27 276  44  54  74 130 103  95 118  60 107  14   5 215 212  63 252
[20]  76   3  10  17  40  45  55  62  66  75  88  99 106 113 128 131 211 213 222
[39] 251 254

$length
 [1] 80 27 11 23  5 10  9  3  5  8  6  6  2  5  3  3  2  2  2  2  3  6  4 14  2
[26]  2  3  4  2 13  5  4  7 11  2  2  2  8  4  3

$peaktotrough
 [1] 14  9  6 11  2  3  5  1  2  5  3  3  1  2  1  2  1  1  1  1  1  1  1  1  1
[26]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1

$recovery
 [1] 66 18  5 12  3  7  4  2  3  3  3  3  1  3  2  1  1  1  1  1  2  5  3 13  1
[26]  1  2  3  1 12  4  3  6 10  1  1  1  7  3  2

> 
> 
> 
> 
> cleanEx()
> nameEx("table.AnnualizedReturns")
> ### * table.AnnualizedReturns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.AnnualizedReturns
> ### Title: Annualized Returns Summary: Statistics and Stylized Facts
> ### Aliases: table.AnnualizedReturns
> 
> ### ** Examples
> 
> 
> data(managers)
> table.AnnualizedReturns(managers[,1:8])
                            HAM1   HAM2   HAM3   HAM4   HAM5   HAM6 EDHEC LS EQ
Annualized Return         0.1375 0.1747 0.1512 0.1215 0.0373 0.1373      0.1180
Annualized Std Dev        0.0888 0.1272 0.1265 0.1843 0.1584 0.0825      0.0708
Annualized Sharpe (Rf=0%) 1.5491 1.3732 1.1955 0.6592 0.2356 1.6642      1.6657
                          SP500 TR
Annualized Return           0.0967
Annualized Std Dev          0.1500
Annualized Sharpe (Rf=0%)   0.6449
> 
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> result = t(table.AnnualizedReturns(managers[,1:8], Rf=.04/12))
> 
> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, 
+          cdec=c(3,3,1)), rmar = 0.8, cmar = 2,  max.cex=.9, 
+          halign = "center", valign = "top", row.valign="center", 
+          wrap.rownames=20, wrap.colnames=10, col.rownames=c("red", 
+          rep("darkgray",5), rep("orange",2)), mar = c(0,0,3,0)+0.1)
>          
> title(main="Annualized Performance")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.Arbitrary")
> ### * table.Arbitrary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.Arbitrary
> ### Title: wrapper function for combining arbitrary function list into a
> ###   table
> ### Aliases: table.Arbitrary statsTable
> 
> ### ** Examples
> 
> 
> data(edhec)
> table.Arbitrary(edhec,metrics=c("VaR", "ES"),
+                 metricsNames=c("Modified VaR","Modified Expected Shortfall"))
                            Convertible Arbitrage  CTA Global
Modified VaR                          -0.02454220 -0.03280780
Modified Expected Shortfall           -0.08948631 -0.04116413
                            Distressed Securities Emerging Markets
Modified VaR                          -0.02496078      -0.05218143
Modified Expected Shortfall           -0.05170691      -0.11567185
                            Equity Market Neutral Event Driven
Modified VaR                          -0.01059654  -0.02547391
Modified Expected Shortfall           -0.03786594  -0.05128337
                            Fixed Income Arbitrage Global Macro
Modified VaR                           -0.01741730  -0.01327363
Modified Expected Shortfall            -0.05001278  -0.01638037
                            Long/Short Equity Merger Arbitrage Relative Value
Modified VaR                      -0.02783751      -0.01232930    -0.01585024
Modified Expected Shortfall       -0.04377715      -0.02992712    -0.04417445
                            Short Selling Funds of Funds
Modified VaR                  -0.06436471    -0.02125092
Modified Expected Shortfall   -0.07076187    -0.03971531
> 
> 
> 
> 
> cleanEx()
> nameEx("table.Autocorrelation")
> ### * table.Autocorrelation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.Autocorrelation
> ### Title: table for calculating the first six autocorrelation coefficients
> ###   and significance
> ### Aliases: table.Autocorrelation
> 
> ### ** Examples
> 
> 
> data(managers)
> t(table.Autocorrelation(managers))
               rho1    rho2    rho3    rho4    rho5    rho6 Q(6) p-value
HAM1         0.1890 -0.0847 -0.0602 -0.1842 -0.0035  0.0492       0.0788
HAM2         0.1975  0.3046  0.0719  0.0770  0.0626  0.1574       0.0011
HAM3         0.0071  0.1970  0.0413  0.1237 -0.0717  0.2022       0.0286
HAM4         0.1954 -0.0840 -0.1694 -0.0923 -0.0041 -0.0065       0.0812
HAM5        -0.0579 -0.1714 -0.0330  0.1371 -0.1462 -0.1148       0.2989
HAM6         0.0982  0.1816 -0.0274 -0.1711 -0.0501 -0.1248       0.3885
EDHEC LS EQ  0.2119  0.0834  0.0254 -0.0435 -0.0533  0.1758       0.0872
SP500 TR    -0.0134 -0.0336  0.0514 -0.0878  0.0853  0.0776       0.7487
US 10Y TR    0.0398 -0.1739  0.1049 -0.0355 -0.1116 -0.0602       0.2199
US 3m TR     0.9224  0.9081  0.8968  0.8746  0.8363  0.8127       0.0000
> 
> result = t(table.Autocorrelation(managers[,1:8]))
> 
> textplot(result, rmar = 0.8, cmar = 2,  max.cex=.9, halign = "center", 
+          valign = "top", row.valign="center", wrap.rownames=15, 
+          wrap.colnames=10, mar = c(0,0,3,0)+0.1)
>          
> title(main="Autocorrelation")
> 
> 
> 
> 
> cleanEx()
> nameEx("table.CAPM")
> ### * table.CAPM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.SFM
> ### Title: Single Factor Asset-Pricing Model Summary: Statistics and
> ###   Stylized Facts
> ### Aliases: table.SFM table.CAPM
> 
> ### ** Examples
> 
> 
> data(managers)
> table.SFM(managers[,1:3], managers[,8], Rf = managers[,10])
                    HAM1 to SP500 TR HAM2 to SP500 TR HAM3 to SP500 TR
Alpha                         0.0058           0.0091           0.0062
Beta                          0.3901           0.3384           0.5523
Beta+                         0.3005           0.5227           0.4858
Beta-                         0.4264           0.0698           0.5067
R-squared                     0.4339           0.1673           0.4341
Annualized Alpha              0.0715           0.1147           0.0772
Correlation                   0.6587           0.4090           0.6589
Correlation p-value           0.0000           0.0000           0.0000
Tracking Error                0.1132           0.1534           0.1159
Active Premium                0.0408           0.0776           0.0545
Information Ratio             0.3604           0.5060           0.4701
Treynor Ratio                 0.2428           0.3883           0.1956
> 
> result = table.SFM(managers[,1:3], managers[,8], Rf = managers[,10])
> textplot(result, rmar = 0.8, cmar = 1.5,  max.cex=.9, 
+          halign = "center", valign = "top", row.valign="center", 
+          wrap.rownames=15, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
> title(main="Single Factor Model Related Statistics")
> 
> 
> 
> 
> cleanEx()
> nameEx("table.CalendarReturns")
> ### * table.CalendarReturns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.CalendarReturns
> ### Title: Monthly and Calendar year Return table
> ### Aliases: table.CalendarReturns table.Returns
> 
> ### ** Examples
> 
> 
> data(managers)
> t(table.CalendarReturns(managers[,c(1,7,8)]))
            1996 1997 1998 1999 2000  2001  2002 2003 2004 2005 2006
Jan          0.7  2.1  0.6 -0.9 -1.0   0.8   1.4 -4.1  0.5  0.0  6.9
Feb          1.9  0.2  4.3  0.9  1.2   0.8  -1.2 -2.5  0.0  2.1  1.5
Mar          1.6  0.9  3.6  4.6  5.8  -1.1   0.6  3.6  0.9 -2.1  4.0
Apr         -0.9  1.3  0.8  5.1  2.0   3.5   0.5  6.5 -0.4 -2.1 -0.1
May          0.8  4.4 -2.3  1.6  3.4   5.8  -0.2  3.4  0.8  0.4 -2.7
Jun         -0.4  2.3  1.2  3.3  1.2   0.2  -2.4  3.1  2.6  1.6  2.2
Jul         -2.3  1.5 -2.1  1.0  0.5   2.1  -7.5  1.8  0.0  0.9 -1.4
Aug          4.0  2.4 -9.4 -1.7  3.9   1.6   0.8  0.0  0.5  1.1  1.6
Sep          1.5  2.2  2.5 -0.4  0.1  -3.1  -5.8  0.9  0.9  2.6  0.7
Oct          2.9 -2.1  5.6 -0.1 -0.8   0.1   3.0  4.8 -0.1 -1.9  4.3
Nov          1.6  2.5  1.3  0.4  1.0   3.4   6.6  1.7  3.9  2.3  1.2
Dec          1.8  1.1  1.0  1.5 -0.7   6.8  -3.2  2.8  4.4  2.6  1.1
HAM1        13.6 20.4  6.1 16.1 17.7  22.4  -8.0 23.7 14.9  7.8 20.5
EDHEC LS EQ   NA 21.4 14.6 31.4 12.0  -1.2  -6.4 19.3  8.6 11.3 11.7
SP500 TR    23.0 33.4 28.6 21.0 -9.1 -11.9 -22.1 28.7 10.9  4.9 15.8
> 
> # prettify with format.df in hmisc package
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> result = t(table.CalendarReturns(managers[,c(1,8)]))
> 
> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, 
+          cdec=rep(1,dim(result)[2])), rmar = 0.8, cmar = 1,  
+          max.cex=.9, halign = "center", valign = "top", 
+          row.valign="center", wrap.rownames=20, wrap.colnames=10, 
+          col.rownames=c( rep("darkgray",12), "black", "blue"), 
+          mar = c(0,0,3,0)+0.1)
>          
> title(main="Calendar Returns")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.CaptureRatios")
> ### * table.CaptureRatios
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.CaptureRatios
> ### Title: Calculate and display a table of capture ratio and related
> ###   statistics
> ### Aliases: table.CaptureRatios table.UpDownRatios
> 
> ### ** Examples
> 
> 
> data(managers)
> table.CaptureRatios(managers[,1:6], managers[,7,drop=FALSE])
     Up Capture Down Capture
HAM1     1.0068       0.6320
HAM2     1.1774       0.8091
HAM3     1.2443       1.5138
HAM4     1.4855       2.3796
HAM5     0.9575       1.2573
HAM6     1.3205       0.8327
> table.UpDownRatios(managers[,1:6], managers[,7,drop=FALSE])
                    Up Capture Down Capture Up Number Down Number Up Percent
HAM1 to EDHEC LS EQ     1.0068       0.6320    0.8675      0.5135     0.5663
HAM2 to EDHEC LS EQ     1.1774       0.8091    0.6988      0.8378     0.4458
HAM3 to EDHEC LS EQ     1.2443       1.5138    0.8193      0.8108     0.4819
HAM4 to EDHEC LS EQ     1.4855       2.3796    0.7590      0.7297     0.6386
HAM5 to EDHEC LS EQ     0.9575       1.2573    0.7143      0.7500     0.5510
HAM6 to EDHEC LS EQ     1.3205       0.8327    0.8837      0.6190     0.6977
                    Down Percent
HAM1 to EDHEC LS EQ       0.6486
HAM2 to EDHEC LS EQ       0.4324
HAM3 to EDHEC LS EQ       0.4324
HAM4 to EDHEC LS EQ       0.3784
HAM5 to EDHEC LS EQ       0.4286
HAM6 to EDHEC LS EQ       0.4762
> 
> result = t(table.UpDownRatios(managers[,1:6], managers[,7,drop=FALSE])) 
> colnames(result)=colnames(managers[,1:6])
> textplot(result, rmar = 0.8, cmar = 1.5,  max.cex=.9, 
+          halign = "center", valign = "top", row.valign="center", 
+          wrap.rownames=15, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
>          
> title(main="Capture Ratios for EDHEC LS EQ")
> 
> 
> 
> 
> cleanEx()
> nameEx("table.Correlation")
> ### * table.Correlation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.Correlation
> ### Title: calculate correlalations of multicolumn data
> ### Aliases: table.Correlation
> 
> ### ** Examples
> 
> 
> # First we load the data
> data(managers)
> table.Correlation(managers[,1:6],managers[,7:8])
                    Correlation      p-value   Lower CI  Upper CI
HAM1 to EDHEC LS EQ   0.5896798 1.378595e-12 0.45894685 0.6954188
HAM1 to SP500 TR      0.6600671 7.397842e-18 0.55138376 0.7467191
HAM2 to EDHEC LS EQ   0.7015847 4.468363e-19 0.59747795 0.7824328
HAM2 to SP500 TR      0.4128282 1.715350e-06 0.25576240 0.5486602
HAM3 to EDHEC LS EQ   0.8053564 1.443898e-28 0.73174468 0.8603967
HAM3 to SP500 TR      0.6608633 6.545409e-18 0.55236590 0.7473433
HAM4 to EDHEC LS EQ   0.6148700 7.970417e-14 0.48958597 0.7152802
HAM4 to SP500 TR      0.5601846 2.870109e-12 0.43052170 0.6671932
HAM5 to EDHEC LS EQ   0.4462382 4.749637e-05 0.24694054 0.6093171
HAM5 to SP500 TR      0.2844487 1.216830e-02 0.06458459 0.4779755
HAM6 to EDHEC LS EQ   0.7285463 8.879813e-12 0.58804644 0.8263670
HAM6 to SP500 TR      0.5091542 1.735968e-05 0.30101889 0.6709863
> 
> result=table.Correlation(managers[,1:6],managers[,8])
> rownames(result)=colnames(managers[,1:6])
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, 
+          cdec=rep(3,dim(result)[2])), rmar = 0.8, cmar = 1.5,  
+          max.cex=.9, halign = "center", valign = "top", row.valign="center"
+          , wrap.rownames=20, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
> title(main="Correlations to SP500 TR")
> 
> ctable = table.Correlation(managers[,1:6],managers[,8,drop=FALSE], conf.level=.99)
> dotchart(ctable[,1],labels=rownames(ctable),xlim=c(-1,1))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.Distributions")
> ### * table.Distributions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.Distributions
> ### Title: Distributions Summary: Statistics and Stylized Facts
> ### Aliases: table.Distributions
> 
> ### ** Examples
> 
> 
> data(managers)
> table.Distributions(managers[,1:8])
                          HAM1   HAM2   HAM3    HAM4   HAM5    HAM6 EDHEC LS EQ
monthly  Std Dev        0.0256 0.0367 0.0365  0.0532 0.0457  0.0238      0.0205
Skewness               -0.6588 1.4580 0.7908 -0.4311 0.0738 -0.2800      0.0177
Kurtosis                5.3616 5.3794 5.6829  3.8632 5.3143  2.6511      3.9105
Excess kurtosis         2.3616 2.3794 2.6829  0.8632 2.3143 -0.3489      0.9105
Sample skewness        -0.6741 1.4937 0.8091 -0.4410 0.0768 -0.2936      0.0182
Sample excess kurtosis  2.5004 2.5270 2.8343  0.9437 2.5541 -0.2778      1.0013
                       SP500 TR
monthly  Std Dev         0.0433
Skewness                -0.5531
Kurtosis                 3.5598
Excess kurtosis          0.5598
Sample skewness         -0.5659
Sample excess kurtosis   0.6285
> 
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> result = t(table.Distributions(managers[,1:8]))
> 
> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, cdec=c(3,3,1)),
+ rmar = 0.8, cmar = 2,  max.cex=.9, halign = "center", valign = "top",
+ row.valign="center", wrap.rownames=20, wrap.colnames=10,
+ col.rownames=c("red", rep("darkgray",5), rep("orange",2)), mar = c(0,0,3,0)+0.1)
> title(main="Portfolio Distributions statistics")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.DownsideRisk")
> ### * table.DownsideRisk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.DownsideRisk
> ### Title: Downside Risk Summary: Statistics and Stylized Facts
> ### Aliases: table.DownsideRisk
> 
> ### ** Examples
> 
> 
> data(edhec)
> table.DownsideRisk(edhec, Rf=.04/12, MAR =.05/12, p=.95)
                            Convertible Arbitrage CTA Global
Semi Deviation                             0.0132     0.0159
Gain Deviation                             0.0094     0.0153
Loss Deviation                             0.0194     0.0124
Downside Deviation (MAR=5%)                0.0127     0.0159
Downside Deviation (Rf=4%)                 0.0124     0.0154
Downside Deviation (0%)                    0.0114     0.0136
Maximum Drawdown                           0.2927     0.1256
Historical VaR (95%)                      -0.0149    -0.0316
Historical ES (95%)                       -0.0366    -0.0413
Modified VaR (95%)                        -0.0245    -0.0328
Modified ES (95%)                         -0.0895    -0.0412
                            Distressed Securities Emerging Markets
Semi Deviation                             0.0132           0.0249
Gain Deviation                             0.0097           0.0186
Loss Deviation                             0.0148           0.0278
Downside Deviation (MAR=5%)                0.0121           0.0239
Downside Deviation (Rf=4%)                 0.0118           0.0236
Downside Deviation (0%)                    0.0105           0.0222
Maximum Drawdown                           0.2292           0.3598
Historical VaR (95%)                      -0.0198          -0.0423
Historical ES (95%)                       -0.0367          -0.0724
Modified VaR (95%)                        -0.0250          -0.0522
Modified ES (95%)                         -0.0517          -0.1157
                            Equity Market Neutral Event Driven
Semi Deviation                             0.0064       0.0133
Gain Deviation                             0.0050       0.0093
Loss Deviation                             0.0094       0.0153
Downside Deviation (MAR=5%)                0.0063       0.0124
Downside Deviation (Rf=4%)                 0.0060       0.0120
Downside Deviation (0%)                    0.0049       0.0108
Maximum Drawdown                           0.1108       0.2008
Historical VaR (95%)                      -0.0078      -0.0255
Historical ES (95%)                       -0.0169      -0.0386
Modified VaR (95%)                        -0.0106      -0.0255
Modified ES (95%)                         -0.0379      -0.0513
                            Fixed Income Arbitrage Global Macro
Semi Deviation                              0.0098       0.0091
Gain Deviation                              0.0054       0.0120
Loss Deviation                              0.0176       0.0065
Downside Deviation (MAR=5%)                 0.0098       0.0084
Downside Deviation (Rf=4%)                  0.0096       0.0079
Downside Deviation (0%)                     0.0087       0.0062
Maximum Drawdown                            0.1788       0.0792
Historical VaR (95%)                       -0.0071      -0.0149
Historical ES (95%)                        -0.0283      -0.0206
Modified VaR (95%)                         -0.0174      -0.0133
Modified ES (95%)                          -0.0500      -0.0164
                            Long/Short Equity Merger Arbitrage Relative Value
Semi Deviation                         0.0147           0.0074         0.0091
Gain Deviation                         0.0124           0.0058         0.0066
Loss Deviation                         0.0140           0.0088         0.0121
Downside Deviation (MAR=5%)            0.0137           0.0069         0.0085
Downside Deviation (Rf=4%)             0.0133           0.0066         0.0082
Downside Deviation (0%)                0.0118           0.0054         0.0071
Maximum Drawdown                       0.2182           0.0563         0.1594
Historical VaR (95%)                  -0.0262          -0.0103        -0.0114
Historical ES (95%)                   -0.0422          -0.0191        -0.0246
Modified VaR (95%)                    -0.0278          -0.0123        -0.0159
Modified ES (95%)                     -0.0438          -0.0299        -0.0442
                            Short Selling Funds of Funds
Semi Deviation                     0.0301         0.0113
Gain Deviation                     0.0381         0.0103
Loss Deviation                     0.0271         0.0120
Downside Deviation (MAR=5%)        0.0337         0.0112
Downside Deviation (Rf=4%)         0.0332         0.0108
Downside Deviation (0%)            0.0312         0.0094
Maximum Drawdown                   0.7687         0.2059
Historical VaR (95%)              -0.0674        -0.0203
Historical ES (95%)               -0.0968        -0.0332
Modified VaR (95%)                -0.0644        -0.0213
Modified ES (95%)                 -0.0708        -0.0397
> 
> result=t(table.DownsideRisk(edhec, Rf=.04/12, MAR =.05/12, p=.95))
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, 
+          cdec=rep(3,dim(result)[2])), rmar = 0.8, cmar = 1.5,  
+          max.cex=.9, halign = "center", valign = "top", row.valign="center", 
+          wrap.rownames=15, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
> title(main="Downside Risk Statistics")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.DownsideRiskRatio")
> ### * table.DownsideRiskRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.DownsideRiskRatio
> ### Title: Downside Summary: Statistics and ratios
> ### Aliases: table.DownsideRiskRatio
> 
> ### ** Examples
> 
> 
> data(managers)
> table.DownsideRiskRatio(managers[,1:8])
                           HAM1   HAM2   HAM3   HAM4   HAM5   HAM6 EDHEC LS EQ
monthly downside risk    0.0145 0.0116 0.0174 0.0341 0.0304 0.0121      0.0098
Annualised downside risk 0.0504 0.0401 0.0601 0.1180 0.1054 0.0421      0.0341
Downside potential       0.0051 0.0061 0.0079 0.0159 0.0145 0.0054      0.0041
Omega                    3.1907 3.3041 2.5803 1.6920 1.2816 3.0436      3.3186
Sortino ratio            0.7649 1.2220 0.7172 0.3234 0.1343 0.9102      0.9691
Upside potential         0.0162 0.0203 0.0203 0.0269 0.0186 0.0165      0.0137
Upside potential ratio   0.7503 2.2078 1.0852 0.8009 0.7557 1.0003      1.1136
Omega-sharpe ratio       2.1907 2.3041 1.5803 0.6920 0.2816 2.0436      2.3186
                         SP500 TR
monthly downside risk      0.0283
Annualised downside risk   0.0980
Downside potential         0.0132
Omega                      1.6581
Sortino ratio              0.3064
Upside potential           0.0218
Upside potential ratio     0.7153
Omega-sharpe ratio         0.6581
> 
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> result = t(table.DownsideRiskRatio(managers[,1:8]))
> 
> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, cdec=c(3,3,1)),
+ rmar = 0.8, cmar = 2,  max.cex=.9, halign = "center", valign = "top",
+ row.valign="center", wrap.rownames=20, wrap.colnames=10,
+ col.rownames=c("red", rep("darkgray",5), rep("orange",2)), mar = c(0,0,3,0)+0.1)
> title(main="Downside risk statistics")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.Drawdowns")
> ### * table.Drawdowns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.Drawdowns
> ### Title: Worst Drawdowns Summary: Statistics and Stylized Facts
> ### Aliases: table.Drawdowns
> 
> ### ** Examples
> 
> 
> data(edhec)
> table.Drawdowns(edhec[,1,drop=FALSE])
        From     Trough         To   Depth Length To Trough Recovery
1 2007-11-30 2008-11-30 2009-09-30 -0.2927     23        13       10
2 2004-05-31 2005-05-31 2006-02-28 -0.0822     22        13        9
3 1998-08-31 1998-10-31 1999-03-31 -0.0712      8         3        5
4 2015-06-30 2016-02-29 2016-07-31 -0.0527     14         9        5
5 2011-05-31 2011-09-30 2012-03-31 -0.0516     11         5        6
> table.Drawdowns(edhec[,12,drop=FALSE])
        From     Trough         To   Depth Length To Trough Recovery
1 2009-03-31 2017-11-30       <NA> -0.7687    130       105       NA
2 1998-09-30 2000-08-31 2002-09-30 -0.4956     49        24       25
3 2002-10-31 2007-05-31 2009-02-28 -0.3630     77        56       21
4 1997-04-30 1997-09-30 1998-03-31 -0.1502     12         6        6
5 1997-01-31 1997-01-31 1997-02-28 -0.0166      2         1        1
> data(managers)
> table.Drawdowns(managers[,8,drop=FALSE])
        From     Trough         To   Depth Length To Trough Recovery
1 2000-09-30 2002-09-30 2006-10-31 -0.4473     74        25       49
2 1998-07-31 1998-08-31 1998-11-30 -0.1537      5         2        3
3 2000-01-31 2000-02-29 2000-03-31 -0.0682      3         2        1
4 1999-07-31 1999-09-30 1999-11-30 -0.0624      5         3        2
5 1997-08-31 1997-08-31 1997-11-30 -0.0560      4         1        3
> 
> result=table.Drawdowns(managers[,1,drop=FALSE])
> 
> # This was really nice before Hmisc messed up 'format' from R-base
> #require("Hmisc")
> #textplot(Hmisc::format.df(result, na.blank=TRUE, numeric.dollar=FALSE, 
> #           cdec=c(rep(3,4), rep(0,3))), rmar = 0.8, cmar = 1.5,  
> #           max.cex=.9, halign = "center", valign = "top", row.valign="center", 
> #           wrap.rownames=5, wrap.colnames=10, mar = c(0,0,3,0)+0.1) 
> # title(main="Largest Drawdowns for HAM1")
> 
> 
> 
> 
> cleanEx()
> nameEx("table.DrawdownsRatio")
> ### * table.DrawdownsRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.DrawdownsRatio
> ### Title: Drawdowns Summary: Statistics and ratios
> ### Aliases: table.DrawdownsRatio
> 
> ### ** Examples
> 
> 
> data(managers)
> table.DrawdownsRatio(managers[,1:8])
                 HAM1   HAM2   HAM3   HAM4   HAM5   HAM6 EDHEC LS EQ SP500 TR
Sterling ratio 0.5463 0.5139 0.3884 0.3136 0.0847 0.7678      0.5688   0.1768
Calmar ratio   0.9062 0.7281 0.5226 0.4227 0.1096 1.7425      1.0982   0.2163
Burke ratio    0.6593 0.8970 0.6079 0.1998 0.1008 1.0788      0.8452   0.2191
Pain index     0.0157 0.0642 0.0674 0.0739 0.1452 0.0183      0.0178   0.1226
Ulcer index    0.0362 0.1000 0.1114 0.1125 0.1828 0.0299      0.0325   0.1893
Pain ratio     8.7789 2.7187 2.2438 1.6443 0.2570 7.4837      6.6466   0.7891
Martin ratio   3.7992 1.7473 1.3572 1.0798 0.2042 4.5928      3.6345   0.5112
> 
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> result = t(table.DrawdownsRatio(managers[,1:8], Rf=.04/12))
> 
> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, cdec=c(3,3,1)),
+ rmar = 0.8, cmar = 2,  max.cex=.9, halign = "center", valign = "top",
+ row.valign="center", wrap.rownames=20, wrap.colnames=10,
+ col.rownames=c("red", rep("darkgray",5), rep("orange",2)), mar = c(0,0,3,0)+0.1)
> title(main="Drawdowns ratio statistics")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.HigherMoments")
> ### * table.HigherMoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.HigherMoments
> ### Title: Higher Moments Summary: Statistics and Stylized Facts
> ### Aliases: table.HigherMoments
> 
> ### ** Examples
> 
> 
> data(managers)
> table.HigherMoments(managers[,1:3],managers[,8,drop=FALSE])
                HAM1 to SP500 TR HAM2 to SP500 TR HAM3 to SP500 TR
CoSkewness                0.0000           0.0000           0.0000
CoKurtosis                0.0000           0.0000           0.0000
Beta CoVariance           0.3906           0.3432           0.5572
Beta CoSkewness           0.5602           0.0454           0.5999
Beta CoKurtosis           0.4815           0.1988           0.5068
> result=t(table.HigherMoments(managers[,1:6],managers[,8,drop=FALSE]))
> rownames(result)=colnames(managers[,1:6])
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, 
+          cdec=rep(3,dim(result)[2])), rmar = 0.8, cmar = 1.5,  
+          max.cex=.9, halign = "center", valign = "top", row.valign="center", 
+          wrap.rownames=5, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
> title(main="Higher Co-Moments with SP500 TR")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.InformationRatio")
> ### * table.InformationRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.InformationRatio
> ### Title: Information ratio Summary: Statistics and Stylized Facts
> ### Aliases: table.InformationRatio
> 
> ### ** Examples
> 
> 
> data(managers)
> table.InformationRatio(managers[,1:8], managers[,8])
                            HAM1   HAM2   HAM3   HAM4   HAM5   HAM6 EDHEC LS EQ
Tracking Error            0.0327 0.0443 0.0334 0.0461 0.0520 0.0326      0.0326
Annualised Tracking Error 0.1132 0.1534 0.1159 0.1597 0.1800 0.1128      0.1130
Information Ratio         0.3604 0.5060 0.4701 0.1549 0.1212 0.6723      0.2985
                          SP500 TR
Tracking Error                   0
Annualised Tracking Error        0
Information Ratio              NaN
> 
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> result = t(table.InformationRatio(managers[,1:8], managers[,8]))
> 
> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, cdec=c(3,3,1)),
+ rmar = 0.8, cmar = 2,  max.cex=.9, halign = "center", valign = "top",
+ row.valign="center", wrap.rownames=20, wrap.colnames=10,
+ col.rownames=c("red", rep("darkgray",5), rep("orange",2)), mar = c(0,0,3,0)+0.1)
> title(main="Portfolio information ratio")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.MonthlyReturns")
> ### * table.MonthlyReturns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.Stats
> ### Title: Returns Summary: Statistics and Stylized Facts
> ### Aliases: table.Stats table.MonthlyReturns
> 
> ### ** Examples
> 
> 
> data(edhec)
> table.Stats(edhec[,1:3])
                Convertible Arbitrage CTA Global Distressed Securities
Observations                 275.0000   275.0000              275.0000
NAs                            0.0000     0.0000                0.0000
Minimum                       -0.1237    -0.0568               -0.0836
Quartile 1                     0.0000    -0.0119               -0.0022
Median                         0.0064     0.0020                0.0086
Arithmetic Mean                0.0055     0.0042                0.0066
Geometric Mean                 0.0054     0.0039                0.0065
Quartile 3                     0.0134     0.0202                0.0175
Maximum                        0.0611     0.0691                0.0504
SE Mean                        0.0010     0.0014                0.0010
LCL Mean (0.95)                0.0036     0.0014                0.0046
UCL Mean (0.95)                0.0074     0.0069                0.0086
Variance                       0.0003     0.0005                0.0003
Stdev                          0.0163     0.0231                0.0169
Skewness                      -2.6495     0.1593               -1.2475
Kurtosis                      20.7792    -0.0524                4.7755
> t(table.Stats(edhec))
                       Observations NAs Minimum Quartile 1  Median
Convertible Arbitrage           275   0 -0.1237     0.0000  0.0064
CTA Global                      275   0 -0.0568    -0.0119  0.0020
Distressed Securities           275   0 -0.0836    -0.0022  0.0086
Emerging Markets                275   0 -0.1922    -0.0098  0.0091
Equity Market Neutral           275   0 -0.0587     0.0010  0.0047
Event Driven                    275   0 -0.0886    -0.0015  0.0083
Fixed Income Arbitrage          275   0 -0.0867     0.0016  0.0054
Global Macro                    275   0 -0.0313    -0.0040  0.0038
Long/Short Equity               275   0 -0.0675    -0.0047  0.0079
Merger Arbitrage                275   0 -0.0544     0.0006  0.0058
Relative Value                  275   0 -0.0692     0.0010  0.0064
Short Selling                   275   0 -0.1340    -0.0264 -0.0053
Funds of Funds                  275   0 -0.0618    -0.0035  0.0052
                       Arithmetic Mean Geometric Mean Quartile 3 Maximum
Convertible Arbitrage           0.0055         0.0054     0.0134  0.0611
CTA Global                      0.0042         0.0039     0.0202  0.0691
Distressed Securities           0.0066         0.0065     0.0175  0.0504
Emerging Markets                0.0062         0.0057     0.0256  0.1230
Equity Market Neutral           0.0044         0.0043     0.0081  0.0253
Event Driven                    0.0062         0.0061     0.0159  0.0442
Fixed Income Arbitrage          0.0043         0.0042     0.0093  0.0365
Global Macro                    0.0054         0.0053     0.0124  0.0738
Long/Short Equity               0.0063         0.0061     0.0191  0.0745
Merger Arbitrage                0.0053         0.0052     0.0110  0.0272
Relative Value                  0.0057         0.0056     0.0128  0.0392
Short Selling                  -0.0019        -0.0030     0.0182  0.2463
Funds of Funds                  0.0042         0.0041     0.0120  0.0666
                       SE Mean LCL Mean (0.95) UCL Mean (0.95) Variance  Stdev
Convertible Arbitrage   0.0010          0.0036          0.0074   0.0003 0.0163
CTA Global              0.0014          0.0014          0.0069   0.0005 0.0231
Distressed Securities   0.0010          0.0046          0.0086   0.0003 0.0169
Emerging Markets        0.0019          0.0024          0.0101   0.0010 0.0321
Equity Market Neutral   0.0005          0.0034          0.0053   0.0001 0.0080
Event Driven            0.0010          0.0042          0.0082   0.0003 0.0167
Fixed Income Arbitrage  0.0007          0.0029          0.0056   0.0001 0.0113
Global Macro            0.0009          0.0037          0.0071   0.0002 0.0145
Long/Short Equity       0.0012          0.0039          0.0086   0.0004 0.0198
Merger Arbitrage        0.0006          0.0042          0.0064   0.0001 0.0095
Relative Value          0.0007          0.0044          0.0070   0.0001 0.0113
Short Selling           0.0028         -0.0075          0.0036   0.0022 0.0467
Funds of Funds          0.0009          0.0024          0.0061   0.0002 0.0154
                       Skewness Kurtosis
Convertible Arbitrage   -2.6495  20.7792
CTA Global               0.1593  -0.0524
Distressed Securities   -1.2475   4.7755
Emerging Markets        -1.1631   6.3307
Equity Market Neutral   -2.0743  14.2186
Event Driven            -1.3627   4.8163
Fixed Income Arbitrage  -3.9677  27.6570
Global Macro             0.9892   2.8388
Long/Short Equity       -0.3837   1.4801
Merger Arbitrage        -1.3119   5.9056
Relative Value          -1.7977   9.2593
Short Selling            0.7969   3.3845
Funds of Funds          -0.3572   4.1281
> 
> result=t(table.Stats(edhec))
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, cdec=c(rep(1,2),rep(3,14))), 
+          rmar = 0.8, cmar = 1.5,  max.cex=.9, halign = "center", valign = "top", 
+          row.valign="center", wrap.rownames=10, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
> title(main="Statistics for EDHEC Indexes")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.ProbOutPerformance")
> ### * table.ProbOutPerformance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.ProbOutPerformance
> ### Title: Outperformance Report of Asset vs Benchmark
> ### Aliases: table.ProbOutPerformance
> 
> ### ** Examples
> 
> 
> data(edhec) 
> 
> table.ProbOutPerformance(edhec[,1],edhec[,2]) 
  period_lengths Convertible Arbitrage CTA Global total periods
1              1                   150        125           275
2              3                   171        102           273
3              6                   170        100           270
4              9                   170         97           267
5             12                   164        100           264
6             18                   164         94           258
7             36                   141         99           240
  prob_Convertible Arbitrage_outperformance prob_CTA Global_outperformance
1                                 0.5454545                      0.4545455
2                                 0.6263736                      0.3736264
3                                 0.6296296                      0.3703704
4                                 0.6367041                      0.3632959
5                                 0.6212121                      0.3787879
6                                 0.6356589                      0.3643411
7                                 0.5875000                      0.4125000
> title(main='Table of Convertible Arbitrage vs Benchmark')
> 
> 
> 
> 
> cleanEx()
> nameEx("table.RollingPeriods")
> ### * table.RollingPeriods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.RollingPeriods
> ### Title: Rolling Periods Summary: Statistics and Stylized Facts
> ### Aliases: table.RollingPeriods table.TrailingPeriods
> ###   table.TrailingPeriodsRel
> 
> ### ** Examples
> 
> 
> data(edhec)
> table.TrailingPeriods(edhec[,10:13], periods=c(12,24,36))
                      Merger Arbitrage Relative Value Short Selling
Last 12 month Average           0.0039         0.0037       -0.0070
Last 24 month Average           0.0034         0.0019        0.0007
Last 36 month Average           0.0035         0.0030       -0.0100
Last 12 month Std Dev           0.0048         0.0065        0.0096
Last 24 month Std Dev           0.0060         0.0062        0.0263
Last 36 month Std Dev           0.0057         0.0055        0.0315
                      Funds of Funds
Last 12 month Average         0.0035
Last 24 month Average         0.0011
Last 36 month Average         0.0027
Last 12 month Std Dev         0.0107
Last 24 month Std Dev         0.0112
Last 36 month Std Dev         0.0096
> 
> result=table.TrailingPeriods(edhec[,10:13], periods=c(12,24,36))
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, 
+                    cdec=rep(3,dim(result)[2])), rmar = 0.8, cmar = 1.5,  
+                    max.cex=.9, halign = "center", valign = "top", row.valign="center", 
+                    wrap.rownames=15, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
> title(main="Trailing Period Statistics")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.SpecificRisk")
> ### * table.SpecificRisk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.SpecificRisk
> ### Title: Specific risk Summary: Statistics and Stylized Facts
> ### Aliases: table.SpecificRisk
> 
> ### ** Examples
> 
> 
> data(managers)
> table.SpecificRisk(managers[,1:8], managers[,8])
                  HAM1   HAM2   HAM3   HAM4   HAM5   HAM6 EDHEC LS EQ SP500 TR
Specific Risk   0.0664     NA 0.0946 0.1521     NA     NA          NA     0.00
Systematic Risk 0.0586 0.0515 0.0836 0.1032 0.0477 0.0486      0.0503     0.15
Total Risk      0.0886     NA 0.1262 0.1838     NA     NA          NA     0.15
> 
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> result = t(table.SpecificRisk(managers[,1:8], managers[,8], Rf=.04/12))
> 
> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, cdec=c(3,3,1)),
+ rmar = 0.8, cmar = 2,  max.cex=.9, halign = "center", valign = "top", 
+ row.valign="center", wrap.rownames=20, wrap.colnames=10, 
+ col.rownames=c("red", rep("darkgray",5), rep("orange",2)), mar = c(0,0,3,0)+0.1)
> title(main="Portfolio specific, systematic and total risk")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("table.Variability")
> ### * table.Variability
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table.Variability
> ### Title: Variability Summary: Statistics and Stylized Facts
> ### Aliases: table.Variability
> 
> ### ** Examples
> 
> 
> data(managers)
> table.Variability(managers[,1:8])
                          HAM1   HAM2   HAM3   HAM4   HAM5   HAM6 EDHEC LS EQ
Mean Absolute deviation 0.0182 0.0268 0.0268 0.0410 0.0329 0.0187      0.0159
monthly Std Dev         0.0256 0.0367 0.0365 0.0532 0.0457 0.0238      0.0205
Annualized Std Dev      0.0888 0.1272 0.1265 0.1843 0.1584 0.0825      0.0708
                        SP500 TR
Mean Absolute deviation   0.0333
monthly Std Dev           0.0433
Annualized Std Dev        0.1500
> 
> require("Hmisc")
Loading required package: Hmisc
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> result = t(table.Variability(managers[,1:8]))
> 
> textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, cdec=c(3,3,1)),
+ rmar = 0.8, cmar = 2,  max.cex=.9, halign = "center", valign = "top",
+ row.valign="center", wrap.rownames=20, wrap.colnames=10,
+ col.rownames=c("red", rep("darkgray",5), rep("orange",2)), mar = c(0,0,3,0)+0.1)
> title(main="Portfolio variability")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Hmisc’, ‘package:ggplot2’, ‘package:Formula’,
  ‘package:survival’, ‘package:lattice’

> nameEx("textplot")
> ### * textplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: replaceTabs.inner
> ### Title: Display text information in a graphics plot.
> ### Aliases: replaceTabs.inner replaceTabs textplot textplot.default
> ###   textplot.character textplot.matrix textplot.data.frame
> 
> ### ** Examples
> 
> 
> # Also see the examples in the original gplots textplot function
> data(managers)
> textplot(table.AnnualizedReturns(managers[,1:6]))
> 
> # This was really nice before Hmisc messed up 'format' from R-base
> # prettify with format.df in hmisc package
> # require("Hmisc")
> # result = t(table.CalendarReturns(managers[,1:8]))[-1:-12,]
> 
> #  textplot(Hmisc::format.df(result, na.blank=TRUE, numeric.dollar=FALSE, 
> #           cdec=rep(1,dim(result)[2])), rmar = 0.8, cmar = 1,  max.cex=.9, 
> #           halign = "center", valign = "top", row.valign="center", wrap.rownames=20, 
> #           wrap.colnames=10, col.rownames=c("red", rep("darkgray",5), 
> #           rep("orange",2)), mar = c(0,0,4,0)+0.1)
> #
> # title(main="Calendar Returns")
> 
> 
> 
> 
> cleanEx()
> nameEx("to.period.contributions")
> ### * to.period.contributions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: to.period.contributions
> ### Title: Aggregate contributions through time
> ### Aliases: to.period.contributions to.monthly.contributions
> ###   to.weekly.contributions to.quarterly.contributions
> ###   to.yearly.contributions
> 
> ### ** Examples
> 
> data(managers, package="PerformanceAnalytics")
> 
> res_qtr_rebal = Return.portfolio(  managers["2002::",1:5]
+                                  , weights=c(.05,.1,.3,.4,.15)
+                                  , rebalance_on = "quarters"
+                                  , verbose=TRUE)
>                                  
> to.period.contributions(res_qtr_rebal$contribution, period="years")
                   HAM1         HAM2         HAM3        HAM4        HAM5
2002-12-31 -0.004045348 -0.012800051 -0.060038137 -0.02103051 -0.01650314
2003-12-31  0.012493183  0.011940516  0.079079298  0.22039789  0.03175587
2004-12-31  0.007188399  0.012866800  0.005786203  0.05651752  0.01053252
2005-12-31  0.004033565  0.006166386  0.044503812  0.04027608  0.01033577
2006-12-31  0.009985784  0.004586611  0.042558683  0.05289248  0.02315896
           Portfolio Return
2002-12-31      -0.11441719
2003-12-31       0.35566675
2004-12-31       0.09289143
2005-12-31       0.10531560
2006-12-31       0.13318252
> to.yearly.contributions(res_qtr_rebal$contribution)
                   HAM1         HAM2         HAM3        HAM4        HAM5
2002-12-31 -0.004045348 -0.012800051 -0.060038137 -0.02103051 -0.01650314
2003-12-31  0.012493183  0.011940516  0.079079298  0.22039789  0.03175587
2004-12-31  0.007188399  0.012866800  0.005786203  0.05651752  0.01053252
2005-12-31  0.004033565  0.006166386  0.044503812  0.04027608  0.01033577
2006-12-31  0.009985784  0.004586611  0.042558683  0.05289248  0.02315896
           Portfolio Return
2002-12-31      -0.11441719
2003-12-31       0.35566675
2004-12-31       0.09289143
2005-12-31       0.10531560
2006-12-31       0.13318252
> 
> 
> 
> 
> cleanEx()
> nameEx("weights")
> ### * weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weights
> ### Title: Selected Portfolio Weights Data
> ### Aliases: weights
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(weights)
> 
> #preview the data
> head(weights)
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
Warning in tzone.xts(x) : index does not have a ‘tzone’ attribute
Warning in tclass.xts(x) : index does not have a ‘tclass’ attribute
           Convertible Arbitrage CTA Global Distressed Securities
2000-01-01            0.02500000 0.14601749             0.0250000
2001-01-01            0.15785710 0.19577551             0.0250000
2002-01-01            0.24431295 0.02500000             0.0250000
2003-01-01            0.21955470 0.06590151             0.0250000
2004-01-01            0.09780634 0.02552822             0.1050766
2005-01-01            0.02500000 0.02500000             0.2445763
           Emerging Markets Equity Market Neutral Event Driven
2000-01-01            0.025             0.3500000        0.025
2001-01-01            0.025             0.3500000        0.025
2002-01-01            0.025             0.3500000        0.025
2003-01-01            0.025             0.2817930        0.025
2004-01-01            0.025             0.3500000        0.025
2005-01-01            0.025             0.2054237        0.025
           Fixed Income Arbitrage Global Macro Long/Short Equity
2000-01-01              0.0250000        0.025             0.025
2001-01-01              0.0250000        0.025             0.025
2002-01-01              0.2056871        0.025             0.025
2003-01-01              0.2577508        0.025             0.025
2004-01-01              0.2715888        0.025             0.025
2005-01-01              0.3500000        0.025             0.025
           Merger Arbitrage Relative Value
2000-01-01       0.07146246      0.2575201
2001-01-01       0.12136740      0.0250000
2002-01-01       0.02500000      0.0250000
2003-01-01       0.02500000      0.0250000
2004-01-01       0.02500000      0.0250000
2005-01-01       0.02500000      0.0250000
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  38.47 1.897 41.445 0.002 0.001 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
